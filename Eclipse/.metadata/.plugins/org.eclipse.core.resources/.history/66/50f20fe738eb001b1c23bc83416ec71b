#ifndef TIMERS_H_
#define TIMERS_H_




/*includes*/
#include "common_macros.h"
#include "micro_config.h"
#include "std_types.h"

/*type configurations enumerations*/

/*          Type configs for timer 0 and timer 2        */

/*Prescalar clock config*/
typedef enum{
NO_CLOCK,
F_CPU_1,
F_CPU_8,
F_CPU_64,
F_CPU_256,
F_CPU_1024,
EXTERNAL_T0_FALLING,
EXTERNAL_T0_RISING
}Timer_0_2_ClockType;


/*Timer0/2 Mode config*/
typedef enum{
NORMAL,
PWM_PHASE_CORRECT,
CTC,
FAST_PWM
}Timer_0_2_ModeType;


/*Timer0/2 Compare match output Mode config*/
typedef enum{
NORMAL_OC0_DISCONNECTED,
TOGGLE_OC0_ON_COMPARE,  /*RESERVED IN PWM-MODE*/
CLEAR_OC0_ON_COMPARE,
SET_OC0_ON_COMPARE
}Timer_0_2_COMType;

/*struct for configuring timer0 and 2*/
typedef struct{
Timer_0_2_ClockType clock;
uint8 output_compare_value=0;
Timer_0_2_ModeType mode;
Timer_0_2_COMType com_mode;
}Timer_0_2_ConfigType;


/*Function Prototypes*/

/*                      Timer 0                  */

void Timer_0_init(const Timer_0_2_ConfigType * cfg_ptr); /*Initialize timer 0 configuration*/
void Timer_0_setCompareValue(const uint8 compare_val); /*Set output compare value for timer0*/
void Timer_0_setCounterValue(const uint8 counter_val); /*Set current counter value for timer0*/

void Timer_0_setCompareCallBack(void(*f_ptr)(void)); /*Set compare mode isr callback*/
void Timer_0_setOverflowCallBack(void(*f_ptr)(void)); /*Set overflow mode isr callback*/

void Timer_0_EnableCompareInterrupt(void(*f_ptr)(void)); /*Enable compare mode Interrupt*/
void Timer_0_EnableOverflowInterrupt(void(*f_ptr)(void)); /*Enable compare mode Interrupt*/
void Timer_0_DisableCompareInterrupt(void(*f_ptr)(void)); /*Disable compare mode Interrupt*/
void Timer_0_DisableOverflowInterrupt(void(*f_ptr)(void)); /*Disable compare mode Interrupt*/

void Timer_0_deInit(void);
void Timer_0_setPrescalar(const Timer_0_2_ClockType clock);



/*                      Timer 2                 */



/*                      Timer 1                  */

#endif
