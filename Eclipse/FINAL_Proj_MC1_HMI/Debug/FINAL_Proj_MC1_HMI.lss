
FINAL_Proj_MC1_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00002b0a  00002b9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080010c  0080010c  00002c4a  2**0
                  ALLOC
  3 .stab         000029c4  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d6e  00000000  00000000  00005610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000737e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000762e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009277  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a162  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bacb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_3>
      10:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__vector_6>
      1c:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__vector_7>
      20:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__vector_8>
      24:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_11>
      30:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_12>
      34:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 12 	call	0x2560	; 0x2560 <main>
      8a:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ef       	ldi	r26, 0xF3	; 243
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 ef       	ldi	r24, 0xF3	; 243
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Keypad_getPressedKey>:

static uint8 Keypad_4x4_adjustSwitchNumber(uint8 num);
#endif

uint8 Keypad_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Keypad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
    uint8 row, col;
    while (1)
    {

        for (col = 0; col < KEYPAD_COLS; col++)
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	66 c0       	rjmp	.+204    	; 0xc20 <Keypad_getPressedKey+0xda>
        {
            /*config direction in for all ports except column number to be out in our port*/
              KEYPAD_DIR = (1<<4+col);
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	88 2f       	mov	r24, r24
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	9c 01       	movw	r18, r24
     b60:	2c 5f       	subi	r18, 0xFC	; 252
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <Keypad_getPressedKey+0x28>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	2a 95       	dec	r18
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <Keypad_getPressedKey+0x24>
     b72:	80 83       	st	Z, r24
              /*make output zero on our column and enable internal pullups for all input ports which are rows*/
              KEYPAD_OUT = ~(1 << 4 + col);
     b74:	eb e3       	ldi	r30, 0x3B	; 59
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9c 01       	movw	r18, r24
     b80:	2c 5f       	subi	r18, 0xFC	; 252
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	02 2e       	mov	r0, r18
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <Keypad_getPressedKey+0x4a>
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	0a 94       	dec	r0
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <Keypad_getPressedKey+0x46>
     b94:	80 95       	com	r24
     b96:	80 83       	st	Z, r24
              for (row = 0; row < KEYPAD_ROWS; row++)
     b98:	1a 82       	std	Y+2, r1	; 0x02
     b9a:	3b c0       	rjmp	.+118    	; 0xc12 <Keypad_getPressedKey+0xcc>
              {
                  /*
              check if bit of our row is zero which means key is pressed, and return the adjusted key number
              */
                  if (BIT_IS_CLEAR(KEYPAD_IN, row))
     b9c:	e9 e3       	ldi	r30, 0x39	; 57
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	88 2f       	mov	r24, r24
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a9 01       	movw	r20, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <Keypad_getPressedKey+0x6e>
     bb0:	55 95       	asr	r21
     bb2:	47 95       	ror	r20
     bb4:	8a 95       	dec	r24
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <Keypad_getPressedKey+0x6a>
     bb8:	ca 01       	movw	r24, r20
     bba:	81 70       	andi	r24, 0x01	; 1
     bbc:	90 70       	andi	r25, 0x00	; 0
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	29 f5       	brne	.+74     	; 0xc0c <Keypad_getPressedKey+0xc6>
                  {
                      while(BIT_IS_CLEAR(KEYPAD_IN, row));
     bc2:	e9 e3       	ldi	r30, 0x39	; 57
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a9 01       	movw	r20, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <Keypad_getPressedKey+0x94>
     bd6:	55 95       	asr	r21
     bd8:	47 95       	ror	r20
     bda:	8a 95       	dec	r24
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <Keypad_getPressedKey+0x90>
     bde:	ca 01       	movw	r24, r20
     be0:	81 70       	andi	r24, 0x01	; 1
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	69 f3       	breq	.-38     	; 0xbc2 <Keypad_getPressedKey+0x7c>
#if (KEYPAD_COLS == 3)
                      return Keypad_4x3_adjustSwitchNumber(row * KEYPAD_COLS + col + 1);
#elif (KEYPAD_COLS == 4)
                      return Keypad_4x4_adjustSwitchNumber(row * KEYPAD_COLS + col + 1);
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	98 2f       	mov	r25, r24
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	89 0f       	add	r24, r25
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	0e 94 15 06 	call	0xc2a	; 0xc2a <Keypad_4x4_adjustSwitchNumber>
#endif
                  }
              }
        }
    }
}
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret
        {
            /*config direction in for all ports except column number to be out in our port*/
              KEYPAD_DIR = (1<<4+col);
              /*make output zero on our column and enable internal pullups for all input ports which are rows*/
              KEYPAD_OUT = ~(1 << 4 + col);
              for (row = 0; row < KEYPAD_ROWS; row++)
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	8a 83       	std	Y+2, r24	; 0x02
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	84 30       	cpi	r24, 0x04	; 4
     c16:	08 f4       	brcc	.+2      	; 0xc1a <Keypad_getPressedKey+0xd4>
     c18:	c1 cf       	rjmp	.-126    	; 0xb9c <Keypad_getPressedKey+0x56>
{
    uint8 row, col;
    while (1)
    {

        for (col = 0; col < KEYPAD_COLS; col++)
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	84 30       	cpi	r24, 0x04	; 4
     c24:	08 f4       	brcc	.+2      	; 0xc28 <Keypad_getPressedKey+0xe2>
     c26:	96 cf       	rjmp	.-212    	; 0xb54 <Keypad_getPressedKey+0xe>
     c28:	93 cf       	rjmp	.-218    	; 0xb50 <Keypad_getPressedKey+0xa>

00000c2a <Keypad_4x4_adjustSwitchNumber>:
        return num;
    }
}
#elif (KEYPAD_COLS == 4)
static uint8 Keypad_4x4_adjustSwitchNumber(uint8 num)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <Keypad_4x4_adjustSwitchNumber+0x6>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <Keypad_4x4_adjustSwitchNumber+0x8>
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	89 83       	std	Y+1, r24	; 0x01
    switch (num)
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	3c 83       	std	Y+4, r19	; 0x04
     c40:	2b 83       	std	Y+3, r18	; 0x03
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	88 30       	cpi	r24, 0x08	; 8
     c48:	91 05       	cpc	r25, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <Keypad_4x4_adjustSwitchNumber+0x24>
     c4c:	70 c0       	rjmp	.+224    	; 0xd2e <Keypad_4x4_adjustSwitchNumber+0x104>
     c4e:	2b 81       	ldd	r18, Y+3	; 0x03
     c50:	3c 81       	ldd	r19, Y+4	; 0x04
     c52:	29 30       	cpi	r18, 0x09	; 9
     c54:	31 05       	cpc	r19, r1
     c56:	5c f5       	brge	.+86     	; 0xcae <Keypad_4x4_adjustSwitchNumber+0x84>
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	84 30       	cpi	r24, 0x04	; 4
     c5e:	91 05       	cpc	r25, r1
     c60:	09 f4       	brne	.+2      	; 0xc64 <Keypad_4x4_adjustSwitchNumber+0x3a>
     c62:	59 c0       	rjmp	.+178    	; 0xd16 <Keypad_4x4_adjustSwitchNumber+0xec>
     c64:	2b 81       	ldd	r18, Y+3	; 0x03
     c66:	3c 81       	ldd	r19, Y+4	; 0x04
     c68:	25 30       	cpi	r18, 0x05	; 5
     c6a:	31 05       	cpc	r19, r1
     c6c:	9c f4       	brge	.+38     	; 0xc94 <Keypad_4x4_adjustSwitchNumber+0x6a>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	91 05       	cpc	r25, r1
     c76:	09 f4       	brne	.+2      	; 0xc7a <Keypad_4x4_adjustSwitchNumber+0x50>
     c78:	48 c0       	rjmp	.+144    	; 0xd0a <Keypad_4x4_adjustSwitchNumber+0xe0>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	23 30       	cpi	r18, 0x03	; 3
     c80:	31 05       	cpc	r19, r1
     c82:	0c f0       	brlt	.+2      	; 0xc86 <Keypad_4x4_adjustSwitchNumber+0x5c>
     c84:	45 c0       	rjmp	.+138    	; 0xd10 <Keypad_4x4_adjustSwitchNumber+0xe6>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	91 05       	cpc	r25, r1
     c8e:	09 f4       	brne	.+2      	; 0xc92 <Keypad_4x4_adjustSwitchNumber+0x68>
     c90:	39 c0       	rjmp	.+114    	; 0xd04 <Keypad_4x4_adjustSwitchNumber+0xda>
     c92:	67 c0       	rjmp	.+206    	; 0xd62 <Keypad_4x4_adjustSwitchNumber+0x138>
     c94:	2b 81       	ldd	r18, Y+3	; 0x03
     c96:	3c 81       	ldd	r19, Y+4	; 0x04
     c98:	26 30       	cpi	r18, 0x06	; 6
     c9a:	31 05       	cpc	r19, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <Keypad_4x4_adjustSwitchNumber+0x76>
     c9e:	41 c0       	rjmp	.+130    	; 0xd22 <Keypad_4x4_adjustSwitchNumber+0xf8>
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	87 30       	cpi	r24, 0x07	; 7
     ca6:	91 05       	cpc	r25, r1
     ca8:	0c f0       	brlt	.+2      	; 0xcac <Keypad_4x4_adjustSwitchNumber+0x82>
     caa:	3e c0       	rjmp	.+124    	; 0xd28 <Keypad_4x4_adjustSwitchNumber+0xfe>
     cac:	37 c0       	rjmp	.+110    	; 0xd1c <Keypad_4x4_adjustSwitchNumber+0xf2>
     cae:	2b 81       	ldd	r18, Y+3	; 0x03
     cb0:	3c 81       	ldd	r19, Y+4	; 0x04
     cb2:	2c 30       	cpi	r18, 0x0C	; 12
     cb4:	31 05       	cpc	r19, r1
     cb6:	09 f4       	brne	.+2      	; 0xcba <Keypad_4x4_adjustSwitchNumber+0x90>
     cb8:	46 c0       	rjmp	.+140    	; 0xd46 <Keypad_4x4_adjustSwitchNumber+0x11c>
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	8d 30       	cpi	r24, 0x0D	; 13
     cc0:	91 05       	cpc	r25, r1
     cc2:	5c f4       	brge	.+22     	; 0xcda <Keypad_4x4_adjustSwitchNumber+0xb0>
     cc4:	2b 81       	ldd	r18, Y+3	; 0x03
     cc6:	3c 81       	ldd	r19, Y+4	; 0x04
     cc8:	2a 30       	cpi	r18, 0x0A	; 10
     cca:	31 05       	cpc	r19, r1
     ccc:	b1 f1       	breq	.+108    	; 0xd3a <Keypad_4x4_adjustSwitchNumber+0x110>
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	8b 30       	cpi	r24, 0x0B	; 11
     cd4:	91 05       	cpc	r25, r1
     cd6:	a4 f5       	brge	.+104    	; 0xd40 <Keypad_4x4_adjustSwitchNumber+0x116>
     cd8:	2d c0       	rjmp	.+90     	; 0xd34 <Keypad_4x4_adjustSwitchNumber+0x10a>
     cda:	2b 81       	ldd	r18, Y+3	; 0x03
     cdc:	3c 81       	ldd	r19, Y+4	; 0x04
     cde:	2e 30       	cpi	r18, 0x0E	; 14
     ce0:	31 05       	cpc	r19, r1
     ce2:	b9 f1       	breq	.+110    	; 0xd52 <Keypad_4x4_adjustSwitchNumber+0x128>
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	8e 30       	cpi	r24, 0x0E	; 14
     cea:	91 05       	cpc	r25, r1
     cec:	7c f1       	brlt	.+94     	; 0xd4c <Keypad_4x4_adjustSwitchNumber+0x122>
     cee:	2b 81       	ldd	r18, Y+3	; 0x03
     cf0:	3c 81       	ldd	r19, Y+4	; 0x04
     cf2:	2f 30       	cpi	r18, 0x0F	; 15
     cf4:	31 05       	cpc	r19, r1
     cf6:	79 f1       	breq	.+94     	; 0xd56 <Keypad_4x4_adjustSwitchNumber+0x12c>
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	80 31       	cpi	r24, 0x10	; 16
     cfe:	91 05       	cpc	r25, r1
     d00:	69 f1       	breq	.+90     	; 0xd5c <Keypad_4x4_adjustSwitchNumber+0x132>
     d02:	2f c0       	rjmp	.+94     	; 0xd62 <Keypad_4x4_adjustSwitchNumber+0x138>
    {
    case 1:
        return 7;
     d04:	97 e0       	ldi	r25, 0x07	; 7
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	2e c0       	rjmp	.+92     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 2:
        return 8;
     d0a:	28 e0       	ldi	r18, 0x08	; 8
     d0c:	2a 83       	std	Y+2, r18	; 0x02
     d0e:	2b c0       	rjmp	.+86     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 3:
        return 9;
     d10:	39 e0       	ldi	r19, 0x09	; 9
     d12:	3a 83       	std	Y+2, r19	; 0x02
     d14:	28 c0       	rjmp	.+80     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 4:
        return '%'; // ASCII Code of %
     d16:	85 e2       	ldi	r24, 0x25	; 37
     d18:	8a 83       	std	Y+2, r24	; 0x02
     d1a:	25 c0       	rjmp	.+74     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 5:
        return 4;
     d1c:	94 e0       	ldi	r25, 0x04	; 4
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	22 c0       	rjmp	.+68     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 6:
        return 5;
     d22:	25 e0       	ldi	r18, 0x05	; 5
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	1f c0       	rjmp	.+62     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 7:
        return 6;
     d28:	36 e0       	ldi	r19, 0x06	; 6
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	1c c0       	rjmp	.+56     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 8:
        return '*'; /* ASCII Code of '*' */
     d2e:	8a e2       	ldi	r24, 0x2A	; 42
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	19 c0       	rjmp	.+50     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 9:
        return 1;
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	16 c0       	rjmp	.+44     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 10:
        return 2;
     d3a:	22 e0       	ldi	r18, 0x02	; 2
     d3c:	2a 83       	std	Y+2, r18	; 0x02
     d3e:	13 c0       	rjmp	.+38     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 11:
        return 3;
     d40:	33 e0       	ldi	r19, 0x03	; 3
     d42:	3a 83       	std	Y+2, r19	; 0x02
     d44:	10 c0       	rjmp	.+32     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 12:
        return '-'; /* ASCII Code of '-' */
     d46:	8d e2       	ldi	r24, 0x2D	; 45
     d48:	8a 83       	std	Y+2, r24	; 0x02
     d4a:	0d c0       	rjmp	.+26     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 13:
        return 13; /* ASCII of Enter */
     d4c:	9d e0       	ldi	r25, 0x0D	; 13
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	0a c0       	rjmp	.+20     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 14:
        return 0;
     d52:	1a 82       	std	Y+2, r1	; 0x02
     d54:	08 c0       	rjmp	.+16     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 15:
        return '='; /* ASCII Code of '=' */
     d56:	2d e3       	ldi	r18, 0x3D	; 61
     d58:	2a 83       	std	Y+2, r18	; 0x02
     d5a:	05 c0       	rjmp	.+10     	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 16:
        return '+'; /* ASCII Code of '+' */
     d5c:	3b e2       	ldi	r19, 0x2B	; 43
     d5e:	3a 83       	std	Y+2, r19	; 0x02
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    default:
        return num;
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	8a 83       	std	Y+2, r24	; 0x02
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <LCD_init>:
#include "lcd.h"


void LCD_init(void)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
    LCD_CTRL_DIR |= (1 << RS) | (1 << RW) | (1 << E);
     d7e:	a1 e3       	ldi	r26, 0x31	; 49
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e1 e3       	ldi	r30, 0x31	; 49
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 6b       	ori	r24, 0xB0	; 176
     d8a:	8c 93       	st	X, r24
#if (LCD_DATA_BITS_MODE == 8)
    LCD_DATA_DIR = 0XFF; /*enable all data pins as output*/
     d8c:	e4 e3       	ldi	r30, 0x34	; 52
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	80 83       	st	Z, r24

    LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE); /*enable 2 line 8 bit mode*/
     d94:	88 e3       	ldi	r24, 0x38	; 56
     d96:	0e 94 d5 06 	call	0xdaa	; 0xdaa <LCD_sendCommand>
#endif
    LCD_sendCommand(LCD_FOUR_BITS_DATA_MODE);
    LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
#endif

    LCD_sendCommand(CURSOR_OFF);
     d9a:	8c e0       	ldi	r24, 0x0C	; 12
     d9c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <LCD_sendCommand>
    LCD_clearScreen();
     da0:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_clearScreen>
}
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	e9 97       	sbiw	r28, 0x39	; 57
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	89 af       	std	Y+57, r24	; 0x39
    CLEAR_BIT(LCD_CTRL_PORT, RS); /*command mode*/
     dc0:	a2 e3       	ldi	r26, 0x32	; 50
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e2 e3       	ldi	r30, 0x32	; 50
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	8f 7e       	andi	r24, 0xEF	; 239
     dcc:	8c 93       	st	X, r24
    CLEAR_BIT(LCD_CTRL_PORT, RW); /*write mode*/
     dce:	a2 e3       	ldi	r26, 0x32	; 50
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e2 e3       	ldi	r30, 0x32	; 50
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8f 7d       	andi	r24, 0xDF	; 223
     dda:	8c 93       	st	X, r24
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e8       	ldi	r26, 0x80	; 128
     de2:	bf e3       	ldi	r27, 0x3F	; 63
     de4:	8d ab       	std	Y+53, r24	; 0x35
     de6:	9e ab       	std	Y+54, r25	; 0x36
     de8:	af ab       	std	Y+55, r26	; 0x37
     dea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dec:	6d a9       	ldd	r22, Y+53	; 0x35
     dee:	7e a9       	ldd	r23, Y+54	; 0x36
     df0:	8f a9       	ldd	r24, Y+55	; 0x37
     df2:	98 ad       	ldd	r25, Y+56	; 0x38
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	4a ef       	ldi	r20, 0xFA	; 250
     dfa:	54 e4       	ldi	r21, 0x44	; 68
     dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	89 ab       	std	Y+49, r24	; 0x31
     e06:	9a ab       	std	Y+50, r25	; 0x32
     e08:	ab ab       	std	Y+51, r26	; 0x33
     e0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e0c:	69 a9       	ldd	r22, Y+49	; 0x31
     e0e:	7a a9       	ldd	r23, Y+50	; 0x32
     e10:	8b a9       	ldd	r24, Y+51	; 0x33
     e12:	9c a9       	ldd	r25, Y+52	; 0x34
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e8       	ldi	r20, 0x80	; 128
     e1a:	5f e3       	ldi	r21, 0x3F	; 63
     e1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e20:	88 23       	and	r24, r24
     e22:	2c f4       	brge	.+10     	; 0xe2e <LCD_sendCommand+0x84>
		__ticks = 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	98 ab       	std	Y+48, r25	; 0x30
     e2a:	8f a7       	std	Y+47, r24	; 0x2f
     e2c:	3f c0       	rjmp	.+126    	; 0xeac <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     e2e:	69 a9       	ldd	r22, Y+49	; 0x31
     e30:	7a a9       	ldd	r23, Y+50	; 0x32
     e32:	8b a9       	ldd	r24, Y+51	; 0x33
     e34:	9c a9       	ldd	r25, Y+52	; 0x34
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	4f e7       	ldi	r20, 0x7F	; 127
     e3c:	57 e4       	ldi	r21, 0x47	; 71
     e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e42:	18 16       	cp	r1, r24
     e44:	4c f5       	brge	.+82     	; 0xe98 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e46:	6d a9       	ldd	r22, Y+53	; 0x35
     e48:	7e a9       	ldd	r23, Y+54	; 0x36
     e4a:	8f a9       	ldd	r24, Y+55	; 0x37
     e4c:	98 ad       	ldd	r25, Y+56	; 0x38
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e2       	ldi	r20, 0x20	; 32
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	98 ab       	std	Y+48, r25	; 0x30
     e6c:	8f a7       	std	Y+47, r24	; 0x2f
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <LCD_sendCommand+0xe4>
     e70:	88 ec       	ldi	r24, 0xC8	; 200
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9e a7       	std	Y+46, r25	; 0x2e
     e76:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e78:	8d a5       	ldd	r24, Y+45	; 0x2d
     e7a:	9e a5       	ldd	r25, Y+46	; 0x2e
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <LCD_sendCommand+0xd2>
     e80:	9e a7       	std	Y+46, r25	; 0x2e
     e82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e84:	8f a5       	ldd	r24, Y+47	; 0x2f
     e86:	98 a9       	ldd	r25, Y+48	; 0x30
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	98 ab       	std	Y+48, r25	; 0x30
     e8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e90:	98 a9       	ldd	r25, Y+48	; 0x30
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	69 f7       	brne	.-38     	; 0xe70 <LCD_sendCommand+0xc6>
     e96:	14 c0       	rjmp	.+40     	; 0xec0 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e98:	69 a9       	ldd	r22, Y+49	; 0x31
     e9a:	7a a9       	ldd	r23, Y+50	; 0x32
     e9c:	8b a9       	ldd	r24, Y+51	; 0x33
     e9e:	9c a9       	ldd	r25, Y+52	; 0x34
     ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	98 ab       	std	Y+48, r25	; 0x30
     eaa:	8f a7       	std	Y+47, r24	; 0x2f
     eac:	8f a5       	ldd	r24, Y+47	; 0x2f
     eae:	98 a9       	ldd	r25, Y+48	; 0x30
     eb0:	9c a7       	std	Y+44, r25	; 0x2c
     eb2:	8b a7       	std	Y+43, r24	; 0x2b
     eb4:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb6:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <LCD_sendCommand+0x10e>
     ebc:	9c a7       	std	Y+44, r25	; 0x2c
     ebe:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);                 /*tas processing*/
    SET_BIT(LCD_CTRL_PORT, E);    /*ENABLE DATA*/
     ec0:	a2 e3       	ldi	r26, 0x32	; 50
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e2 e3       	ldi	r30, 0x32	; 50
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	8c 93       	st	X, r24
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 e8       	ldi	r26, 0x80	; 128
     ed4:	bf e3       	ldi	r27, 0x3F	; 63
     ed6:	8f a3       	std	Y+39, r24	; 0x27
     ed8:	98 a7       	std	Y+40, r25	; 0x28
     eda:	a9 a7       	std	Y+41, r26	; 0x29
     edc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ede:	6f a1       	ldd	r22, Y+39	; 0x27
     ee0:	78 a5       	ldd	r23, Y+40	; 0x28
     ee2:	89 a5       	ldd	r24, Y+41	; 0x29
     ee4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a ef       	ldi	r20, 0xFA	; 250
     eec:	54 e4       	ldi	r21, 0x44	; 68
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8b a3       	std	Y+35, r24	; 0x23
     ef8:	9c a3       	std	Y+36, r25	; 0x24
     efa:	ad a3       	std	Y+37, r26	; 0x25
     efc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     efe:	6b a1       	ldd	r22, Y+35	; 0x23
     f00:	7c a1       	ldd	r23, Y+36	; 0x24
     f02:	8d a1       	ldd	r24, Y+37	; 0x25
     f04:	9e a1       	ldd	r25, Y+38	; 0x26
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e8       	ldi	r20, 0x80	; 128
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f12:	88 23       	and	r24, r24
     f14:	2c f4       	brge	.+10     	; 0xf20 <LCD_sendCommand+0x176>
		__ticks = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9a a3       	std	Y+34, r25	; 0x22
     f1c:	89 a3       	std	Y+33, r24	; 0x21
     f1e:	3f c0       	rjmp	.+126    	; 0xf9e <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     f20:	6b a1       	ldd	r22, Y+35	; 0x23
     f22:	7c a1       	ldd	r23, Y+36	; 0x24
     f24:	8d a1       	ldd	r24, Y+37	; 0x25
     f26:	9e a1       	ldd	r25, Y+38	; 0x26
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	57 e4       	ldi	r21, 0x47	; 71
     f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f34:	18 16       	cp	r1, r24
     f36:	4c f5       	brge	.+82     	; 0xf8a <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f38:	6f a1       	ldd	r22, Y+39	; 0x27
     f3a:	78 a5       	ldd	r23, Y+40	; 0x28
     f3c:	89 a5       	ldd	r24, Y+41	; 0x29
     f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e2       	ldi	r20, 0x20	; 32
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9a a3       	std	Y+34, r25	; 0x22
     f5e:	89 a3       	std	Y+33, r24	; 0x21
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <LCD_sendCommand+0x1d6>
     f62:	88 ec       	ldi	r24, 0xC8	; 200
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	98 a3       	std	Y+32, r25	; 0x20
     f68:	8f 8f       	std	Y+31, r24	; 0x1f
     f6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f6c:	98 a1       	ldd	r25, Y+32	; 0x20
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <LCD_sendCommand+0x1c4>
     f72:	98 a3       	std	Y+32, r25	; 0x20
     f74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	89 a1       	ldd	r24, Y+33	; 0x21
     f78:	9a a1       	ldd	r25, Y+34	; 0x22
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	9a a3       	std	Y+34, r25	; 0x22
     f7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	89 a1       	ldd	r24, Y+33	; 0x21
     f82:	9a a1       	ldd	r25, Y+34	; 0x22
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f7       	brne	.-38     	; 0xf62 <LCD_sendCommand+0x1b8>
     f88:	14 c0       	rjmp	.+40     	; 0xfb2 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	6b a1       	ldd	r22, Y+35	; 0x23
     f8c:	7c a1       	ldd	r23, Y+36	; 0x24
     f8e:	8d a1       	ldd	r24, Y+37	; 0x25
     f90:	9e a1       	ldd	r25, Y+38	; 0x26
     f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9a a3       	std	Y+34, r25	; 0x22
     f9c:	89 a3       	std	Y+33, r24	; 0x21
     f9e:	89 a1       	ldd	r24, Y+33	; 0x21
     fa0:	9a a1       	ldd	r25, Y+34	; 0x22
     fa2:	9e 8f       	std	Y+30, r25	; 0x1e
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
     fa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <LCD_sendCommand+0x200>
     fae:	9e 8f       	std	Y+30, r25	; 0x1e
     fb0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);                 /*processing*/

#if (LCD_DATA_BITS_MODE == 8)
    LCD_DATA_PORT = command; /*output command on the 8 pins*/
     fb2:	e5 e3       	ldi	r30, 0x35	; 53
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	89 ad       	ldd	r24, Y+57	; 0x39
     fb8:	80 83       	st	Z, r24
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e8       	ldi	r26, 0x80	; 128
     fc0:	bf e3       	ldi	r27, 0x3F	; 63
     fc2:	89 8f       	std	Y+25, r24	; 0x19
     fc4:	9a 8f       	std	Y+26, r25	; 0x1a
     fc6:	ab 8f       	std	Y+27, r26	; 0x1b
     fc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fca:	69 8d       	ldd	r22, Y+25	; 0x19
     fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4a ef       	ldi	r20, 0xFA	; 250
     fd8:	54 e4       	ldi	r21, 0x44	; 68
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8d 8b       	std	Y+21, r24	; 0x15
     fe4:	9e 8b       	std	Y+22, r25	; 0x16
     fe6:	af 8b       	std	Y+23, r26	; 0x17
     fe8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffe:	88 23       	and	r24, r24
    1000:	2c f4       	brge	.+10     	; 0x100c <LCD_sendCommand+0x262>
		__ticks = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9c 8b       	std	Y+20, r25	; 0x14
    1008:	8b 8b       	std	Y+19, r24	; 0x13
    100a:	3f c0       	rjmp	.+126    	; 0x108a <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    100c:	6d 89       	ldd	r22, Y+21	; 0x15
    100e:	7e 89       	ldd	r23, Y+22	; 0x16
    1010:	8f 89       	ldd	r24, Y+23	; 0x17
    1012:	98 8d       	ldd	r25, Y+24	; 0x18
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	4c f5       	brge	.+82     	; 0x1076 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1024:	69 8d       	ldd	r22, Y+25	; 0x19
    1026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    102a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9c 8b       	std	Y+20, r25	; 0x14
    104a:	8b 8b       	std	Y+19, r24	; 0x13
    104c:	0f c0       	rjmp	.+30     	; 0x106c <LCD_sendCommand+0x2c2>
    104e:	88 ec       	ldi	r24, 0xC8	; 200
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9a 8b       	std	Y+18, r25	; 0x12
    1054:	89 8b       	std	Y+17, r24	; 0x11
    1056:	89 89       	ldd	r24, Y+17	; 0x11
    1058:	9a 89       	ldd	r25, Y+18	; 0x12
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <LCD_sendCommand+0x2b0>
    105e:	9a 8b       	std	Y+18, r25	; 0x12
    1060:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1062:	8b 89       	ldd	r24, Y+19	; 0x13
    1064:	9c 89       	ldd	r25, Y+20	; 0x14
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9c 8b       	std	Y+20, r25	; 0x14
    106a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106c:	8b 89       	ldd	r24, Y+19	; 0x13
    106e:	9c 89       	ldd	r25, Y+20	; 0x14
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	69 f7       	brne	.-38     	; 0x104e <LCD_sendCommand+0x2a4>
    1074:	14 c0       	rjmp	.+40     	; 0x109e <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1076:	6d 89       	ldd	r22, Y+21	; 0x15
    1078:	7e 89       	ldd	r23, Y+22	; 0x16
    107a:	8f 89       	ldd	r24, Y+23	; 0x17
    107c:	98 8d       	ldd	r25, Y+24	; 0x18
    107e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9c 8b       	std	Y+20, r25	; 0x14
    1088:	8b 8b       	std	Y+19, r24	; 0x13
    108a:	8b 89       	ldd	r24, Y+19	; 0x13
    108c:	9c 89       	ldd	r25, Y+20	; 0x14
    108e:	98 8b       	std	Y+16, r25	; 0x10
    1090:	8f 87       	std	Y+15, r24	; 0x0f
    1092:	8f 85       	ldd	r24, Y+15	; 0x0f
    1094:	98 89       	ldd	r25, Y+16	; 0x10
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <LCD_sendCommand+0x2ec>
    109a:	98 8b       	std	Y+16, r25	; 0x10
    109c:	8f 87       	std	Y+15, r24	; 0x0f
#endif

#endif

    _delay_ms(1);                /*processing*/
    CLEAR_BIT(LCD_CTRL_PORT, E); /*ENABLE DATA*/
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 77       	andi	r24, 0x7F	; 127
    10aa:	8c 93       	st	X, r24
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a0 e8       	ldi	r26, 0x80	; 128
    10b2:	bf e3       	ldi	r27, 0x3F	; 63
    10b4:	8b 87       	std	Y+11, r24	; 0x0b
    10b6:	9c 87       	std	Y+12, r25	; 0x0c
    10b8:	ad 87       	std	Y+13, r26	; 0x0d
    10ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10be:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4a ef       	ldi	r20, 0xFA	; 250
    10ca:	54 e4       	ldi	r21, 0x44	; 68
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	8f 83       	std	Y+7, r24	; 0x07
    10d6:	98 87       	std	Y+8, r25	; 0x08
    10d8:	a9 87       	std	Y+9, r26	; 0x09
    10da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10dc:	6f 81       	ldd	r22, Y+7	; 0x07
    10de:	78 85       	ldd	r23, Y+8	; 0x08
    10e0:	89 85       	ldd	r24, Y+9	; 0x09
    10e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e8       	ldi	r20, 0x80	; 128
    10ea:	5f e3       	ldi	r21, 0x3F	; 63
    10ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10f0:	88 23       	and	r24, r24
    10f2:	2c f4       	brge	.+10     	; 0x10fe <LCD_sendCommand+0x354>
		__ticks = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	3f c0       	rjmp	.+126    	; 0x117c <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    10fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1100:	78 85       	ldd	r23, Y+8	; 0x08
    1102:	89 85       	ldd	r24, Y+9	; 0x09
    1104:	9a 85       	ldd	r25, Y+10	; 0x0a
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	3f ef       	ldi	r19, 0xFF	; 255
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	57 e4       	ldi	r21, 0x47	; 71
    110e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1112:	18 16       	cp	r1, r24
    1114:	4c f5       	brge	.+82     	; 0x1168 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e2       	ldi	r20, 0x20	; 32
    1124:	51 e4       	ldi	r21, 0x41	; 65
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9e 83       	std	Y+6, r25	; 0x06
    113c:	8d 83       	std	Y+5, r24	; 0x05
    113e:	0f c0       	rjmp	.+30     	; 0x115e <LCD_sendCommand+0x3b4>
    1140:	88 ec       	ldi	r24, 0xC8	; 200
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9c 83       	std	Y+4, r25	; 0x04
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <LCD_sendCommand+0x3a2>
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	9e 83       	std	Y+6, r25	; 0x06
    115c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	69 f7       	brne	.-38     	; 0x1140 <LCD_sendCommand+0x396>
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1168:	6f 81       	ldd	r22, Y+7	; 0x07
    116a:	78 85       	ldd	r23, Y+8	; 0x08
    116c:	89 85       	ldd	r24, Y+9	; 0x09
    116e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <LCD_sendCommand+0x3de>
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);                /*processing*/
}
    1190:	e9 96       	adiw	r28, 0x39	; 57
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	e9 97       	sbiw	r28, 0x39	; 57
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	89 af       	std	Y+57, r24	; 0x39
    SET_BIT(LCD_CTRL_PORT, RS);   /*data mode*/
    11b8:	a2 e3       	ldi	r26, 0x32	; 50
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	80 61       	ori	r24, 0x10	; 16
    11c4:	8c 93       	st	X, r24
    CLEAR_BIT(LCD_CTRL_PORT, RW); /*write mode*/
    11c6:	a2 e3       	ldi	r26, 0x32	; 50
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e2 e3       	ldi	r30, 0x32	; 50
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 7d       	andi	r24, 0xDF	; 223
    11d2:	8c 93       	st	X, r24
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a0 e8       	ldi	r26, 0x80	; 128
    11da:	bf e3       	ldi	r27, 0x3F	; 63
    11dc:	8d ab       	std	Y+53, r24	; 0x35
    11de:	9e ab       	std	Y+54, r25	; 0x36
    11e0:	af ab       	std	Y+55, r26	; 0x37
    11e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e4:	6d a9       	ldd	r22, Y+53	; 0x35
    11e6:	7e a9       	ldd	r23, Y+54	; 0x36
    11e8:	8f a9       	ldd	r24, Y+55	; 0x37
    11ea:	98 ad       	ldd	r25, Y+56	; 0x38
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	4a ef       	ldi	r20, 0xFA	; 250
    11f2:	54 e4       	ldi	r21, 0x44	; 68
    11f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	89 ab       	std	Y+49, r24	; 0x31
    11fe:	9a ab       	std	Y+50, r25	; 0x32
    1200:	ab ab       	std	Y+51, r26	; 0x33
    1202:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1204:	69 a9       	ldd	r22, Y+49	; 0x31
    1206:	7a a9       	ldd	r23, Y+50	; 0x32
    1208:	8b a9       	ldd	r24, Y+51	; 0x33
    120a:	9c a9       	ldd	r25, Y+52	; 0x34
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e8       	ldi	r20, 0x80	; 128
    1212:	5f e3       	ldi	r21, 0x3F	; 63
    1214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1218:	88 23       	and	r24, r24
    121a:	2c f4       	brge	.+10     	; 0x1226 <LCD_displayCharacter+0x84>
		__ticks = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	98 ab       	std	Y+48, r25	; 0x30
    1222:	8f a7       	std	Y+47, r24	; 0x2f
    1224:	3f c0       	rjmp	.+126    	; 0x12a4 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1226:	69 a9       	ldd	r22, Y+49	; 0x31
    1228:	7a a9       	ldd	r23, Y+50	; 0x32
    122a:	8b a9       	ldd	r24, Y+51	; 0x33
    122c:	9c a9       	ldd	r25, Y+52	; 0x34
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	4f e7       	ldi	r20, 0x7F	; 127
    1234:	57 e4       	ldi	r21, 0x47	; 71
    1236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123a:	18 16       	cp	r1, r24
    123c:	4c f5       	brge	.+82     	; 0x1290 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123e:	6d a9       	ldd	r22, Y+53	; 0x35
    1240:	7e a9       	ldd	r23, Y+54	; 0x36
    1242:	8f a9       	ldd	r24, Y+55	; 0x37
    1244:	98 ad       	ldd	r25, Y+56	; 0x38
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e2       	ldi	r20, 0x20	; 32
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	98 ab       	std	Y+48, r25	; 0x30
    1264:	8f a7       	std	Y+47, r24	; 0x2f
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <LCD_displayCharacter+0xe4>
    1268:	88 ec       	ldi	r24, 0xC8	; 200
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9e a7       	std	Y+46, r25	; 0x2e
    126e:	8d a7       	std	Y+45, r24	; 0x2d
    1270:	8d a5       	ldd	r24, Y+45	; 0x2d
    1272:	9e a5       	ldd	r25, Y+46	; 0x2e
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_displayCharacter+0xd2>
    1278:	9e a7       	std	Y+46, r25	; 0x2e
    127a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127c:	8f a5       	ldd	r24, Y+47	; 0x2f
    127e:	98 a9       	ldd	r25, Y+48	; 0x30
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	98 ab       	std	Y+48, r25	; 0x30
    1284:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1286:	8f a5       	ldd	r24, Y+47	; 0x2f
    1288:	98 a9       	ldd	r25, Y+48	; 0x30
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	69 f7       	brne	.-38     	; 0x1268 <LCD_displayCharacter+0xc6>
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1290:	69 a9       	ldd	r22, Y+49	; 0x31
    1292:	7a a9       	ldd	r23, Y+50	; 0x32
    1294:	8b a9       	ldd	r24, Y+51	; 0x33
    1296:	9c a9       	ldd	r25, Y+52	; 0x34
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	98 ab       	std	Y+48, r25	; 0x30
    12a2:	8f a7       	std	Y+47, r24	; 0x2f
    12a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a6:	98 a9       	ldd	r25, Y+48	; 0x30
    12a8:	9c a7       	std	Y+44, r25	; 0x2c
    12aa:	8b a7       	std	Y+43, r24	; 0x2b
    12ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <LCD_displayCharacter+0x10e>
    12b4:	9c a7       	std	Y+44, r25	; 0x2c
    12b6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);                 /*tas processing*/
    SET_BIT(LCD_CTRL_PORT, E);    /*ENABLE DATA*/
    12b8:	a2 e3       	ldi	r26, 0x32	; 50
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e2 e3       	ldi	r30, 0x32	; 50
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 68       	ori	r24, 0x80	; 128
    12c4:	8c 93       	st	X, r24
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 e8       	ldi	r26, 0x80	; 128
    12cc:	bf e3       	ldi	r27, 0x3F	; 63
    12ce:	8f a3       	std	Y+39, r24	; 0x27
    12d0:	98 a7       	std	Y+40, r25	; 0x28
    12d2:	a9 a7       	std	Y+41, r26	; 0x29
    12d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d6:	6f a1       	ldd	r22, Y+39	; 0x27
    12d8:	78 a5       	ldd	r23, Y+40	; 0x28
    12da:	89 a5       	ldd	r24, Y+41	; 0x29
    12dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4a ef       	ldi	r20, 0xFA	; 250
    12e4:	54 e4       	ldi	r21, 0x44	; 68
    12e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8b a3       	std	Y+35, r24	; 0x23
    12f0:	9c a3       	std	Y+36, r25	; 0x24
    12f2:	ad a3       	std	Y+37, r26	; 0x25
    12f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12f6:	6b a1       	ldd	r22, Y+35	; 0x23
    12f8:	7c a1       	ldd	r23, Y+36	; 0x24
    12fa:	8d a1       	ldd	r24, Y+37	; 0x25
    12fc:	9e a1       	ldd	r25, Y+38	; 0x26
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e8       	ldi	r20, 0x80	; 128
    1304:	5f e3       	ldi	r21, 0x3F	; 63
    1306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    130a:	88 23       	and	r24, r24
    130c:	2c f4       	brge	.+10     	; 0x1318 <LCD_displayCharacter+0x176>
		__ticks = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9a a3       	std	Y+34, r25	; 0x22
    1314:	89 a3       	std	Y+33, r24	; 0x21
    1316:	3f c0       	rjmp	.+126    	; 0x1396 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1318:	6b a1       	ldd	r22, Y+35	; 0x23
    131a:	7c a1       	ldd	r23, Y+36	; 0x24
    131c:	8d a1       	ldd	r24, Y+37	; 0x25
    131e:	9e a1       	ldd	r25, Y+38	; 0x26
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	3f ef       	ldi	r19, 0xFF	; 255
    1324:	4f e7       	ldi	r20, 0x7F	; 127
    1326:	57 e4       	ldi	r21, 0x47	; 71
    1328:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132c:	18 16       	cp	r1, r24
    132e:	4c f5       	brge	.+82     	; 0x1382 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1330:	6f a1       	ldd	r22, Y+39	; 0x27
    1332:	78 a5       	ldd	r23, Y+40	; 0x28
    1334:	89 a5       	ldd	r24, Y+41	; 0x29
    1336:	9a a5       	ldd	r25, Y+42	; 0x2a
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	51 e4       	ldi	r21, 0x41	; 65
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9a a3       	std	Y+34, r25	; 0x22
    1356:	89 a3       	std	Y+33, r24	; 0x21
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <LCD_displayCharacter+0x1d6>
    135a:	88 ec       	ldi	r24, 0xC8	; 200
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	98 a3       	std	Y+32, r25	; 0x20
    1360:	8f 8f       	std	Y+31, r24	; 0x1f
    1362:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1364:	98 a1       	ldd	r25, Y+32	; 0x20
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <LCD_displayCharacter+0x1c4>
    136a:	98 a3       	std	Y+32, r25	; 0x20
    136c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136e:	89 a1       	ldd	r24, Y+33	; 0x21
    1370:	9a a1       	ldd	r25, Y+34	; 0x22
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	9a a3       	std	Y+34, r25	; 0x22
    1376:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1378:	89 a1       	ldd	r24, Y+33	; 0x21
    137a:	9a a1       	ldd	r25, Y+34	; 0x22
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	69 f7       	brne	.-38     	; 0x135a <LCD_displayCharacter+0x1b8>
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1382:	6b a1       	ldd	r22, Y+35	; 0x23
    1384:	7c a1       	ldd	r23, Y+36	; 0x24
    1386:	8d a1       	ldd	r24, Y+37	; 0x25
    1388:	9e a1       	ldd	r25, Y+38	; 0x26
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9a a3       	std	Y+34, r25	; 0x22
    1394:	89 a3       	std	Y+33, r24	; 0x21
    1396:	89 a1       	ldd	r24, Y+33	; 0x21
    1398:	9a a1       	ldd	r25, Y+34	; 0x22
    139a:	9e 8f       	std	Y+30, r25	; 0x1e
    139c:	8d 8f       	std	Y+29, r24	; 0x1d
    139e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <LCD_displayCharacter+0x200>
    13a6:	9e 8f       	std	Y+30, r25	; 0x1e
    13a8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);                 /*processing*/

#if (LCD_DATA_BITS_MODE == 8)
    LCD_DATA_PORT = data; /*output character on all 8 pins*/
    13aa:	e5 e3       	ldi	r30, 0x35	; 53
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	89 ad       	ldd	r24, Y+57	; 0x39
    13b0:	80 83       	st	Z, r24
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a0 e8       	ldi	r26, 0x80	; 128
    13b8:	bf e3       	ldi	r27, 0x3F	; 63
    13ba:	89 8f       	std	Y+25, r24	; 0x19
    13bc:	9a 8f       	std	Y+26, r25	; 0x1a
    13be:	ab 8f       	std	Y+27, r26	; 0x1b
    13c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c2:	69 8d       	ldd	r22, Y+25	; 0x19
    13c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a ef       	ldi	r20, 0xFA	; 250
    13d0:	54 e4       	ldi	r21, 0x44	; 68
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	8d 8b       	std	Y+21, r24	; 0x15
    13dc:	9e 8b       	std	Y+22, r25	; 0x16
    13de:	af 8b       	std	Y+23, r26	; 0x17
    13e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e2:	6d 89       	ldd	r22, Y+21	; 0x15
    13e4:	7e 89       	ldd	r23, Y+22	; 0x16
    13e6:	8f 89       	ldd	r24, Y+23	; 0x17
    13e8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e8       	ldi	r20, 0x80	; 128
    13f0:	5f e3       	ldi	r21, 0x3F	; 63
    13f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f6:	88 23       	and	r24, r24
    13f8:	2c f4       	brge	.+10     	; 0x1404 <LCD_displayCharacter+0x262>
		__ticks = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9c 8b       	std	Y+20, r25	; 0x14
    1400:	8b 8b       	std	Y+19, r24	; 0x13
    1402:	3f c0       	rjmp	.+126    	; 0x1482 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	4f e7       	ldi	r20, 0x7F	; 127
    1412:	57 e4       	ldi	r21, 0x47	; 71
    1414:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1418:	18 16       	cp	r1, r24
    141a:	4c f5       	brge	.+82     	; 0x146e <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141c:	69 8d       	ldd	r22, Y+25	; 0x19
    141e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1420:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1422:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e2       	ldi	r20, 0x20	; 32
    142a:	51 e4       	ldi	r21, 0x41	; 65
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9c 8b       	std	Y+20, r25	; 0x14
    1442:	8b 8b       	std	Y+19, r24	; 0x13
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <LCD_displayCharacter+0x2c2>
    1446:	88 ec       	ldi	r24, 0xC8	; 200
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9a 8b       	std	Y+18, r25	; 0x12
    144c:	89 8b       	std	Y+17, r24	; 0x11
    144e:	89 89       	ldd	r24, Y+17	; 0x11
    1450:	9a 89       	ldd	r25, Y+18	; 0x12
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_displayCharacter+0x2b0>
    1456:	9a 8b       	std	Y+18, r25	; 0x12
    1458:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1464:	8b 89       	ldd	r24, Y+19	; 0x13
    1466:	9c 89       	ldd	r25, Y+20	; 0x14
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	69 f7       	brne	.-38     	; 0x1446 <LCD_displayCharacter+0x2a4>
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	6d 89       	ldd	r22, Y+21	; 0x15
    1470:	7e 89       	ldd	r23, Y+22	; 0x16
    1472:	8f 89       	ldd	r24, Y+23	; 0x17
    1474:	98 8d       	ldd	r25, Y+24	; 0x18
    1476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9c 8b       	std	Y+20, r25	; 0x14
    1480:	8b 8b       	std	Y+19, r24	; 0x13
    1482:	8b 89       	ldd	r24, Y+19	; 0x13
    1484:	9c 89       	ldd	r25, Y+20	; 0x14
    1486:	98 8b       	std	Y+16, r25	; 0x10
    1488:	8f 87       	std	Y+15, r24	; 0x0f
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	98 89       	ldd	r25, Y+16	; 0x10
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <LCD_displayCharacter+0x2ec>
    1492:	98 8b       	std	Y+16, r25	; 0x10
    1494:	8f 87       	std	Y+15, r24	; 0x0f
#else
    LCD_DATA_PORT = (LCD_DATA_PORT & 0XF0) | (data & 0x0F);
#endif
#endif
    _delay_ms(1);                /*processing*/
    CLEAR_BIT(LCD_CTRL_PORT, E); /*ENABLE DATA*/
    1496:	a2 e3       	ldi	r26, 0x32	; 50
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e2 e3       	ldi	r30, 0x32	; 50
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	8c 93       	st	X, r24
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e8       	ldi	r26, 0x80	; 128
    14aa:	bf e3       	ldi	r27, 0x3F	; 63
    14ac:	8b 87       	std	Y+11, r24	; 0x0b
    14ae:	9c 87       	std	Y+12, r25	; 0x0c
    14b0:	ad 87       	std	Y+13, r26	; 0x0d
    14b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a ef       	ldi	r20, 0xFA	; 250
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	98 87       	std	Y+8, r25	; 0x08
    14d0:	a9 87       	std	Y+9, r26	; 0x09
    14d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <LCD_displayCharacter+0x354>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <LCD_displayCharacter+0x3b4>
    1538:	88 ec       	ldi	r24, 0xC8	; 200
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	8b 83       	std	Y+3, r24	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_displayCharacter+0x3a2>
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <LCD_displayCharacter+0x396>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_displayCharacter+0x3de>
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);                /*processing*/
}
    1588:	e9 96       	adiw	r28, 0x39	; 57
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <LCD_displayString>:

void LCD_displayString(const char *string)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <LCD_displayString+0x6>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	0a c0       	rjmp	.+20     	; 0x15be <LCD_displayString+0x24>
    while ((*string) != '\0')
    {
        LCD_displayCharacter(*string); /*display character untill strinf is null terminated*/
    15aa:	e9 81       	ldd	r30, Y+1	; 0x01
    15ac:	fa 81       	ldd	r31, Y+2	; 0x02
    15ae:	80 81       	ld	r24, Z
    15b0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_displayCharacter>
        string++;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);                /*processing*/
}

void LCD_displayString(const char *string)
{
    while ((*string) != '\0')
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	80 81       	ld	r24, Z
    15c4:	88 23       	and	r24, r24
    15c6:	89 f7       	brne	.-30     	; 0x15aa <LCD_displayString+0x10>
    {
        LCD_displayCharacter(*string); /*display character untill strinf is null terminated*/
        string++;
    }
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row, uint8 col)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <LCD_goToRowColumn+0x6>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <LCD_goToRowColumn+0x8>
    15da:	0f 92       	push	r0
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	8a 83       	std	Y+2, r24	; 0x02
    15e2:	6b 83       	std	Y+3, r22	; 0x03
    uint8 address = 0; /*initialize address*/
    15e4:	19 82       	std	Y+1, r1	; 0x01
    switch (row)
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3d 83       	std	Y+5, r19	; 0x05
    15ee:	2c 83       	std	Y+4, r18	; 0x04
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	c1 f0       	breq	.+48     	; 0x162a <LCD_goToRowColumn+0x58>
    15fa:	2c 81       	ldd	r18, Y+4	; 0x04
    15fc:	3d 81       	ldd	r19, Y+5	; 0x05
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	2c f4       	brge	.+10     	; 0x160e <LCD_goToRowColumn+0x3c>
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	61 f0       	breq	.+24     	; 0x1624 <LCD_goToRowColumn+0x52>
    160c:	1a c0       	rjmp	.+52     	; 0x1642 <LCD_goToRowColumn+0x70>
    160e:	2c 81       	ldd	r18, Y+4	; 0x04
    1610:	3d 81       	ldd	r19, Y+5	; 0x05
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	69 f0       	breq	.+26     	; 0x1632 <LCD_goToRowColumn+0x60>
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	9d 81       	ldd	r25, Y+5	; 0x05
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	91 05       	cpc	r25, r1
    1620:	61 f0       	breq	.+24     	; 0x163a <LCD_goToRowColumn+0x68>
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <LCD_goToRowColumn+0x70>
    {
    case 0:
        address = col; /*add base address of first line*/
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <LCD_goToRowColumn+0x72>
        break;

    case 1:
        address = 0x40 + col; /*add base address of second line*/
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	80 5c       	subi	r24, 0xC0	; 192
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	09 c0       	rjmp	.+18     	; 0x1644 <LCD_goToRowColumn+0x72>
        break;

    case 2:
        address = 010 + col; /*add base address of third line*/
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	88 5f       	subi	r24, 0xF8	; 248
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <LCD_goToRowColumn+0x72>
        break;

    case 3:
        address = 0x50 + col; /*add base address of fourth line*/
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	80 5b       	subi	r24, 0xB0	; 176
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <LCD_goToRowColumn+0x72>
        break;

    default:
        address = 0;
    1642:	19 82       	std	Y+1, r1	; 0x01
    }
    LCD_sendCommand((SET_CURSOR_LOCATION | address)); /*add a 1 to the most signifigant bit so the lcd goes to address*/
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	80 68       	ori	r24, 0x80	; 128
    1648:	0e 94 d5 06 	call	0xdaa	; 0xdaa <LCD_sendCommand>
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *string)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <LCD_displayStringRowColumn+0x6>
    1662:	00 d0       	rcall	.+0      	; 0x1664 <LCD_displayStringRowColumn+0x8>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	6a 83       	std	Y+2, r22	; 0x02
    166c:	5c 83       	std	Y+4, r21	; 0x04
    166e:	4b 83       	std	Y+3, r20	; 0x03
    LCD_goToRowColumn(row, col);
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	6a 81       	ldd	r22, Y+2	; 0x02
    1674:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <LCD_goToRowColumn>
    LCD_displayString(string);
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayString>
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(CLEAR_COMMAND); /*send ckear screen command*/
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 d5 06 	call	0xdaa	; 0xdaa <LCD_sendCommand>
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <LCD_intgerToString>:
void LCD_intgerToString(int num)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	62 97       	sbiw	r28, 0x12	; 18
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	9a 8b       	std	Y+18, r25	; 0x12
    16b8:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16];       /*buffer String to hold the ascii result */
    itoa(num, buff, 10); /* 10 for decimal */
    16ba:	89 89       	ldd	r24, Y+17	; 0x11
    16bc:	9a 89       	ldd	r25, Y+18	; 0x12
    16be:	9e 01       	movw	r18, r28
    16c0:	2f 5f       	subi	r18, 0xFF	; 255
    16c2:	3f 4f       	sbci	r19, 0xFF	; 255
    16c4:	b9 01       	movw	r22, r18
    16c6:	4a e0       	ldi	r20, 0x0A	; 10
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <itoa>
    LCD_displayString(buff);
    16ce:	ce 01       	movw	r24, r28
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayString>
}
    16d6:	62 96       	adiw	r28, 0x12	; 18
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <__vector_19>:
/*******************************************************************************
 *                              ISRs                                                    *
 *******************************************************************************/
#ifdef TIMER_0
ISR(TIMER0_COMP_vect)
{
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_0_Compare_callBackPtr != NULL_PTR)
    1712:	80 91 0e 01 	lds	r24, 0x010E
    1716:	90 91 0f 01 	lds	r25, 0x010F
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	29 f0       	breq	.+10     	; 0x1728 <__vector_19+0x40>
    {
        (*g_Timer_0_Compare_callBackPtr)();
    171e:	e0 91 0e 01 	lds	r30, 0x010E
    1722:	f0 91 0f 01 	lds	r31, 0x010F
    1726:	09 95       	icall
    }
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <__vector_9>:


ISR(TIMER0_OVF_vect)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_0_Overflow_callBackPtr != NULL_PTR)
    1778:	80 91 0c 01 	lds	r24, 0x010C
    177c:	90 91 0d 01 	lds	r25, 0x010D
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	29 f0       	breq	.+10     	; 0x178e <__vector_9+0x40>
    {
        (*g_Timer_0_Overflow_callBackPtr)();
    1784:	e0 91 0c 01 	lds	r30, 0x010C
    1788:	f0 91 0d 01 	lds	r31, 0x010D
    178c:	09 95       	icall
    }
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <__vector_3>:
#endif

#ifdef TIMER_2
ISR(TIMER2_COMP_vect)
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	11 24       	eor	r1, r1
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_2_Compare_callBackPtr != NULL_PTR)
    17de:	80 91 12 01 	lds	r24, 0x0112
    17e2:	90 91 13 01 	lds	r25, 0x0113
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	29 f0       	breq	.+10     	; 0x17f4 <__vector_3+0x40>
    {
        (*g_Timer_2_Compare_callBackPtr)();
    17ea:	e0 91 12 01 	lds	r30, 0x0112
    17ee:	f0 91 13 01 	lds	r31, 0x0113
    17f2:	09 95       	icall
    }
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	4f 93       	push	r20
    182a:	5f 93       	push	r21
    182c:	6f 93       	push	r22
    182e:	7f 93       	push	r23
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	af 93       	push	r26
    1836:	bf 93       	push	r27
    1838:	ef 93       	push	r30
    183a:	ff 93       	push	r31
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_2_Overflow_callBackPtr != NULL_PTR)
    1844:	80 91 10 01 	lds	r24, 0x0110
    1848:	90 91 11 01 	lds	r25, 0x0111
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	29 f0       	breq	.+10     	; 0x185a <__vector_4+0x40>
    {
        (*g_Timer_2_Overflow_callBackPtr)();
    1850:	e0 91 10 01 	lds	r30, 0x0110
    1854:	f0 91 11 01 	lds	r31, 0x0111
    1858:	09 95       	icall
    }
}
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <__vector_6>:
#endif

#ifdef TIMER_1
ISR(TIMER1_COMPA_vect)
{
    1880:	1f 92       	push	r1
    1882:	0f 92       	push	r0
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_CompareA_callBackPtr != NULL_PTR)
    18aa:	80 91 16 01 	lds	r24, 0x0116
    18ae:	90 91 17 01 	lds	r25, 0x0117
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	29 f0       	breq	.+10     	; 0x18c0 <__vector_6+0x40>
    {
        (*g_Timer_1_CompareA_callBackPtr)();
    18b6:	e0 91 16 01 	lds	r30, 0x0116
    18ba:	f0 91 17 01 	lds	r31, 0x0117
    18be:	09 95       	icall
    }
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	7f 91       	pop	r23
    18d2:	6f 91       	pop	r22
    18d4:	5f 91       	pop	r21
    18d6:	4f 91       	pop	r20
    18d8:	3f 91       	pop	r19
    18da:	2f 91       	pop	r18
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	0f 90       	pop	r0
    18e2:	1f 90       	pop	r1
    18e4:	18 95       	reti

000018e6 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    18e6:	1f 92       	push	r1
    18e8:	0f 92       	push	r0
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	0f 92       	push	r0
    18ee:	11 24       	eor	r1, r1
    18f0:	2f 93       	push	r18
    18f2:	3f 93       	push	r19
    18f4:	4f 93       	push	r20
    18f6:	5f 93       	push	r21
    18f8:	6f 93       	push	r22
    18fa:	7f 93       	push	r23
    18fc:	8f 93       	push	r24
    18fe:	9f 93       	push	r25
    1900:	af 93       	push	r26
    1902:	bf 93       	push	r27
    1904:	ef 93       	push	r30
    1906:	ff 93       	push	r31
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_CompareB_callBackPtr != NULL_PTR)
    1910:	80 91 18 01 	lds	r24, 0x0118
    1914:	90 91 19 01 	lds	r25, 0x0119
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	29 f0       	breq	.+10     	; 0x1926 <__vector_7+0x40>
    {
        (*g_Timer_1_CompareB_callBackPtr)();
    191c:	e0 91 18 01 	lds	r30, 0x0118
    1920:	f0 91 19 01 	lds	r31, 0x0119
    1924:	09 95       	icall
    }
}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	ff 91       	pop	r31
    192c:	ef 91       	pop	r30
    192e:	bf 91       	pop	r27
    1930:	af 91       	pop	r26
    1932:	9f 91       	pop	r25
    1934:	8f 91       	pop	r24
    1936:	7f 91       	pop	r23
    1938:	6f 91       	pop	r22
    193a:	5f 91       	pop	r21
    193c:	4f 91       	pop	r20
    193e:	3f 91       	pop	r19
    1940:	2f 91       	pop	r18
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
    1948:	1f 90       	pop	r1
    194a:	18 95       	reti

0000194c <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    194c:	1f 92       	push	r1
    194e:	0f 92       	push	r0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	0f 92       	push	r0
    1954:	11 24       	eor	r1, r1
    1956:	2f 93       	push	r18
    1958:	3f 93       	push	r19
    195a:	4f 93       	push	r20
    195c:	5f 93       	push	r21
    195e:	6f 93       	push	r22
    1960:	7f 93       	push	r23
    1962:	8f 93       	push	r24
    1964:	9f 93       	push	r25
    1966:	af 93       	push	r26
    1968:	bf 93       	push	r27
    196a:	ef 93       	push	r30
    196c:	ff 93       	push	r31
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_Overflow_callBackPtr != NULL_PTR)
    1976:	80 91 14 01 	lds	r24, 0x0114
    197a:	90 91 15 01 	lds	r25, 0x0115
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	29 f0       	breq	.+10     	; 0x198c <__vector_8+0x40>
    {
        (*g_Timer_1_Overflow_callBackPtr)();
    1982:	e0 91 14 01 	lds	r30, 0x0114
    1986:	f0 91 15 01 	lds	r31, 0x0115
    198a:	09 95       	icall
    }
}
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	ff 91       	pop	r31
    1992:	ef 91       	pop	r30
    1994:	bf 91       	pop	r27
    1996:	af 91       	pop	r26
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	7f 91       	pop	r23
    199e:	6f 91       	pop	r22
    19a0:	5f 91       	pop	r21
    19a2:	4f 91       	pop	r20
    19a4:	3f 91       	pop	r19
    19a6:	2f 91       	pop	r18
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	0f 90       	pop	r0
    19ae:	1f 90       	pop	r1
    19b0:	18 95       	reti

000019b2 <Timer_0_init>:
 *                      Function Definitions                                    *
 *******************************************************************************/
#ifdef TIMER_0
/*Initialize timer 0 configuration*/
void Timer_0_init(const Timer_0_2_ConfigType *const cfg_ptr)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <Timer_0_init+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <Timer_0_init+0x8>
    19ba:	0f 92       	push	r0
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register*/
    TCCR0 = ((((~cfg_ptr->mode) & 0b01)) << 7) | ((cfg_ptr->mode & 0b01) << 6) | (cfg_ptr->com_mode << 4) | ((cfg_ptr->mode & 0b10) << 2) | cfg_ptr->clock;
    19c4:	83 e5       	ldi	r24, 0x53	; 83
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9d 83       	std	Y+5, r25	; 0x05
    19ca:	8c 83       	std	Y+4, r24	; 0x04
    19cc:	e9 81       	ldd	r30, Y+1	; 0x01
    19ce:	fa 81       	ldd	r31, Y+2	; 0x02
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	81 70       	andi	r24, 0x01	; 1
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	19 f4       	brne	.+6      	; 0x19e4 <Timer_0_init+0x32>
    19de:	90 e8       	ldi	r25, 0x80	; 128
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <Timer_0_init+0x34>
    19e4:	1b 82       	std	Y+3, r1	; 0x03
    19e6:	e9 81       	ldd	r30, Y+1	; 0x01
    19e8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	81 70       	andi	r24, 0x01	; 1
    19f2:	90 70       	andi	r25, 0x00	; 0
    19f4:	00 24       	eor	r0, r0
    19f6:	96 95       	lsr	r25
    19f8:	87 95       	ror	r24
    19fa:	07 94       	ror	r0
    19fc:	96 95       	lsr	r25
    19fe:	87 95       	ror	r24
    1a00:	07 94       	ror	r0
    1a02:	98 2f       	mov	r25, r24
    1a04:	80 2d       	mov	r24, r0
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	28 2b       	or	r18, r24
    1a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0e:	83 81       	ldd	r24, Z+3	; 0x03
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	82 95       	swap	r24
    1a16:	92 95       	swap	r25
    1a18:	90 7f       	andi	r25, 0xF0	; 240
    1a1a:	98 27       	eor	r25, r24
    1a1c:	80 7f       	andi	r24, 0xF0	; 240
    1a1e:	98 27       	eor	r25, r24
    1a20:	28 2b       	or	r18, r24
    1a22:	e9 81       	ldd	r30, Y+1	; 0x01
    1a24:	fa 81       	ldd	r31, Y+2	; 0x02
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	82 70       	andi	r24, 0x02	; 2
    1a2e:	90 70       	andi	r25, 0x00	; 0
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	92 2f       	mov	r25, r18
    1a3a:	98 2b       	or	r25, r24
    1a3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a40:	80 81       	ld	r24, Z
    1a42:	89 2b       	or	r24, r25
    1a44:	ec 81       	ldd	r30, Y+4	; 0x04
    1a46:	fd 81       	ldd	r31, Y+5	; 0x05
    1a48:	80 83       	st	Z, r24

    /*insert compare value to compare register*/
    OCR0 = cfg_ptr->compare_value;
    1a4a:	ac e5       	ldi	r26, 0x5C	; 92
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	81 81       	ldd	r24, Z+1	; 0x01
    1a54:	8c 93       	st	X, r24

    /*Initialize current counter value to 0*/
    TCNT0 = 0;
    1a56:	e2 e5       	ldi	r30, 0x52	; 82
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	10 82       	st	Z, r1
}
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <Timer_0_setCompareValue>:

/*Set output compare value for timer0*/
void Timer_0_setCompareValue(const uint8 compare_val)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR0 = compare_val;
    1a78:	ec e5       	ldi	r30, 0x5C	; 92
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	80 83       	st	Z, r24
}
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <Timer_0_setCounterValue>:

/*Set current counter value for timer0*/
void Timer_0_setCounterValue(const uint8 counter_val)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	0f 92       	push	r0
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT0 = counter_val;
    1a94:	e2 e5       	ldi	r30, 0x52	; 82
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	80 83       	st	Z, r24
}
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <Timer_0_setCompareCallBack>:

/*Set compare mode isr callback*/
void Timer_0_setCompareCallBack(void (*f_ptr)(void))
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <Timer_0_setCompareCallBack+0x6>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_0_Compare_callBackPtr = f_ptr;
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	90 93 0f 01 	sts	0x010F, r25
    1aba:	80 93 0e 01 	sts	0x010E, r24
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <Timer_0_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_0_setOverflowCallBack(void (*f_ptr)(void))
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <Timer_0_setOverflowCallBack+0x6>
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_0_Overflow_callBackPtr = f_ptr;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	90 93 0d 01 	sts	0x010D, r25
    1ade:	80 93 0c 01 	sts	0x010C, r24
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <Timer_0_EnableCompareInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_0_EnableCompareInterrupt(void)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE0);
    1af4:	a9 e5       	ldi	r26, 0x59	; 89
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e9 e5       	ldi	r30, 0x59	; 89
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	82 60       	ori	r24, 0x02	; 2
    1b00:	8c 93       	st	X, r24
}
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <Timer_0_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_0_EnableOverflowInterrupt(void)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE0);
    1b10:	a9 e5       	ldi	r26, 0x59	; 89
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e9 e5       	ldi	r30, 0x59	; 89
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	81 60       	ori	r24, 0x01	; 1
    1b1c:	8c 93       	st	X, r24
}
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <Timer_0_DisableCompareInterrupt>:
/*Disable compare mode Interrupt*/

void Timer_0_DisableCompareInterrupt(void)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE0);
    1b2c:	a9 e5       	ldi	r26, 0x59	; 89
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e9 e5       	ldi	r30, 0x59	; 89
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8d 7f       	andi	r24, 0xFD	; 253
    1b38:	8c 93       	st	X, r24
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <Timer_0_DisableOverflowInterrupt>:
/*Disable overflow mode Interrupt*/

void Timer_0_DisableOverflowInterrupt(void)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE0);
    1b48:	a9 e5       	ldi	r26, 0x59	; 89
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e9 e5       	ldi	r30, 0x59	; 89
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	8e 7f       	andi	r24, 0xFE	; 254
    1b54:	8c 93       	st	X, r24
}
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <Timer_0_deInit>:

void Timer_0_deInit(void)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR0 = 0;
    1b64:	e3 e5       	ldi	r30, 0x53	; 83
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	10 82       	st	Z, r1
    OCR0 = 0;
    1b6a:	ec e5       	ldi	r30, 0x5C	; 92
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	10 82       	st	Z, r1
    TCNT0 = 0;
    1b70:	e2 e5       	ldi	r30, 0x52	; 82
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE0);
    1b76:	a9 e5       	ldi	r26, 0x59	; 89
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e9 e5       	ldi	r30, 0x59	; 89
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8d 7f       	andi	r24, 0xFD	; 253
    1b82:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE0);
    1b84:	a9 e5       	ldi	r26, 0x59	; 89
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e9 e5       	ldi	r30, 0x59	; 89
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8e 7f       	andi	r24, 0xFE	; 254
    1b90:	8c 93       	st	X, r24
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <Timer_0_setPrescalar>:

void Timer_0_setPrescalar(const Timer_ClockType clock)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	0f 92       	push	r0
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR0 = (TCCR0 & (~0X07)) | clock;
    1ba4:	a3 e5       	ldi	r26, 0x53	; 83
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e3 e5       	ldi	r30, 0x53	; 83
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	98 2f       	mov	r25, r24
    1bb0:	98 7f       	andi	r25, 0xF8	; 248
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	89 2b       	or	r24, r25
    1bb6:	8c 93       	st	X, r24
}
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <Timer_2_init>:
#endif
/*                           Timer 2                 */
#ifdef TIMER_2
void Timer_2_init(const Timer_0_2_ConfigType *const cfg_ptr)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <Timer_2_init+0x6>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <Timer_2_init+0x8>
    1bc8:	0f 92       	push	r0
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register*/
    TCCR2 = ((((~cfg_ptr->mode) & 0b01)) << 7) | ((cfg_ptr->mode & 0b01) << 6) | (cfg_ptr->com_mode << 4) | ((cfg_ptr->mode & 0b10) << 2) | cfg_ptr->clock;
    1bd2:	85 e4       	ldi	r24, 0x45	; 69
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9d 83       	std	Y+5, r25	; 0x05
    1bd8:	8c 83       	std	Y+4, r24	; 0x04
    1bda:	e9 81       	ldd	r30, Y+1	; 0x01
    1bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	81 70       	andi	r24, 0x01	; 1
    1be6:	90 70       	andi	r25, 0x00	; 0
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	19 f4       	brne	.+6      	; 0x1bf2 <Timer_2_init+0x32>
    1bec:	90 e8       	ldi	r25, 0x80	; 128
    1bee:	9b 83       	std	Y+3, r25	; 0x03
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <Timer_2_init+0x34>
    1bf2:	1b 82       	std	Y+3, r1	; 0x03
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	81 70       	andi	r24, 0x01	; 1
    1c00:	90 70       	andi	r25, 0x00	; 0
    1c02:	00 24       	eor	r0, r0
    1c04:	96 95       	lsr	r25
    1c06:	87 95       	ror	r24
    1c08:	07 94       	ror	r0
    1c0a:	96 95       	lsr	r25
    1c0c:	87 95       	ror	r24
    1c0e:	07 94       	ror	r0
    1c10:	98 2f       	mov	r25, r24
    1c12:	80 2d       	mov	r24, r0
    1c14:	2b 81       	ldd	r18, Y+3	; 0x03
    1c16:	28 2b       	or	r18, r24
    1c18:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1c:	83 81       	ldd	r24, Z+3	; 0x03
    1c1e:	88 2f       	mov	r24, r24
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	82 95       	swap	r24
    1c24:	92 95       	swap	r25
    1c26:	90 7f       	andi	r25, 0xF0	; 240
    1c28:	98 27       	eor	r25, r24
    1c2a:	80 7f       	andi	r24, 0xF0	; 240
    1c2c:	98 27       	eor	r25, r24
    1c2e:	28 2b       	or	r18, r24
    1c30:	e9 81       	ldd	r30, Y+1	; 0x01
    1c32:	fa 81       	ldd	r31, Y+2	; 0x02
    1c34:	82 81       	ldd	r24, Z+2	; 0x02
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	82 70       	andi	r24, 0x02	; 2
    1c3c:	90 70       	andi	r25, 0x00	; 0
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	92 2f       	mov	r25, r18
    1c48:	98 2b       	or	r25, r24
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	80 81       	ld	r24, Z
    1c50:	89 2b       	or	r24, r25
    1c52:	ec 81       	ldd	r30, Y+4	; 0x04
    1c54:	fd 81       	ldd	r31, Y+5	; 0x05
    1c56:	80 83       	st	Z, r24

    /*insert compare value to compare register*/
    OCR2 = cfg_ptr->compare_value;
    1c58:	a3 e4       	ldi	r26, 0x43	; 67
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	81 81       	ldd	r24, Z+1	; 0x01
    1c62:	8c 93       	st	X, r24

    /*Initialize current counter value to 0*/
    TCNT2 = 0;
    1c64:	e4 e4       	ldi	r30, 0x44	; 68
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	10 82       	st	Z, r1
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <Timer_2_setCompareValue>:

/*Set output compare value for timer0*/
void Timer_2_setCompareValue(const uint8 compare_val)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	0f 92       	push	r0
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR2 = compare_val;
    1c86:	e3 e4       	ldi	r30, 0x43	; 67
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	80 83       	st	Z, r24
}
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <Timer_2_setCounterValue>:

/*Set current counter value for timer0*/
void Timer_2_setCounterValue(const uint8 counter_val)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT2 = counter_val;
    1ca2:	e4 e4       	ldi	r30, 0x44	; 68
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	80 83       	st	Z, r24
}
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <Timer_2_setCompareCallBack>:

/*Set compare mode isr callback*/
void Timer_2_setCompareCallBack(void (*f_ptr)(void))
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <Timer_2_setCompareCallBack+0x6>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_2_Compare_callBackPtr = f_ptr;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	90 93 13 01 	sts	0x0113, r25
    1cc8:	80 93 12 01 	sts	0x0112, r24
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <Timer_2_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_2_setOverflowCallBack(void (*f_ptr)(void))
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <Timer_2_setOverflowCallBack+0x6>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_2_Overflow_callBackPtr = f_ptr;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	90 93 11 01 	sts	0x0111, r25
    1cec:	80 93 10 01 	sts	0x0110, r24
}
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <Timer_2_EnableCompareInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_2_EnableCompareInterrupt(void)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE2);
    1d02:	a9 e5       	ldi	r26, 0x59	; 89
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e9 e5       	ldi	r30, 0x59	; 89
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 68       	ori	r24, 0x80	; 128
    1d0e:	8c 93       	st	X, r24
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <Timer_2_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_2_EnableOverflowInterrupt(void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE2);
    1d1e:	a9 e5       	ldi	r26, 0x59	; 89
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e9 e5       	ldi	r30, 0x59	; 89
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 64       	ori	r24, 0x40	; 64
    1d2a:	8c 93       	st	X, r24
}
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <Timer_2_DisableCompareInterrupt>:
/*Disable compare mode Interrupt*/

void Timer_2_DisableCompareInterrupt(void)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE2);
    1d3a:	a9 e5       	ldi	r26, 0x59	; 89
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e9 e5       	ldi	r30, 0x59	; 89
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 77       	andi	r24, 0x7F	; 127
    1d46:	8c 93       	st	X, r24
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <Timer_2_DisableOverflowInterrupt>:
/*Disable overflow mode Interrupt*/

void Timer_2_DisableOverflowInterrupt(void)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE2);
    1d56:	a9 e5       	ldi	r26, 0x59	; 89
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e9 e5       	ldi	r30, 0x59	; 89
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 7b       	andi	r24, 0xBF	; 191
    1d62:	8c 93       	st	X, r24
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <Timer_2_deInit>:

void Timer_2_deInit(void)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR2 = 0;
    1d72:	e5 e4       	ldi	r30, 0x45	; 69
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	10 82       	st	Z, r1
    OCR2 = 0;
    1d78:	e3 e4       	ldi	r30, 0x43	; 67
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	10 82       	st	Z, r1
    TCNT2 = 0;
    1d7e:	e4 e4       	ldi	r30, 0x44	; 68
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE2);
    1d84:	a9 e5       	ldi	r26, 0x59	; 89
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e9 e5       	ldi	r30, 0x59	; 89
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 77       	andi	r24, 0x7F	; 127
    1d90:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE2);
    1d92:	a9 e5       	ldi	r26, 0x59	; 89
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e9 e5       	ldi	r30, 0x59	; 89
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8f 7b       	andi	r24, 0xBF	; 191
    1d9e:	8c 93       	st	X, r24
}
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <Timer_2_setPrescalar>:

void Timer_2_setPrescalar(const Timer_ClockType clock)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR2 = (TCCR2 & (~0X07)) | clock;
    1db2:	a5 e4       	ldi	r26, 0x45	; 69
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e5 e4       	ldi	r30, 0x45	; 69
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	98 7f       	andi	r25, 0xF8	; 248
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	89 2b       	or	r24, r25
    1dc4:	8c 93       	st	X, r24
}
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <Timer_1_init>:
#endif
/*                       Timer 1               */
#ifdef TIMER_1
void Timer_1_init(const Timer_1_ConfigType *const cfg_ptr)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <Timer_1_init+0x6>
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register A*/
    TCCR1A = (cfg_ptr->com_modeA << 6) | (cfg_ptr->com_modeB << 4) | (cfg_ptr->mode & 0x03);
    1ddc:	af e4       	ldi	r26, 0x4F	; 79
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e9 81       	ldd	r30, Y+1	; 0x01
    1de2:	fa 81       	ldd	r31, Y+2	; 0x02
    1de4:	86 81       	ldd	r24, Z+6	; 0x06
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	00 24       	eor	r0, r0
    1dec:	96 95       	lsr	r25
    1dee:	87 95       	ror	r24
    1df0:	07 94       	ror	r0
    1df2:	96 95       	lsr	r25
    1df4:	87 95       	ror	r24
    1df6:	07 94       	ror	r0
    1df8:	98 2f       	mov	r25, r24
    1dfa:	80 2d       	mov	r24, r0
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1e00:	fa 81       	ldd	r31, Y+2	; 0x02
    1e02:	87 81       	ldd	r24, Z+7	; 0x07
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	82 95       	swap	r24
    1e0a:	92 95       	swap	r25
    1e0c:	90 7f       	andi	r25, 0xF0	; 240
    1e0e:	98 27       	eor	r25, r24
    1e10:	80 7f       	andi	r24, 0xF0	; 240
    1e12:	98 27       	eor	r25, r24
    1e14:	92 2f       	mov	r25, r18
    1e16:	98 2b       	or	r25, r24
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	85 81       	ldd	r24, Z+5	; 0x05
    1e1e:	83 70       	andi	r24, 0x03	; 3
    1e20:	89 2b       	or	r24, r25
    1e22:	8c 93       	st	X, r24

    if ((cfg_ptr->mode == 0) || (cfg_ptr->mode == 4) || (cfg_ptr->mode == 12))
    1e24:	e9 81       	ldd	r30, Y+1	; 0x01
    1e26:	fa 81       	ldd	r31, Y+2	; 0x02
    1e28:	85 81       	ldd	r24, Z+5	; 0x05
    1e2a:	88 23       	and	r24, r24
    1e2c:	51 f0       	breq	.+20     	; 0x1e42 <Timer_1_init+0x74>
    1e2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e30:	fa 81       	ldd	r31, Y+2	; 0x02
    1e32:	85 81       	ldd	r24, Z+5	; 0x05
    1e34:	84 30       	cpi	r24, 0x04	; 4
    1e36:	29 f0       	breq	.+10     	; 0x1e42 <Timer_1_init+0x74>
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	85 81       	ldd	r24, Z+5	; 0x05
    1e3e:	8c 30       	cpi	r24, 0x0C	; 12
    1e40:	39 f4       	brne	.+14     	; 0x1e50 <Timer_1_init+0x82>
    {
        /*SET FOC  bits on non-PWM modes*/
        TCCR1A |= (0b11 << 2);
    1e42:	af e4       	ldi	r26, 0x4F	; 79
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	ef e4       	ldi	r30, 0x4F	; 79
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8c 60       	ori	r24, 0x0C	; 12
    1e4e:	8c 93       	st	X, r24
    }
    /*insert all configuration settings in the control register B*/
    TCCR1B = ((cfg_ptr->mode & 0xC0) << 1) | (cfg_ptr->clock);
    1e50:	ae e4       	ldi	r26, 0x4E	; 78
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	85 81       	ldd	r24, Z+5	; 0x05
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	80 7c       	andi	r24, 0xC0	; 192
    1e60:	90 70       	andi	r25, 0x00	; 0
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	98 2f       	mov	r25, r24
    1e68:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6c:	80 81       	ld	r24, Z
    1e6e:	89 2b       	or	r24, r25
    1e70:	8c 93       	st	X, r24
    /*insert compare value to its compare register*/
    OCR1A = cfg_ptr->compare_valueA;
    1e72:	aa e4       	ldi	r26, 0x4A	; 74
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e9 81       	ldd	r30, Y+1	; 0x01
    1e78:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7a:	81 81       	ldd	r24, Z+1	; 0x01
    1e7c:	92 81       	ldd	r25, Z+2	; 0x02
    1e7e:	11 96       	adiw	r26, 0x01	; 1
    1e80:	9c 93       	st	X, r25
    1e82:	8e 93       	st	-X, r24
    OCR1B = cfg_ptr->compare_valueB;
    1e84:	a8 e4       	ldi	r26, 0x48	; 72
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8c:	83 81       	ldd	r24, Z+3	; 0x03
    1e8e:	94 81       	ldd	r25, Z+4	; 0x04
    1e90:	11 96       	adiw	r26, 0x01	; 1
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24

    /*Initialize current counter value to 0*/
    TCNT1 = 0;
    1e96:	ec e4       	ldi	r30, 0x4C	; 76
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	11 82       	std	Z+1, r1	; 0x01
    1e9c:	10 82       	st	Z, r1
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <Timer_1_deInit>:
void Timer_1_deInit(void)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR1A = 0;
    1eb0:	ef e4       	ldi	r30, 0x4F	; 79
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	10 82       	st	Z, r1
    TCCR1B = 0;
    1eb6:	ee e4       	ldi	r30, 0x4E	; 78
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	10 82       	st	Z, r1
    OCR1A = 0;
    1ebc:	ea e4       	ldi	r30, 0x4A	; 74
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	11 82       	std	Z+1, r1	; 0x01
    1ec2:	10 82       	st	Z, r1
    OCR1B = 0;
    1ec4:	e8 e4       	ldi	r30, 0x48	; 72
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	11 82       	std	Z+1, r1	; 0x01
    1eca:	10 82       	st	Z, r1
    TCNT1 = 0;
    1ecc:	ec e4       	ldi	r30, 0x4C	; 76
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	11 82       	std	Z+1, r1	; 0x01
    1ed2:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE1A);
    1ed4:	a9 e5       	ldi	r26, 0x59	; 89
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e9 e5       	ldi	r30, 0x59	; 89
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8f 7e       	andi	r24, 0xEF	; 239
    1ee0:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, OCIE1B);
    1ee2:	a9 e5       	ldi	r26, 0x59	; 89
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e9 e5       	ldi	r30, 0x59	; 89
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	87 7f       	andi	r24, 0xF7	; 247
    1eee:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE1);
    1ef0:	a9 e5       	ldi	r26, 0x59	; 89
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e9 e5       	ldi	r30, 0x59	; 89
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	8b 7f       	andi	r24, 0xFB	; 251
    1efc:	8c 93       	st	X, r24
}
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <Timer_1_setCompareValueA>:
void Timer_1_setCompareValueA(const uint16 compare_val)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <Timer_1_setCompareValueA+0x6>
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR1A = compare_val;
    1f12:	ea e4       	ldi	r30, 0x4A	; 74
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <Timer_1_setCompareValueB>:
void Timer_1_setCompareValueB(const uint16 compare_val)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <Timer_1_setCompareValueB+0x6>
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR1B = compare_val;
    1f36:	e8 e4       	ldi	r30, 0x48	; 72
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <Timer_1_setCounterValue>:
/*Set current counter value for timer0*/
void Timer_1_setCounterValue(const uint16 counter_val)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <Timer_1_setCounterValue+0x6>
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT1 = counter_val;
    1f5a:	ec e4       	ldi	r30, 0x4C	; 76
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
}
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <Timer_1_setCompareACallBack>:

/*Set compare mode isr callback*/
void Timer_1_setCompareACallBack(void (*f_ptr)(void))
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <Timer_1_setCompareACallBack+0x6>
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_1_CompareA_callBackPtr = f_ptr;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	90 93 17 01 	sts	0x0117, r25
    1f86:	80 93 16 01 	sts	0x0116, r24
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <Timer_1_setCompareBCallBack>:
/*Set compare mode isr callback*/
void Timer_1_setCompareBCallBack(void (*f_ptr)(void))
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <Timer_1_setCompareBCallBack+0x6>
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_1_CompareB_callBackPtr = f_ptr;
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	90 93 19 01 	sts	0x0119, r25
    1faa:	80 93 18 01 	sts	0x0118, r24
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <Timer_1_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_1_setOverflowCallBack(void (*f_ptr)(void))
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <Timer_1_setOverflowCallBack+0x6>
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_1_Overflow_callBackPtr = f_ptr;
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	90 93 15 01 	sts	0x0115, r25
    1fce:	80 93 14 01 	sts	0x0114, r24
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <Timer_1_EnableCompareAInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_1_EnableCompareAInterrupt(void)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
    1fe4:	a9 e5       	ldi	r26, 0x59	; 89
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e9 e5       	ldi	r30, 0x59	; 89
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	80 61       	ori	r24, 0x10	; 16
    1ff0:	8c 93       	st	X, r24
}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <Timer_1_EnableCompareBInterrupt>:
/*Enable compare mode Interrupt*/
void Timer_1_EnableCompareBInterrupt(void)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
    2000:	a9 e5       	ldi	r26, 0x59	; 89
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e9 e5       	ldi	r30, 0x59	; 89
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	88 60       	ori	r24, 0x08	; 8
    200c:	8c 93       	st	X, r24
}
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <Timer_1_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_1_EnableOverflowInterrupt(void)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
    201c:	a9 e5       	ldi	r26, 0x59	; 89
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e9 e5       	ldi	r30, 0x59	; 89
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	84 60       	ori	r24, 0x04	; 4
    2028:	8c 93       	st	X, r24
}
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <Timer_1_DisableCompareAInterrupt>:

/*Disable compare mode Interrupt*/
void Timer_1_DisableCompareAInterrupt(void)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE1A);
    2038:	a9 e5       	ldi	r26, 0x59	; 89
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e9 e5       	ldi	r30, 0x59	; 89
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8f 7e       	andi	r24, 0xEF	; 239
    2044:	8c 93       	st	X, r24
}
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <Timer_1_DisableCompareBInterrupt>:

/*Disable compare mode Interrupt*/
void Timer_1_DisableCompareBInterrupt(void)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE1A);
    2054:	a9 e5       	ldi	r26, 0x59	; 89
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e9 e5       	ldi	r30, 0x59	; 89
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8f 7e       	andi	r24, 0xEF	; 239
    2060:	8c 93       	st	X, r24
}
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <Timer_1_DisableOverflowInterrupt>:

/*Disable overflow mode Interrupt*/
void Timer_1_DisableOverflowInterrupt(void)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE1);
    2070:	a9 e5       	ldi	r26, 0x59	; 89
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e9 e5       	ldi	r30, 0x59	; 89
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	8b 7f       	andi	r24, 0xFB	; 251
    207c:	8c 93       	st	X, r24
}
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <Timer_1_setPrescalar>:

void Timer_1_setPrescalar(const Timer_ClockType clock)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	0f 92       	push	r0
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR1B = (TCCR1B & (~0X07)) | clock;
    2090:	ae e4       	ldi	r26, 0x4E	; 78
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	ee e4       	ldi	r30, 0x4E	; 78
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	98 2f       	mov	r25, r24
    209c:	98 7f       	andi	r25, 0xF8	; 248
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	89 2b       	or	r24, r25
    20a2:	8c 93       	st	X, r24
}
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <__vector_11>:
/*******************************************************************************
 *                              ISRs                                                    *
 *******************************************************************************/

ISR(USART_RXC_vect)
{
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	2f 93       	push	r18
    20b8:	3f 93       	push	r19
    20ba:	4f 93       	push	r20
    20bc:	5f 93       	push	r21
    20be:	6f 93       	push	r22
    20c0:	7f 93       	push	r23
    20c2:	8f 93       	push	r24
    20c4:	9f 93       	push	r25
    20c6:	af 93       	push	r26
    20c8:	bf 93       	push	r27
    20ca:	ef 93       	push	r30
    20cc:	ff 93       	push	r31
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_Recieve_Complete_callBackPtr != NULL_PTR)
    20d6:	80 91 1a 01 	lds	r24, 0x011A
    20da:	90 91 1b 01 	lds	r25, 0x011B
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	29 f0       	breq	.+10     	; 0x20ec <__vector_11+0x40>
    {
        (*g_UART_Recieve_Complete_callBackPtr)();
    20e2:	e0 91 1a 01 	lds	r30, 0x011A
    20e6:	f0 91 1b 01 	lds	r31, 0x011B
    20ea:	09 95       	icall
    }
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	bf 91       	pop	r27
    20f6:	af 91       	pop	r26
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	7f 91       	pop	r23
    20fe:	6f 91       	pop	r22
    2100:	5f 91       	pop	r21
    2102:	4f 91       	pop	r20
    2104:	3f 91       	pop	r19
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti

00002112 <__vector_13>:
ISR(USART_TXC_vect)
{
    2112:	1f 92       	push	r1
    2114:	0f 92       	push	r0
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	0f 92       	push	r0
    211a:	11 24       	eor	r1, r1
    211c:	2f 93       	push	r18
    211e:	3f 93       	push	r19
    2120:	4f 93       	push	r20
    2122:	5f 93       	push	r21
    2124:	6f 93       	push	r22
    2126:	7f 93       	push	r23
    2128:	8f 93       	push	r24
    212a:	9f 93       	push	r25
    212c:	af 93       	push	r26
    212e:	bf 93       	push	r27
    2130:	ef 93       	push	r30
    2132:	ff 93       	push	r31
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_Transmit_Complete_callBackPtr != NULL_PTR)
    213c:	80 91 1c 01 	lds	r24, 0x011C
    2140:	90 91 1d 01 	lds	r25, 0x011D
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	29 f0       	breq	.+10     	; 0x2152 <__vector_13+0x40>
    {
        (*g_UART_Transmit_Complete_callBackPtr)();
    2148:	e0 91 1c 01 	lds	r30, 0x011C
    214c:	f0 91 1d 01 	lds	r31, 0x011D
    2150:	09 95       	icall
    }
}
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	ff 91       	pop	r31
    2158:	ef 91       	pop	r30
    215a:	bf 91       	pop	r27
    215c:	af 91       	pop	r26
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	7f 91       	pop	r23
    2164:	6f 91       	pop	r22
    2166:	5f 91       	pop	r21
    2168:	4f 91       	pop	r20
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <__vector_12>:
ISR(USART_UDRE_vect)
{
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	2f 93       	push	r18
    2184:	3f 93       	push	r19
    2186:	4f 93       	push	r20
    2188:	5f 93       	push	r21
    218a:	6f 93       	push	r22
    218c:	7f 93       	push	r23
    218e:	8f 93       	push	r24
    2190:	9f 93       	push	r25
    2192:	af 93       	push	r26
    2194:	bf 93       	push	r27
    2196:	ef 93       	push	r30
    2198:	ff 93       	push	r31
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_DataReg_Empty_callBackPtr != NULL_PTR)
    21a2:	80 91 1e 01 	lds	r24, 0x011E
    21a6:	90 91 1f 01 	lds	r25, 0x011F
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	29 f0       	breq	.+10     	; 0x21b8 <__vector_12+0x40>
    {
        (*g_UART_DataReg_Empty_callBackPtr)();
    21ae:	e0 91 1e 01 	lds	r30, 0x011E
    21b2:	f0 91 1f 01 	lds	r31, 0x011F
    21b6:	09 95       	icall
    }
}
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	ff 91       	pop	r31
    21be:	ef 91       	pop	r30
    21c0:	bf 91       	pop	r27
    21c2:	af 91       	pop	r26
    21c4:	9f 91       	pop	r25
    21c6:	8f 91       	pop	r24
    21c8:	7f 91       	pop	r23
    21ca:	6f 91       	pop	r22
    21cc:	5f 91       	pop	r21
    21ce:	4f 91       	pop	r20
    21d0:	3f 91       	pop	r19
    21d2:	2f 91       	pop	r18
    21d4:	0f 90       	pop	r0
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	0f 90       	pop	r0
    21da:	1f 90       	pop	r1
    21dc:	18 95       	reti

000021de <UART_init>:
/*******************************************************************************
 *                      Function Definitions                                    *
 *******************************************************************************/

void UART_init(UART_ConfigType *cfg_ptr)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <UART_init+0x6>
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <UART_init+0x8>
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    uint16 baud = (((F_CPU) / (8UL * cfg_ptr->baud_rate)) - 1);
    21ee:	eb 81       	ldd	r30, Y+3	; 0x03
    21f0:	fc 81       	ldd	r31, Y+4	; 0x04
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	cc 01       	movw	r24, r24
    21f8:	a0 e0       	ldi	r26, 0x00	; 0
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	aa 1f       	adc	r26, r26
    2202:	bb 1f       	adc	r27, r27
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	aa 1f       	adc	r26, r26
    220a:	bb 1f       	adc	r27, r27
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	9c 01       	movw	r18, r24
    2216:	ad 01       	movw	r20, r26
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	92 e1       	ldi	r25, 0x12	; 18
    221c:	aa e7       	ldi	r26, 0x7A	; 122
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__udivmodsi4>
    2228:	da 01       	movw	r26, r20
    222a:	c9 01       	movw	r24, r18
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    /*Description: UCSRA (uart control & status reg.)
        U2x =  1 for double transmission speed (8 Divisor instead of 16)
*/
    UCSRA = (1 << U2X);
    2232:	eb e2       	ldi	r30, 0x2B	; 43
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	80 83       	st	Z, r24
UDRIE   = 0 DATA REG. EMPTY INTERRUPT ENABLE BIT (DISABLE)
RXEN    = second bit of conn_direction to turn on transmitter
TXEN    = first bit of conn_direction to turn on reciever
UCSZ2   = c_size bit-3 
*/
    UCSRB = (cfg_ptr->conn_direction << 3) | (cfg_ptr->c_size & (0x04));
    223a:	aa e2       	ldi	r26, 0x2A	; 42
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	eb 81       	ldd	r30, Y+3	; 0x03
    2240:	fc 81       	ldd	r31, Y+4	; 0x04
    2242:	86 81       	ldd	r24, Z+6	; 0x06
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	98 2f       	mov	r25, r24
    2256:	eb 81       	ldd	r30, Y+3	; 0x03
    2258:	fc 81       	ldd	r31, Y+4	; 0x04
    225a:	84 81       	ldd	r24, Z+4	; 0x04
    225c:	84 70       	andi	r24, 0x04	; 4
    225e:	89 2b       	or	r24, r25
    2260:	8c 93       	st	X, r24
UPM1:0  = 00 DISABLE PARITY CHECKS
USBS    = 0 1-STOP-BIT SELECT
UPCOL   = CLOCK polarity MODE
UCSZ1:0 = first 2-bitts in character size;
*/
    UCSRC = (1 << URSEL) | (cfg_ptr->mode << 6) | ((cfg_ptr->c_size & 0x03) << 1) | cfg_ptr->clock_polarity;
    2262:	a0 e4       	ldi	r26, 0x40	; 64
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	eb 81       	ldd	r30, Y+3	; 0x03
    2268:	fc 81       	ldd	r31, Y+4	; 0x04
    226a:	80 81       	ld	r24, Z
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	00 24       	eor	r0, r0
    2272:	96 95       	lsr	r25
    2274:	87 95       	ror	r24
    2276:	07 94       	ror	r0
    2278:	96 95       	lsr	r25
    227a:	87 95       	ror	r24
    227c:	07 94       	ror	r0
    227e:	98 2f       	mov	r25, r24
    2280:	80 2d       	mov	r24, r0
    2282:	28 2f       	mov	r18, r24
    2284:	20 68       	ori	r18, 0x80	; 128
    2286:	eb 81       	ldd	r30, Y+3	; 0x03
    2288:	fc 81       	ldd	r31, Y+4	; 0x04
    228a:	84 81       	ldd	r24, Z+4	; 0x04
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	83 70       	andi	r24, 0x03	; 3
    2292:	90 70       	andi	r25, 0x00	; 0
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	92 2f       	mov	r25, r18
    229a:	98 2b       	or	r25, r24
    229c:	eb 81       	ldd	r30, Y+3	; 0x03
    229e:	fc 81       	ldd	r31, Y+4	; 0x04
    22a0:	87 81       	ldd	r24, Z+7	; 0x07
    22a2:	89 2b       	or	r24, r25
    22a4:	8c 93       	st	X, r24

    /*Description: UBBR
URSEL   = 0 TO WRITE TO UBBR
UBBR = BAUD RATE
*/
    UBRRH = (baud >> 8);
    22a6:	e0 e4       	ldi	r30, 0x40	; 64
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	9a 81       	ldd	r25, Y+2	; 0x02
    22ae:	89 2f       	mov	r24, r25
    22b0:	99 27       	eor	r25, r25
    22b2:	80 83       	st	Z, r24
    UBRRL = (baud);
    22b4:	e9 e2       	ldi	r30, 0x29	; 41
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	80 83       	st	Z, r24
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <UART_sendData>:

/*data is uint16 in case of 9-bit mode*/
void UART_sendData(uint16 data)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <UART_sendData+0x6>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    /*Wait untill data transmit buffer is empty */
    while (BIT_IS_CLEAR(UCSRA, UDRE))
    22d8:	eb e2       	ldi	r30, 0x2B	; 43
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	80 72       	andi	r24, 0x20	; 32
    22e4:	90 70       	andi	r25, 0x00	; 0
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	b9 f3       	breq	.-18     	; 0x22d8 <UART_sendData+0xe>
        ;
    /*in case of 9-bit uart insert 9nth bit into ucsrb*/
    if (BIT_IS_SET(UCSRB, UCSZ2))
    22ea:	ea e2       	ldi	r30, 0x2A	; 42
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	84 70       	andi	r24, 0x04	; 4
    22f6:	90 70       	andi	r25, 0x00	; 0
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	39 f0       	breq	.+14     	; 0x230a <UART_sendData+0x40>
    {
        UCSRB = (UCSRB & (~0X01)) | (data & 0x100);
    22fc:	aa e2       	ldi	r26, 0x2A	; 42
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	ea e2       	ldi	r30, 0x2A	; 42
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8e 7f       	andi	r24, 0xFE	; 254
    2308:	8c 93       	st	X, r24
    }
    /*insert REST of data into UDR buffer to transmit*/
    UDR = data;
    230a:	ec e2       	ldi	r30, 0x2C	; 44
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	80 83       	st	Z, r24
}
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <UART_recieveData>:

uint16 UART_recieveData(void)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <UART_recieveData+0x6>
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    /*Wait untill recieve is complete*/
    while (BIT_IS_CLEAR(UCSRA, RXC))
    2326:	eb e2       	ldi	r30, 0x2B	; 43
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	88 23       	and	r24, r24
    232e:	dc f7       	brge	.-10     	; 0x2326 <UART_recieveData+0xa>
        ;
    /*in case of 9-bit uart */
    if (BIT_IS_SET(UCSRB, UCSZ2))
    2330:	ea e2       	ldi	r30, 0x2A	; 42
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	84 70       	andi	r24, 0x04	; 4
    233c:	90 70       	andi	r25, 0x00	; 0
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	b1 f0       	breq	.+44     	; 0x236e <UART_recieveData+0x52>
    {
        /*return recieved data in data register plus 9nth bit*/
        return (UDR | ((UCSRB & 0X02) << 7));
    2342:	ec e2       	ldi	r30, 0x2C	; 44
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	ea e2       	ldi	r30, 0x2A	; 42
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	88 2f       	mov	r24, r24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	82 70       	andi	r24, 0x02	; 2
    2358:	90 70       	andi	r25, 0x00	; 0
    235a:	96 95       	lsr	r25
    235c:	98 2f       	mov	r25, r24
    235e:	88 27       	eor	r24, r24
    2360:	97 95       	ror	r25
    2362:	87 95       	ror	r24
    2364:	82 2b       	or	r24, r18
    2366:	93 2b       	or	r25, r19
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	07 c0       	rjmp	.+14     	; 0x237c <UART_recieveData+0x60>
    }
    else
    {
        /*return recieved data in data register*/
        return UDR;
    236e:	ec e2       	ldi	r30, 0x2C	; 44
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	3a 83       	std	Y+2, r19	; 0x02
    237a:	29 83       	std	Y+1, r18	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    }
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <UART_sendString>:

void UART_sendString(const uint8 *string)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	00 d0       	rcall	.+0      	; 0x2390 <UART_sendString+0x6>
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	0c c0       	rjmp	.+24     	; 0x23b2 <UART_sendString+0x28>
    /*send each character of our string until we reach the null terminator*/
    while (*string != '\0')
    {
        UART_sendData(*string);
    239a:	e9 81       	ldd	r30, Y+1	; 0x01
    239c:	fa 81       	ldd	r31, Y+2	; 0x02
    239e:	80 81       	ld	r24, Z
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 65 11 	call	0x22ca	; 0x22ca <UART_sendData>
        string++;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *string)
{
    /*send each character of our string until we reach the null terminator*/
    while (*string != '\0')
    23b2:	e9 81       	ldd	r30, Y+1	; 0x01
    23b4:	fa 81       	ldd	r31, Y+2	; 0x02
    23b6:	80 81       	ld	r24, Z
    23b8:	88 23       	and	r24, r24
    23ba:	79 f7       	brne	.-34     	; 0x239a <UART_sendString+0x10>
    {
        UART_sendData(*string);
        string++;
    }
}
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <UART_recieveString>:
void UART_recieveString(uint8 *string)
{
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <UART_recieveString+0xa>
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <UART_recieveString+0xc>
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
    /*recieve each character string until we find a '#' 
    then replace it with null terminator*/

    uint16 i = 0;
    23da:	1a 82       	std	Y+2, r1	; 0x02
    23dc:	19 82       	std	Y+1, r1	; 0x01
    string[i] = UART_recieveData();
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	3c 81       	ldd	r19, Y+4	; 0x04
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	89 01       	movw	r16, r18
    23e8:	08 0f       	add	r16, r24
    23ea:	19 1f       	adc	r17, r25
    23ec:	0e 94 8e 11 	call	0x231c	; 0x231c <UART_recieveData>
    23f0:	f8 01       	movw	r30, r16
    23f2:	80 83       	st	Z, r24
    23f4:	10 c0       	rjmp	.+32     	; 0x2416 <UART_recieveString+0x50>
    while (string[i] != '#')
    {
        i++;
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
        string[i] = UART_recieveData();
    2400:	2b 81       	ldd	r18, Y+3	; 0x03
    2402:	3c 81       	ldd	r19, Y+4	; 0x04
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	89 01       	movw	r16, r18
    240a:	08 0f       	add	r16, r24
    240c:	19 1f       	adc	r17, r25
    240e:	0e 94 8e 11 	call	0x231c	; 0x231c <UART_recieveData>
    2412:	f8 01       	movw	r30, r16
    2414:	80 83       	st	Z, r24
    /*recieve each character string until we find a '#' 
    then replace it with null terminator*/

    uint16 i = 0;
    string[i] = UART_recieveData();
    while (string[i] != '#')
    2416:	2b 81       	ldd	r18, Y+3	; 0x03
    2418:	3c 81       	ldd	r19, Y+4	; 0x04
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	f9 01       	movw	r30, r18
    2420:	e8 0f       	add	r30, r24
    2422:	f9 1f       	adc	r31, r25
    2424:	80 81       	ld	r24, Z
    2426:	83 32       	cpi	r24, 0x23	; 35
    2428:	31 f7       	brne	.-52     	; 0x23f6 <UART_recieveString+0x30>
    {
        i++;
        string[i] = UART_recieveData();
    }
    string[i] = '\0';
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	29 81       	ldd	r18, Y+1	; 0x01
    2430:	3a 81       	ldd	r19, Y+2	; 0x02
    2432:	fc 01       	movw	r30, r24
    2434:	e2 0f       	add	r30, r18
    2436:	f3 1f       	adc	r31, r19
    2438:	10 82       	st	Z, r1
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	08 95       	ret

0000244c <UART_setRecieveCompleteCallback>:

void UART_setRecieveCompleteCallback(void (*f_ptr)(void))
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <UART_setRecieveCompleteCallback+0x6>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    /*set global pointer of the recieve interrupt functin in isr*/
    g_UART_Recieve_Complete_callBackPtr = f_ptr;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
    245e:	90 93 1b 01 	sts	0x011B, r25
    2462:	80 93 1a 01 	sts	0x011A, r24
}
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <UART_setTransmitCompleteCallback>:
void UART_setTransmitCompleteCallback(void (*f_ptr)(void))
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <UART_setTransmitCompleteCallback+0x6>
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
    /*set global pointer of the transmit interrupt functin in isr*/

    g_UART_Transmit_Complete_callBackPtr = f_ptr;
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	90 93 1d 01 	sts	0x011D, r25
    2486:	80 93 1c 01 	sts	0x011C, r24
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <UART_setDataEmptyCallback>:
void UART_setDataEmptyCallback(void (*f_ptr)(void))
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <UART_setDataEmptyCallback+0x6>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01

    /*set global pointer of the data empty interrupt functin in isr*/
    g_UART_DataReg_Empty_callBackPtr = f_ptr;
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	90 93 1f 01 	sts	0x011F, r25
    24aa:	80 93 1e 01 	sts	0x011E, r24
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <UART_enableRecieveCompleteInterrupt>:
void UART_enableRecieveCompleteInterrupt(void)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    /*set interrupt enable bit for recieve complete*/
    SET_BIT(UCSRB, RXCIE);
    24c0:	aa e2       	ldi	r26, 0x2A	; 42
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	ea e2       	ldi	r30, 0x2A	; 42
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 68       	ori	r24, 0x80	; 128
    24cc:	8c 93       	st	X, r24
}
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <UART_enableTransmitCompleteInterrupt>:
void UART_enableTransmitCompleteInterrupt(void)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62

    /*set interrupt enable bit for transfer complete*/
    SET_BIT(UCSRB, TXCIE);
    24dc:	aa e2       	ldi	r26, 0x2A	; 42
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	ea e2       	ldi	r30, 0x2A	; 42
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	80 64       	ori	r24, 0x40	; 64
    24e8:	8c 93       	st	X, r24
}
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <UART_enableDataEmptyInterrupt>:
void UART_enableDataEmptyInterrupt(void)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62

    /*set interrupt enable bit for data empty*/
    SET_BIT(UCSRB, UDRIE);
    24f8:	aa e2       	ldi	r26, 0x2A	; 42
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ea e2       	ldi	r30, 0x2A	; 42
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	80 62       	ori	r24, 0x20	; 32
    2504:	8c 93       	st	X, r24
}
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <UART_disableRecieveCompleteInterrupt>:
void UART_disableRecieveCompleteInterrupt(void)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    /*clear interrupt enable bit for recieve complete*/
    CLEAR_BIT(UCSRB, RXCIE);
    2514:	aa e2       	ldi	r26, 0x2A	; 42
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	ea e2       	ldi	r30, 0x2A	; 42
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8f 77       	andi	r24, 0x7F	; 127
    2520:	8c 93       	st	X, r24
}
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <UART_disableTransmitCompleteInterrupt>:
void UART_disableTransmitCompleteInterrupt(void)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62

    /*clear interrupt enable bit for transfer complete*/
    CLEAR_BIT(UCSRB, TXCIE);
    2530:	aa e2       	ldi	r26, 0x2A	; 42
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	ea e2       	ldi	r30, 0x2A	; 42
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8f 7b       	andi	r24, 0xBF	; 191
    253c:	8c 93       	st	X, r24
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <UART_disableDataEmptyInterrupt>:
void UART_disableDataEmptyInterrupt(void)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62

    /*clear interrupt enable bit for data empty*/
    CLEAR_BIT(UCSRB, UDRIE);
    254c:	aa e2       	ldi	r26, 0x2A	; 42
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ea e2       	ldi	r30, 0x2A	; 42
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8f 7d       	andi	r24, 0xDF	; 223
    2558:	8c 93       	st	X, r24
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <main>:
void send_Password(uint8 *pass);
void opening_door();
void set_password(uint8 * Buffer);

void main()
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	6c 97       	sbiw	r28, 0x1c	; 28
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    uint8 sendBuffer[12] = {0};
    2574:	8c e0       	ldi	r24, 0x0C	; 12
    2576:	fe 01       	movw	r30, r28
    2578:	71 96       	adiw	r30, 0x11	; 17
    257a:	df 01       	movw	r26, r30
    257c:	98 2f       	mov	r25, r24
    257e:	1d 92       	st	X+, r1
    2580:	9a 95       	dec	r25
    2582:	e9 f7       	brne	.-6      	; 0x257e <main+0x1e>
    uint8 code; /*returned code by the other MCU Each time passwod is sent*/
    uint8 key = 0;
    2584:	1f 86       	std	Y+15, r1	; 0x0f
    init_APP_MC1();
    2586:	0e 94 8e 13 	call	0x271c	; 0x271c <init_APP_MC1>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	a8 e4       	ldi	r26, 0x48	; 72
    2590:	b2 e4       	ldi	r27, 0x42	; 66
    2592:	8b 87       	std	Y+11, r24	; 0x0b
    2594:	9c 87       	std	Y+12, r25	; 0x0c
    2596:	ad 87       	std	Y+13, r26	; 0x0d
    2598:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	6b 85       	ldd	r22, Y+11	; 0x0b
    259c:	7c 85       	ldd	r23, Y+12	; 0x0c
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	54 e4       	ldi	r21, 0x44	; 68
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	8f 83       	std	Y+7, r24	; 0x07
    25b4:	98 87       	std	Y+8, r25	; 0x08
    25b6:	a9 87       	std	Y+9, r26	; 0x09
    25b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ba:	6f 81       	ldd	r22, Y+7	; 0x07
    25bc:	78 85       	ldd	r23, Y+8	; 0x08
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	2c f4       	brge	.+10     	; 0x25dc <main+0x7c>
		__ticks = 1;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	3f c0       	rjmp	.+126    	; 0x265a <main+0xfa>
	else if (__tmp > 65535)
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	3f ef       	ldi	r19, 0xFF	; 255
    25e8:	4f e7       	ldi	r20, 0x7F	; 127
    25ea:	57 e4       	ldi	r21, 0x47	; 71
    25ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f0:	18 16       	cp	r1, r24
    25f2:	4c f5       	brge	.+82     	; 0x2646 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	0f c0       	rjmp	.+30     	; 0x263c <main+0xdc>
    261e:	88 ec       	ldi	r24, 0xC8	; 200
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <main+0xca>
    262e:	9c 83       	std	Y+4, r25	; 0x04
    2630:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	69 f7       	brne	.-38     	; 0x261e <main+0xbe>
    2644:	14 c0       	rjmp	.+40     	; 0x266e <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <main+0x106>
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01
    while (1)
    {_delay_ms(50);
        UART_sendData(3);/*sen_delay_ms(30);d dummy data so other mcu waits until this one is ready*/
    266e:	83 e0       	ldi	r24, 0x03	; 3
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 65 11 	call	0x22ca	; 0x22ca <UART_sendData>
        if(UART_recieveData()==FIRST_TIME_TRUE)/*check if first time use to set password*/
    2676:	0e 94 8e 11 	call	0x231c	; 0x231c <UART_recieveData>
    267a:	86 35       	cpi	r24, 0x56	; 86
    267c:	91 05       	cpc	r25, r1
    267e:	29 f4       	brne	.+10     	; 0x268a <main+0x12a>
        {
            set_password(sendBuffer);
    2680:	ce 01       	movw	r24, r28
    2682:	41 96       	adiw	r24, 0x11	; 17
    2684:	0e 94 bd 14 	call	0x297a	; 0x297a <set_password>
    2688:	80 cf       	rjmp	.-256    	; 0x258a <main+0x2a>
            continue;
        }
        send_Password(sendBuffer);/*send password input*/
    268a:	ce 01       	movw	r24, r28
    268c:	41 96       	adiw	r24, 0x11	; 17
    268e:	0e 94 49 14 	call	0x2892	; 0x2892 <send_Password>

        code = UART_recieveData();/*get access code*/
    2692:	0e 94 8e 11 	call	0x231c	; 0x231c <UART_recieveData>
    2696:	88 8b       	std	Y+16, r24	; 0x10
        if (code == AUTHORIZED)/*if authorized acess, display options*/
    2698:	88 89       	ldd	r24, Y+16	; 0x10
    269a:	8a 3e       	cpi	r24, 0xEA	; 234
    269c:	69 f5       	brne	.+90     	; 0x26f8 <main+0x198>
        {
            LCD_clearScreen();
    269e:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_clearScreen>
            LCD_displayStringRowColumn(0, 0, "+: Open Door");
    26a2:	20 e6       	ldi	r18, 0x60	; 96
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	a9 01       	movw	r20, r18
    26ac:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(1, 0, "-: Change Password");
    26b0:	2d e6       	ldi	r18, 0x6D	; 109
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	a9 01       	movw	r20, r18
    26ba:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
            key = Keypad_getPressedKey();
    26be:	0e 94 a3 05 	call	0xb46	; 0xb46 <Keypad_getPressedKey>
    26c2:	8f 87       	std	Y+15, r24	; 0x0f
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <main+0x16c>
            /*Get selected option to send*/
            while ((key != '+') && (key != '-'))
            {
                key = Keypad_getPressedKey();
    26c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Keypad_getPressedKey>
    26ca:	8f 87       	std	Y+15, r24	; 0x0f
            LCD_clearScreen();
            LCD_displayStringRowColumn(0, 0, "+: Open Door");
            LCD_displayStringRowColumn(1, 0, "-: Change Password");
            key = Keypad_getPressedKey();
            /*Get selected option to send*/
            while ((key != '+') && (key != '-'))
    26cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ce:	8b 32       	cpi	r24, 0x2B	; 43
    26d0:	19 f0       	breq	.+6      	; 0x26d8 <main+0x178>
    26d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d4:	8d 32       	cpi	r24, 0x2D	; 45
    26d6:	b9 f7       	brne	.-18     	; 0x26c6 <main+0x166>
            {
                key = Keypad_getPressedKey();
            }
            /*send pressed selection by uart*/
            UART_sendData(key);
    26d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 65 11 	call	0x22ca	; 0x22ca <UART_sendData>
            if (key == '-')
    26e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e4:	8d 32       	cpi	r24, 0x2D	; 45
    26e6:	09 f4       	brne	.+2      	; 0x26ea <main+0x18a>
    26e8:	50 cf       	rjmp	.-352    	; 0x258a <main+0x2a>
            {
                continue;
            }
            else if (key == '+')
    26ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ec:	8b 32       	cpi	r24, 0x2B	; 43
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <main+0x192>
    26f0:	4c cf       	rjmp	.-360    	; 0x258a <main+0x2a>
            {
                opening_door();
    26f2:	0e 94 a9 14 	call	0x2952	; 0x2952 <opening_door>
    26f6:	49 cf       	rjmp	.-366    	; 0x258a <main+0x2a>
                continue;
            }
        }
        else if (code == ALARM_ON)
    26f8:	88 89       	ldd	r24, Y+16	; 0x10
    26fa:	8a 32       	cpi	r24, 0x2A	; 42
    26fc:	09 f0       	breq	.+2      	; 0x2700 <main+0x1a0>
    26fe:	45 cf       	rjmp	.-374    	; 0x258a <main+0x2a>
        {
            LCD_clearScreen();
    2700:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_clearScreen>
            LCD_displayStringRowColumn(0, 0, "ALARM OM");
    2704:	20 e8       	ldi	r18, 0x80	; 128
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	a9 01       	movw	r20, r18
    270e:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
            Timer_1_delaySeconds(ALARM_ON_PERIOD);
    2712:	8a e0       	ldi	r24, 0x0A	; 10
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 ed 13 	call	0x27da	; 0x27da <Timer_1_delaySeconds>
    271a:	37 cf       	rjmp	.-402    	; 0x258a <main+0x2a>

0000271c <init_APP_MC1>:
        }
    }
}

void init_APP_MC1()
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	2d 97       	sbiw	r28, 0x0d	; 13
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    LCD_init();
    2730:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_init>
    UART_ConfigType cfg = {ASYNCHRONOUS, DISABLE_PARITY, 9600, UART_8_BIT, UART_1_STOP_BIT, TRANSMITTER_RECIEVER, RISING_T_FALLING_R};
    2734:	ce 01       	movw	r24, r28
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	9a 87       	std	Y+10, r25	; 0x0a
    273a:	89 87       	std	Y+9, r24	; 0x09
    273c:	eb ef       	ldi	r30, 0xFB	; 251
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	fc 87       	std	Y+12, r31	; 0x0c
    2742:	eb 87       	std	Y+11, r30	; 0x0b
    2744:	f8 e0       	ldi	r31, 0x08	; 8
    2746:	fd 87       	std	Y+13, r31	; 0x0d
    2748:	eb 85       	ldd	r30, Y+11	; 0x0b
    274a:	fc 85       	ldd	r31, Y+12	; 0x0c
    274c:	00 80       	ld	r0, Z
    274e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2750:	9c 85       	ldd	r25, Y+12	; 0x0c
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	9c 87       	std	Y+12, r25	; 0x0c
    2756:	8b 87       	std	Y+11, r24	; 0x0b
    2758:	e9 85       	ldd	r30, Y+9	; 0x09
    275a:	fa 85       	ldd	r31, Y+10	; 0x0a
    275c:	00 82       	st	Z, r0
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	9a 87       	std	Y+10, r25	; 0x0a
    2766:	89 87       	std	Y+9, r24	; 0x09
    2768:	9d 85       	ldd	r25, Y+13	; 0x0d
    276a:	91 50       	subi	r25, 0x01	; 1
    276c:	9d 87       	std	Y+13, r25	; 0x0d
    276e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2770:	ee 23       	and	r30, r30
    2772:	51 f7       	brne	.-44     	; 0x2748 <init_APP_MC1+0x2c>
    UART_init(&cfg);
    2774:	ce 01       	movw	r24, r28
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_init>

    LCD_displayStringRowColumn(0, 0, "MAX password");
    277c:	29 e8       	ldi	r18, 0x89	; 137
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	a9 01       	movw	r20, r18
    2786:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 2, "is 10 Digits");
    278a:	26 e9       	ldi	r18, 0x96	; 150
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	62 e0       	ldi	r22, 0x02	; 2
    2792:	a9 01       	movw	r20, r18
    2794:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
    Timer_1_delaySeconds(1);
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 ed 13 	call	0x27da	; 0x27da <Timer_1_delaySeconds>
    LCD_clearScreen();
    27a0:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Enter Password");
    27a4:	23 ea       	ldi	r18, 0xA3	; 163
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	a9 01       	movw	r20, r18
    27ae:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 2, " then '='");
    27b2:	22 eb       	ldi	r18, 0xB2	; 178
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	62 e0       	ldi	r22, 0x02	; 2
    27ba:	a9 01       	movw	r20, r18
    27bc:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
    Timer_1_delaySeconds(1);
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 ed 13 	call	0x27da	; 0x27da <Timer_1_delaySeconds>
}
    27c8:	2d 96       	adiw	r28, 0x0d	; 13
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <Timer_1_delaySeconds>:

void Timer_1_delaySeconds(uint16 seconds)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	60 97       	sbiw	r28, 0x10	; 16
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	9b 87       	std	Y+11, r25	; 0x0b
    27f0:	8a 87       	std	Y+10, r24	; 0x0a
    Timer_1_ConfigType cfg = {F_CPU_1024, 7812, 0, CTC_OCR1A, NORMAL_OCn_DISCONNECTED, NORMAL_OCn_DISCONNECTED};
    27f2:	ce 01       	movw	r24, r28
    27f4:	02 96       	adiw	r24, 0x02	; 2
    27f6:	9d 87       	std	Y+13, r25	; 0x0d
    27f8:	8c 87       	std	Y+12, r24	; 0x0c
    27fa:	e3 e0       	ldi	r30, 0x03	; 3
    27fc:	f1 e0       	ldi	r31, 0x01	; 1
    27fe:	ff 87       	std	Y+15, r31	; 0x0f
    2800:	ee 87       	std	Y+14, r30	; 0x0e
    2802:	f8 e0       	ldi	r31, 0x08	; 8
    2804:	f8 8b       	std	Y+16, r31	; 0x10
    2806:	ee 85       	ldd	r30, Y+14	; 0x0e
    2808:	ff 85       	ldd	r31, Y+15	; 0x0f
    280a:	00 80       	ld	r0, Z
    280c:	8e 85       	ldd	r24, Y+14	; 0x0e
    280e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	9f 87       	std	Y+15, r25	; 0x0f
    2814:	8e 87       	std	Y+14, r24	; 0x0e
    2816:	ec 85       	ldd	r30, Y+12	; 0x0c
    2818:	fd 85       	ldd	r31, Y+13	; 0x0d
    281a:	00 82       	st	Z, r0
    281c:	8c 85       	ldd	r24, Y+12	; 0x0c
    281e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	9d 87       	std	Y+13, r25	; 0x0d
    2824:	8c 87       	std	Y+12, r24	; 0x0c
    2826:	98 89       	ldd	r25, Y+16	; 0x10
    2828:	91 50       	subi	r25, 0x01	; 1
    282a:	98 8b       	std	Y+16, r25	; 0x10
    282c:	e8 89       	ldd	r30, Y+16	; 0x10
    282e:	ee 23       	and	r30, r30
    2830:	51 f7       	brne	.-44     	; 0x2806 <Timer_1_delaySeconds+0x2c>
    Timer_1_init(&cfg);
    2832:	ce 01       	movw	r24, r28
    2834:	02 96       	adiw	r24, 0x02	; 2
    2836:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <Timer_1_init>
    for (uint8 i = 0; i < seconds; i++)
    283a:	19 82       	std	Y+1, r1	; 0x01
    283c:	17 c0       	rjmp	.+46     	; 0x286c <Timer_1_delaySeconds+0x92>
    {
        while (BIT_IS_CLEAR(TIFR, OCF1A))
    283e:	e8 e5       	ldi	r30, 0x58	; 88
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	80 71       	andi	r24, 0x10	; 16
    284a:	90 70       	andi	r25, 0x00	; 0
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	b9 f3       	breq	.-18     	; 0x283e <Timer_1_delaySeconds+0x64>
            ;
        SET_BIT(TIFR, OCF1A);
    2850:	a8 e5       	ldi	r26, 0x58	; 88
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e8 e5       	ldi	r30, 0x58	; 88
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	80 61       	ori	r24, 0x10	; 16
    285c:	8c 93       	st	X, r24
        Timer_1_setCounterValue(0);
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <Timer_1_setCounterValue>

void Timer_1_delaySeconds(uint16 seconds)
{
    Timer_1_ConfigType cfg = {F_CPU_1024, 7812, 0, CTC_OCR1A, NORMAL_OCn_DISCONNECTED, NORMAL_OCn_DISCONNECTED};
    Timer_1_init(&cfg);
    for (uint8 i = 0; i < seconds; i++)
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8a 85       	ldd	r24, Y+10	; 0x0a
    2874:	9b 85       	ldd	r25, Y+11	; 0x0b
    2876:	28 17       	cp	r18, r24
    2878:	39 07       	cpc	r19, r25
    287a:	08 f3       	brcs	.-62     	; 0x283e <Timer_1_delaySeconds+0x64>
            ;
        SET_BIT(TIFR, OCF1A);
        Timer_1_setCounterValue(0);
    }

    Timer_1_deInit();
    287c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <Timer_1_deInit>
}
    2880:	60 96       	adiw	r28, 0x10	; 16
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <send_Password>:

void send_Password(uint8 *pass)
{
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <send_Password+0xa>
    289c:	0f 92       	push	r0
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	9b 83       	std	Y+3, r25	; 0x03
    28a4:	8a 83       	std	Y+2, r24	; 0x02
    uint8 passDigits=0;
    28a6:	19 82       	std	Y+1, r1	; 0x01
    28a8:	2f c0       	rjmp	.+94     	; 0x2908 <send_Password+0x76>
 
    while(passDigits<4) /*Make sure password is more than 3 digits*/
    {
           LCD_clearScreen();
    28aa:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Enter PASS:");
    28ae:	2c eb       	ldi	r18, 0xBC	; 188
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	a9 01       	movw	r20, r18
    28b8:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
    LCD_goToRowColumn(1, 0);
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <LCD_goToRowColumn>
    for (passDigits = 0; passDigits < 10; passDigits++)
    28c4:	19 82       	std	Y+1, r1	; 0x01
    28c6:	1d c0       	rjmp	.+58     	; 0x2902 <send_Password+0x70>
    {
        /*Save each digit untill limit of 10 reached or '=' is pressed*/
        pass[passDigits] = Keypad_getPressedKey();
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	8c 01       	movw	r16, r24
    28d4:	02 0f       	add	r16, r18
    28d6:	13 1f       	adc	r17, r19
    28d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Keypad_getPressedKey>
    28dc:	f8 01       	movw	r30, r16
    28de:	80 83       	st	Z, r24
        if (pass[passDigits] == '=')
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ea:	fc 01       	movw	r30, r24
    28ec:	e2 0f       	add	r30, r18
    28ee:	f3 1f       	adc	r31, r19
    28f0:	80 81       	ld	r24, Z
    28f2:	8d 33       	cpi	r24, 0x3D	; 61
    28f4:	49 f0       	breq	.+18     	; 0x2908 <send_Password+0x76>
        {
            break;
        }
        LCD_displayCharacter('*');
    28f6:	8a e2       	ldi	r24, 0x2A	; 42
    28f8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_displayCharacter>
    while(passDigits<4) /*Make sure password is more than 3 digits*/
    {
           LCD_clearScreen();
    LCD_displayStringRowColumn(0, 0, "Enter PASS:");
    LCD_goToRowColumn(1, 0);
    for (passDigits = 0; passDigits < 10; passDigits++)
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	8a 30       	cpi	r24, 0x0A	; 10
    2906:	00 f3       	brcs	.-64     	; 0x28c8 <send_Password+0x36>

void send_Password(uint8 *pass)
{
    uint8 passDigits=0;
 
    while(passDigits<4) /*Make sure password is more than 3 digits*/
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	84 30       	cpi	r24, 0x04	; 4
    290c:	70 f2       	brcs	.-100    	; 0x28aa <send_Password+0x18>
            break;
        }
        LCD_displayCharacter('*');
    }
    }
    pass[passDigits] = '#';
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	9b 81       	ldd	r25, Y+3	; 0x03
    2918:	fc 01       	movw	r30, r24
    291a:	e2 0f       	add	r30, r18
    291c:	f3 1f       	adc	r31, r19
    291e:	83 e2       	ldi	r24, 0x23	; 35
    2920:	80 83       	st	Z, r24
    pass[passDigits + 1] = '\0';
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9c 01       	movw	r18, r24
    292a:	2f 5f       	subi	r18, 0xFF	; 255
    292c:	3f 4f       	sbci	r19, 0xFF	; 255
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	9b 81       	ldd	r25, Y+3	; 0x03
    2932:	fc 01       	movw	r30, r24
    2934:	e2 0f       	add	r30, r18
    2936:	f3 1f       	adc	r31, r19
    2938:	10 82       	st	Z, r1
    UART_sendString(pass);
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	0e 94 c5 11 	call	0x238a	; 0x238a <UART_sendString>
}
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	08 95       	ret

00002952 <opening_door>:

void opening_door()
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    LCD_clearScreen();
    295a:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_clearScreen>
    LCD_displayStringRowColumn(0, 0, "Opening Door");
    295e:	28 ec       	ldi	r18, 0xC8	; 200
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	a9 01       	movw	r20, r18
    2968:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
    Timer_1_delaySeconds(OPEN_DOOR_PERIOD);
    296c:	8a e0       	ldi	r24, 0x0A	; 10
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 ed 13 	call	0x27da	; 0x27da <Timer_1_delaySeconds>
}
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <set_password>:

void set_password(uint8 * Buffer)
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	00 d0       	rcall	.+0      	; 0x2980 <set_password+0x6>
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
LCD_clearScreen();
    2988:	0e 94 47 0b 	call	0x168e	; 0x168e <LCD_clearScreen>
                LCD_displayStringRowColumn(0, 0, "Setting Password");
    298c:	25 ed       	ldi	r18, 0xD5	; 213
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	a9 01       	movw	r20, r18
    2996:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
                Timer_1_delaySeconds(1);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 ed 13 	call	0x27da	; 0x27da <Timer_1_delaySeconds>
                send_Password(Buffer);
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	9a 81       	ldd	r25, Y+2	; 0x02
    29a6:	0e 94 49 14 	call	0x2892	; 0x2892 <send_Password>
                LCD_displayStringRowColumn(0, 0, "Password Set");
    29aa:	26 ee       	ldi	r18, 0xE6	; 230
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	a9 01       	movw	r20, r18
    29b4:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_displayStringRowColumn>
                Timer_1_delaySeconds(1);
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	0e 94 ed 13 	call	0x27da	; 0x27da <Timer_1_delaySeconds>
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <__udivmodsi4>:
    29ca:	a1 e2       	ldi	r26, 0x21	; 33
    29cc:	1a 2e       	mov	r1, r26
    29ce:	aa 1b       	sub	r26, r26
    29d0:	bb 1b       	sub	r27, r27
    29d2:	fd 01       	movw	r30, r26
    29d4:	0d c0       	rjmp	.+26     	; 0x29f0 <__udivmodsi4_ep>

000029d6 <__udivmodsi4_loop>:
    29d6:	aa 1f       	adc	r26, r26
    29d8:	bb 1f       	adc	r27, r27
    29da:	ee 1f       	adc	r30, r30
    29dc:	ff 1f       	adc	r31, r31
    29de:	a2 17       	cp	r26, r18
    29e0:	b3 07       	cpc	r27, r19
    29e2:	e4 07       	cpc	r30, r20
    29e4:	f5 07       	cpc	r31, r21
    29e6:	20 f0       	brcs	.+8      	; 0x29f0 <__udivmodsi4_ep>
    29e8:	a2 1b       	sub	r26, r18
    29ea:	b3 0b       	sbc	r27, r19
    29ec:	e4 0b       	sbc	r30, r20
    29ee:	f5 0b       	sbc	r31, r21

000029f0 <__udivmodsi4_ep>:
    29f0:	66 1f       	adc	r22, r22
    29f2:	77 1f       	adc	r23, r23
    29f4:	88 1f       	adc	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	1a 94       	dec	r1
    29fa:	69 f7       	brne	.-38     	; 0x29d6 <__udivmodsi4_loop>
    29fc:	60 95       	com	r22
    29fe:	70 95       	com	r23
    2a00:	80 95       	com	r24
    2a02:	90 95       	com	r25
    2a04:	9b 01       	movw	r18, r22
    2a06:	ac 01       	movw	r20, r24
    2a08:	bd 01       	movw	r22, r26
    2a0a:	cf 01       	movw	r24, r30
    2a0c:	08 95       	ret

00002a0e <__prologue_saves__>:
    2a0e:	2f 92       	push	r2
    2a10:	3f 92       	push	r3
    2a12:	4f 92       	push	r4
    2a14:	5f 92       	push	r5
    2a16:	6f 92       	push	r6
    2a18:	7f 92       	push	r7
    2a1a:	8f 92       	push	r8
    2a1c:	9f 92       	push	r9
    2a1e:	af 92       	push	r10
    2a20:	bf 92       	push	r11
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	ca 1b       	sub	r28, r26
    2a38:	db 0b       	sbc	r29, r27
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	0f be       	out	0x3f, r0	; 63
    2a42:	cd bf       	out	0x3d, r28	; 61
    2a44:	09 94       	ijmp

00002a46 <__epilogue_restores__>:
    2a46:	2a 88       	ldd	r2, Y+18	; 0x12
    2a48:	39 88       	ldd	r3, Y+17	; 0x11
    2a4a:	48 88       	ldd	r4, Y+16	; 0x10
    2a4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a50:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a52:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a54:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a56:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a58:	b9 84       	ldd	r11, Y+9	; 0x09
    2a5a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a5c:	df 80       	ldd	r13, Y+7	; 0x07
    2a5e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a60:	fd 80       	ldd	r15, Y+5	; 0x05
    2a62:	0c 81       	ldd	r16, Y+4	; 0x04
    2a64:	1b 81       	ldd	r17, Y+3	; 0x03
    2a66:	aa 81       	ldd	r26, Y+2	; 0x02
    2a68:	b9 81       	ldd	r27, Y+1	; 0x01
    2a6a:	ce 0f       	add	r28, r30
    2a6c:	d1 1d       	adc	r29, r1
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	ed 01       	movw	r28, r26
    2a7a:	08 95       	ret

00002a7c <itoa>:
    2a7c:	fb 01       	movw	r30, r22
    2a7e:	9f 01       	movw	r18, r30
    2a80:	e8 94       	clt
    2a82:	42 30       	cpi	r20, 0x02	; 2
    2a84:	c4 f0       	brlt	.+48     	; 0x2ab6 <itoa+0x3a>
    2a86:	45 32       	cpi	r20, 0x25	; 37
    2a88:	b4 f4       	brge	.+44     	; 0x2ab6 <itoa+0x3a>
    2a8a:	4a 30       	cpi	r20, 0x0A	; 10
    2a8c:	29 f4       	brne	.+10     	; 0x2a98 <itoa+0x1c>
    2a8e:	97 fb       	bst	r25, 7
    2a90:	1e f4       	brtc	.+6      	; 0x2a98 <itoa+0x1c>
    2a92:	90 95       	com	r25
    2a94:	81 95       	neg	r24
    2a96:	9f 4f       	sbci	r25, 0xFF	; 255
    2a98:	64 2f       	mov	r22, r20
    2a9a:	77 27       	eor	r23, r23
    2a9c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <__udivmodhi4>
    2aa0:	80 5d       	subi	r24, 0xD0	; 208
    2aa2:	8a 33       	cpi	r24, 0x3A	; 58
    2aa4:	0c f0       	brlt	.+2      	; 0x2aa8 <itoa+0x2c>
    2aa6:	89 5d       	subi	r24, 0xD9	; 217
    2aa8:	81 93       	st	Z+, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	a1 f7       	brne	.-24     	; 0x2a98 <itoa+0x1c>
    2ab0:	16 f4       	brtc	.+4      	; 0x2ab6 <itoa+0x3a>
    2ab2:	5d e2       	ldi	r21, 0x2D	; 45
    2ab4:	51 93       	st	Z+, r21
    2ab6:	10 82       	st	Z, r1
    2ab8:	c9 01       	movw	r24, r18
    2aba:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <strrev>

00002abe <strrev>:
    2abe:	dc 01       	movw	r26, r24
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	67 2f       	mov	r22, r23
    2ac4:	71 91       	ld	r23, Z+
    2ac6:	77 23       	and	r23, r23
    2ac8:	e1 f7       	brne	.-8      	; 0x2ac2 <strrev+0x4>
    2aca:	32 97       	sbiw	r30, 0x02	; 2
    2acc:	04 c0       	rjmp	.+8      	; 0x2ad6 <strrev+0x18>
    2ace:	7c 91       	ld	r23, X
    2ad0:	6d 93       	st	X+, r22
    2ad2:	70 83       	st	Z, r23
    2ad4:	62 91       	ld	r22, -Z
    2ad6:	ae 17       	cp	r26, r30
    2ad8:	bf 07       	cpc	r27, r31
    2ada:	c8 f3       	brcs	.-14     	; 0x2ace <strrev+0x10>
    2adc:	08 95       	ret

00002ade <__udivmodhi4>:
    2ade:	aa 1b       	sub	r26, r26
    2ae0:	bb 1b       	sub	r27, r27
    2ae2:	51 e1       	ldi	r21, 0x11	; 17
    2ae4:	07 c0       	rjmp	.+14     	; 0x2af4 <__udivmodhi4_ep>

00002ae6 <__udivmodhi4_loop>:
    2ae6:	aa 1f       	adc	r26, r26
    2ae8:	bb 1f       	adc	r27, r27
    2aea:	a6 17       	cp	r26, r22
    2aec:	b7 07       	cpc	r27, r23
    2aee:	10 f0       	brcs	.+4      	; 0x2af4 <__udivmodhi4_ep>
    2af0:	a6 1b       	sub	r26, r22
    2af2:	b7 0b       	sbc	r27, r23

00002af4 <__udivmodhi4_ep>:
    2af4:	88 1f       	adc	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	5a 95       	dec	r21
    2afa:	a9 f7       	brne	.-22     	; 0x2ae6 <__udivmodhi4_loop>
    2afc:	80 95       	com	r24
    2afe:	90 95       	com	r25
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	08 95       	ret

00002b06 <_exit>:
    2b06:	f8 94       	cli

00002b08 <__stop_program>:
    2b08:	ff cf       	rjmp	.-2      	; 0x2b08 <__stop_program>
