
FINAL_Proj_MC2_control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003780  00003814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800078  00800078  0000382c  2**0
                  ALLOC
  3 .stab         00004110  00000000  00000000  0000382c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000256f  00000000  00000000  0000793c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a15b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bda4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000da3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000db9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000de29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e5f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__vector_3>
      10:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__vector_4>
      14:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_5>
      18:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__vector_6>
      1c:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <__vector_7>
      20:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__vector_8>
      24:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__vector_11>
      30:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__vector_12>
      34:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__vector_13>
      38:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 19 	call	0x337a	; 0x337a <main>
      8a:	0c 94 be 1b 	jmp	0x377c	; 0x377c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_14>:
volatile uint16 g_adcResult;
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(ADC_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
    g_adcResult = ADC;
     b60:	e4 e2       	ldi	r30, 0x24	; 36
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	90 93 91 00 	sts	0x0091, r25
     b6c:	80 93 90 00 	sts	0x0090, r24
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <ADC_init>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void ADC_init(void)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
    /*  Description: ADMUX REGISTER
REFS1:0 =00 ->USE VOLTAGE AT AREF PIN
ADLAR =0 -> RIGHT ADJUST RESULT
MUX4:0 = 000000 USE CHANNEL 0 AS INITIALIZATION
*/
    ADMUX = 0;
     b8e:	e7 e2       	ldi	r30, 0x27	; 39
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	10 82       	st	Z, r1
ADIE = 1 INTERRUPT ENABLE (ENABLE)
ADATE = 0 AUTO TRIGER BIT (DISABLE)
ADEN = 1 ADC ENABLE BIT (ENABLE)
ADSC = 0 START CONVERSION BIT (DISABLE)
*/
    ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS1) | (1 << ADPS0);
     b94:	e6 e2       	ldi	r30, 0x26	; 38
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8b e8       	ldi	r24, 0x8B	; 139
     b9a:	80 83       	st	Z, r24
}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <ADC_readChannel>:
void ADC_readChannel(uint8 channel)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
REFS1:0 =00 ->USE VOLTAGE AT AREF PIN
ADLAR =0 -> RIGHT ADJUST RESULT
MUX4:0 = channel num
(Safely insert channel number)
*/
    ADMUX = (ADMUX & 0b11100000) | (channel & 0b00000111);
     bae:	a7 e2       	ldi	r26, 0x27	; 39
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e7 e2       	ldi	r30, 0x27	; 39
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	98 2f       	mov	r25, r24
     bba:	90 7e       	andi	r25, 0xE0	; 224
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	87 70       	andi	r24, 0x07	; 7
     bc0:	89 2b       	or	r24, r25
     bc2:	8c 93       	st	X, r24
    
/*  ADSC = 1 START CONVERSION BIT (ENABLE)
*/
    SET_BIT(ADCSRA,ADSC);
     bc4:	a6 e2       	ldi	r26, 0x26	; 38
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e6 e2       	ldi	r30, 0x26	; 38
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 64       	ori	r24, 0x40	; 64
     bd0:	8c 93       	st	X, r24
}
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <EEPROM_init>:
/*******************************************************************************
 *                               Function Definitions                                    *
 *******************************************************************************/

void EEPROM_init(void)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <EEPROM_init+0x6>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <EEPROM_init+0x8>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
    /*Init. the twi module*/
    TWI_ConfigType cfg = {EEPROM_TWI_BIT_RATE, EEPROM_TWI_PRE_SCALER, 0X01, GENERAL_CALL_OFF};
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	1a 82       	std	Y+2, r1	; 0x02
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8b 83       	std	Y+3, r24	; 0x03
     bf0:	1c 82       	std	Y+4, r1	; 0x04
    TWI_init(&cfg);
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 46 09 	call	0x128c	; 0x128c <TWI_init>
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <EEPROM_writeByte+0x6>
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <EEPROM_writeByte+0x8>
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	9a 83       	std	Y+2, r25	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	6b 83       	std	Y+3, r22	; 0x03
    /*send a start bit*/
    TWI_start();
     c1a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <TWI_start>

    /*check if start bit is successfully sent*/
    if (TWI_getStatus() != TW_START)
     c1e:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     c22:	88 30       	cpi	r24, 0x08	; 8
     c24:	11 f0       	breq	.+4      	; 0xc2a <EEPROM_writeByte+0x22>
        return ERROR;
     c26:	1c 82       	std	Y+4, r1	; 0x04
     c28:	28 c0       	rjmp	.+80     	; 0xc7a <EEPROM_writeByte+0x72>

    /*send address of eeprom along with 3 bits from memory address with a r/w bit of 0 to write*/
    TWI_write((uint8)(0xA0 | ((u16addr & 0x700) >> 7)));
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	80 70       	andi	r24, 0x00	; 0
     c30:	97 70       	andi	r25, 0x07	; 7
     c32:	88 0f       	add	r24, r24
     c34:	89 2f       	mov	r24, r25
     c36:	88 1f       	adc	r24, r24
     c38:	99 0b       	sbc	r25, r25
     c3a:	91 95       	neg	r25
     c3c:	80 6a       	ori	r24, 0xA0	; 160
     c3e:	0e 94 8c 09 	call	0x1318	; 0x1318 <TWI_write>

    /*make sure address is sent*/
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c42:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     c46:	88 31       	cpi	r24, 0x18	; 24
     c48:	11 f0       	breq	.+4      	; 0xc4e <EEPROM_writeByte+0x46>
        return ERROR;
     c4a:	1c 82       	std	Y+4, r1	; 0x04
     c4c:	16 c0       	rjmp	.+44     	; 0xc7a <EEPROM_writeByte+0x72>

    /*send rest of memory address to write into*/
    TWI_write((uint8)u16addr);
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	0e 94 8c 09 	call	0x1318	; 0x1318 <TWI_write>

    /*make sure address is sent*/
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c54:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     c58:	88 32       	cpi	r24, 0x28	; 40
     c5a:	11 f0       	breq	.+4      	; 0xc60 <EEPROM_writeByte+0x58>
        return ERROR;
     c5c:	1c 82       	std	Y+4, r1	; 0x04
     c5e:	0d c0       	rjmp	.+26     	; 0xc7a <EEPROM_writeByte+0x72>

    /*send our data to be written in the eeprom*/
    TWI_write(u8data);
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	0e 94 8c 09 	call	0x1318	; 0x1318 <TWI_write>

    /*make sure data is sent*/
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c66:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     c6a:	88 32       	cpi	r24, 0x28	; 40
     c6c:	11 f0       	breq	.+4      	; 0xc72 <EEPROM_writeByte+0x6a>
        return ERROR;
     c6e:	1c 82       	std	Y+4, r1	; 0x04
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <EEPROM_writeByte+0x72>

    /*send stop bit*/
    TWI_stop();
     c72:	0e 94 81 09 	call	0x1302	; 0x1302 <TWI_stop>

    return SUCCESS;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	8c 83       	std	Y+4, r24	; 0x04
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <EEPROM_readByte+0x6>
     c90:	00 d0       	rcall	.+0      	; 0xc92 <EEPROM_readByte+0x8>
     c92:	0f 92       	push	r0
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	7c 83       	std	Y+4, r23	; 0x04
     c9e:	6b 83       	std	Y+3, r22	; 0x03
    /*send a start bit*/
    TWI_start();
     ca0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <TWI_start>

    /*check if start bit is successfully sent*/
    if (TWI_getStatus() != TW_START)
     ca4:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     ca8:	88 30       	cpi	r24, 0x08	; 8
     caa:	11 f0       	breq	.+4      	; 0xcb0 <EEPROM_readByte+0x26>
        return ERROR;
     cac:	1d 82       	std	Y+5, r1	; 0x05
     cae:	44 c0       	rjmp	.+136    	; 0xd38 <EEPROM_readByte+0xae>

    /*send address of eeprom along with 3 bits from memory address with a r/w bit of 0 to write*/
    TWI_write((uint8)0xA0 | ((u16addr & 0x700) >> 7));
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	80 70       	andi	r24, 0x00	; 0
     cb6:	97 70       	andi	r25, 0x07	; 7
     cb8:	88 0f       	add	r24, r24
     cba:	89 2f       	mov	r24, r25
     cbc:	88 1f       	adc	r24, r24
     cbe:	99 0b       	sbc	r25, r25
     cc0:	91 95       	neg	r25
     cc2:	80 6a       	ori	r24, 0xA0	; 160
     cc4:	0e 94 8c 09 	call	0x1318	; 0x1318 <TWI_write>

    /*make sure address is sent*/
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     cc8:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     ccc:	88 31       	cpi	r24, 0x18	; 24
     cce:	11 f0       	breq	.+4      	; 0xcd4 <EEPROM_readByte+0x4a>
        return ERROR;
     cd0:	1d 82       	std	Y+5, r1	; 0x05
     cd2:	32 c0       	rjmp	.+100    	; 0xd38 <EEPROM_readByte+0xae>

    /*send rest of memory address to write into*/
    TWI_write((uint8)u16addr);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	0e 94 8c 09 	call	0x1318	; 0x1318 <TWI_write>

    /*make sure address is sent*/
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     cda:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     cde:	88 32       	cpi	r24, 0x28	; 40
     ce0:	11 f0       	breq	.+4      	; 0xce6 <EEPROM_readByte+0x5c>
        return ERROR;
     ce2:	1d 82       	std	Y+5, r1	; 0x05
     ce4:	29 c0       	rjmp	.+82     	; 0xd38 <EEPROM_readByte+0xae>

    /*send another start bit*/
    TWI_start();
     ce6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <TWI_start>

    /*check if repeated start bit is successfully sent*/
    if (TWI_getStatus() != TW_REP_START)
     cea:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     cee:	80 31       	cpi	r24, 0x10	; 16
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <EEPROM_readByte+0x6c>
        return ERROR;
     cf2:	1d 82       	std	Y+5, r1	; 0x05
     cf4:	21 c0       	rjmp	.+66     	; 0xd38 <EEPROM_readByte+0xae>

    /*send address of eeprom along with 3 bits from memory address with a r/w bit of 1 to read*/
    TWI_write((uint8)0xA0 | (((u16addr & 0x700) >> 7) | 1));
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	80 70       	andi	r24, 0x00	; 0
     cfc:	97 70       	andi	r25, 0x07	; 7
     cfe:	88 0f       	add	r24, r24
     d00:	89 2f       	mov	r24, r25
     d02:	88 1f       	adc	r24, r24
     d04:	99 0b       	sbc	r25, r25
     d06:	91 95       	neg	r25
     d08:	81 6a       	ori	r24, 0xA1	; 161
     d0a:	0e 94 8c 09 	call	0x1318	; 0x1318 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     d0e:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     d12:	80 34       	cpi	r24, 0x40	; 64
     d14:	11 f0       	breq	.+4      	; 0xd1a <EEPROM_readByte+0x90>
        return ERROR;
     d16:	1d 82       	std	Y+5, r1	; 0x05
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <EEPROM_readByte+0xae>

    /*read data and send Nack*/
    *u8data = TWI_readWithNack();
     d1a:	0e 94 b6 09 	call	0x136c	; 0x136c <TWI_readWithNack>
     d1e:	eb 81       	ldd	r30, Y+3	; 0x03
     d20:	fc 81       	ldd	r31, Y+4	; 0x04
     d22:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     d24:	0e 94 c9 09 	call	0x1392	; 0x1392 <TWI_getStatus>
     d28:	88 35       	cpi	r24, 0x58	; 88
     d2a:	11 f0       	breq	.+4      	; 0xd30 <EEPROM_readByte+0xa6>
        return ERROR;
     d2c:	1d 82       	std	Y+5, r1	; 0x05
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <EEPROM_readByte+0xae>

    /*send stop bit*/
    TWI_stop();
     d30:	0e 94 81 09 	call	0x1302	; 0x1302 <TWI_stop>

    return SUCCESS;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <EEPROM_writeString>:

uint8 EEPROM_writeString(uint16 u16addr,uint8* string)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	a3 97       	sbiw	r28, 0x23	; 35
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	98 a3       	std	Y+32, r25	; 0x20
     d60:	8f 8f       	std	Y+31, r24	; 0x1f
     d62:	7a a3       	std	Y+34, r23	; 0x22
     d64:	69 a3       	std	Y+33, r22	; 0x21
    uint16 i=0;
     d66:	1e 8e       	std	Y+30, r1	; 0x1e
     d68:	1d 8e       	std	Y+29, r1	; 0x1d
     d6a:	90 c0       	rjmp	.+288    	; 0xe8c <EEPROM_writeString+0x142>
    /*Write Each Byte of String untill we find a Null terminator*/
    while (string[i] != '\0')
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 e2       	ldi	r26, 0x20	; 32
     d72:	b1 e4       	ldi	r27, 0x41	; 65
     d74:	89 8f       	std	Y+25, r24	; 0x19
     d76:	9a 8f       	std	Y+26, r25	; 0x1a
     d78:	ab 8f       	std	Y+27, r26	; 0x1b
     d7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7c:	69 8d       	ldd	r22, Y+25	; 0x19
     d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	4a ef       	ldi	r20, 0xFA	; 250
     d8a:	54 e4       	ldi	r21, 0x44	; 68
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	8d 8b       	std	Y+21, r24	; 0x15
     d96:	9e 8b       	std	Y+22, r25	; 0x16
     d98:	af 8b       	std	Y+23, r26	; 0x17
     d9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d9c:	6d 89       	ldd	r22, Y+21	; 0x15
     d9e:	7e 89       	ldd	r23, Y+22	; 0x16
     da0:	8f 89       	ldd	r24, Y+23	; 0x17
     da2:	98 8d       	ldd	r25, Y+24	; 0x18
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db0:	88 23       	and	r24, r24
     db2:	2c f4       	brge	.+10     	; 0xdbe <EEPROM_writeString+0x74>
		__ticks = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9c 8b       	std	Y+20, r25	; 0x14
     dba:	8b 8b       	std	Y+19, r24	; 0x13
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <EEPROM_writeString+0xf2>
	else if (__tmp > 65535)
     dbe:	6d 89       	ldd	r22, Y+21	; 0x15
     dc0:	7e 89       	ldd	r23, Y+22	; 0x16
     dc2:	8f 89       	ldd	r24, Y+23	; 0x17
     dc4:	98 8d       	ldd	r25, Y+24	; 0x18
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	4f e7       	ldi	r20, 0x7F	; 127
     dcc:	57 e4       	ldi	r21, 0x47	; 71
     dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd2:	18 16       	cp	r1, r24
     dd4:	4c f5       	brge	.+82     	; 0xe28 <EEPROM_writeString+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd6:	69 8d       	ldd	r22, Y+25	; 0x19
     dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e2       	ldi	r20, 0x20	; 32
     de4:	51 e4       	ldi	r21, 0x41	; 65
     de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	9c 8b       	std	Y+20, r25	; 0x14
     dfc:	8b 8b       	std	Y+19, r24	; 0x13
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <EEPROM_writeString+0xd4>
     e00:	88 ec       	ldi	r24, 0xC8	; 200
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9a 8b       	std	Y+18, r25	; 0x12
     e06:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e08:	89 89       	ldd	r24, Y+17	; 0x11
     e0a:	9a 89       	ldd	r25, Y+18	; 0x12
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <EEPROM_writeString+0xc2>
     e10:	9a 8b       	std	Y+18, r25	; 0x12
     e12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e14:	8b 89       	ldd	r24, Y+19	; 0x13
     e16:	9c 89       	ldd	r25, Y+20	; 0x14
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	9c 8b       	std	Y+20, r25	; 0x14
     e1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1e:	8b 89       	ldd	r24, Y+19	; 0x13
     e20:	9c 89       	ldd	r25, Y+20	; 0x14
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	69 f7       	brne	.-38     	; 0xe00 <EEPROM_writeString+0xb6>
     e26:	14 c0       	rjmp	.+40     	; 0xe50 <EEPROM_writeString+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e28:	6d 89       	ldd	r22, Y+21	; 0x15
     e2a:	7e 89       	ldd	r23, Y+22	; 0x16
     e2c:	8f 89       	ldd	r24, Y+23	; 0x17
     e2e:	98 8d       	ldd	r25, Y+24	; 0x18
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9c 8b       	std	Y+20, r25	; 0x14
     e3a:	8b 8b       	std	Y+19, r24	; 0x13
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	9c 89       	ldd	r25, Y+20	; 0x14
     e40:	98 8b       	std	Y+16, r25	; 0x10
     e42:	8f 87       	std	Y+15, r24	; 0x0f
     e44:	8f 85       	ldd	r24, Y+15	; 0x0f
     e46:	98 89       	ldd	r25, Y+16	; 0x10
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <EEPROM_writeString+0xfe>
     e4c:	98 8b       	std	Y+16, r25	; 0x10
     e4e:	8f 87       	std	Y+15, r24	; 0x0f
    {
        _delay_ms(10);/*delay for processing*/
        if(EEPROM_writeByte(u16addr + i, string[i])==ERROR)
     e50:	2f 8d       	ldd	r18, Y+31	; 0x1f
     e52:	38 a1       	ldd	r19, Y+32	; 0x20
     e54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e56:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e58:	a9 01       	movw	r20, r18
     e5a:	48 0f       	add	r20, r24
     e5c:	59 1f       	adc	r21, r25
     e5e:	29 a1       	ldd	r18, Y+33	; 0x21
     e60:	3a a1       	ldd	r19, Y+34	; 0x22
     e62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e66:	f9 01       	movw	r30, r18
     e68:	e8 0f       	add	r30, r24
     e6a:	f9 1f       	adc	r31, r25
     e6c:	20 81       	ld	r18, Z
     e6e:	ca 01       	movw	r24, r20
     e70:	62 2f       	mov	r22, r18
     e72:	0e 94 04 06 	call	0xc08	; 0xc08 <EEPROM_writeByte>
     e76:	88 23       	and	r24, r24
     e78:	21 f4       	brne	.+8      	; 0xe82 <EEPROM_writeString+0x138>
        {
            return ERROR;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	8b a3       	std	Y+35, r24	; 0x23
        }
        i++;
    }
    _delay_ms(10);
    EEPROM_writeByte(u16addr + i, '#');/*insert a Hash in last Byte to endicate end of string*/
}
     e7e:	8b a1       	ldd	r24, Y+35	; 0x23
     e80:	8b c0       	rjmp	.+278    	; 0xf98 <EEPROM_writeString+0x24e>
        _delay_ms(10);/*delay for processing*/
        if(EEPROM_writeByte(u16addr + i, string[i])==ERROR)
        {
            return ERROR;
        }
        i++;
     e82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e84:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	9e 8f       	std	Y+30, r25	; 0x1e
     e8a:	8d 8f       	std	Y+29, r24	; 0x1d

uint8 EEPROM_writeString(uint16 u16addr,uint8* string)
{
    uint16 i=0;
    /*Write Each Byte of String untill we find a Null terminator*/
    while (string[i] != '\0')
     e8c:	29 a1       	ldd	r18, Y+33	; 0x21
     e8e:	3a a1       	ldd	r19, Y+34	; 0x22
     e90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e92:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e94:	f9 01       	movw	r30, r18
     e96:	e8 0f       	add	r30, r24
     e98:	f9 1f       	adc	r31, r25
     e9a:	80 81       	ld	r24, Z
     e9c:	88 23       	and	r24, r24
     e9e:	09 f0       	breq	.+2      	; 0xea2 <EEPROM_writeString+0x158>
     ea0:	65 cf       	rjmp	.-310    	; 0xd6c <EEPROM_writeString+0x22>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 e2       	ldi	r26, 0x20	; 32
     ea8:	b1 e4       	ldi	r27, 0x41	; 65
     eaa:	8b 87       	std	Y+11, r24	; 0x0b
     eac:	9c 87       	std	Y+12, r25	; 0x0c
     eae:	ad 87       	std	Y+13, r26	; 0x0d
     eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	4a ef       	ldi	r20, 0xFA	; 250
     ec0:	54 e4       	ldi	r21, 0x44	; 68
     ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	8f 83       	std	Y+7, r24	; 0x07
     ecc:	98 87       	std	Y+8, r25	; 0x08
     ece:	a9 87       	std	Y+9, r26	; 0x09
     ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed2:	6f 81       	ldd	r22, Y+7	; 0x07
     ed4:	78 85       	ldd	r23, Y+8	; 0x08
     ed6:	89 85       	ldd	r24, Y+9	; 0x09
     ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e8       	ldi	r20, 0x80	; 128
     ee0:	5f e3       	ldi	r21, 0x3F	; 63
     ee2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee6:	88 23       	and	r24, r24
     ee8:	2c f4       	brge	.+10     	; 0xef4 <EEPROM_writeString+0x1aa>
		__ticks = 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
     ef2:	3f c0       	rjmp	.+126    	; 0xf72 <EEPROM_writeString+0x228>
	else if (__tmp > 65535)
     ef4:	6f 81       	ldd	r22, Y+7	; 0x07
     ef6:	78 85       	ldd	r23, Y+8	; 0x08
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	3f ef       	ldi	r19, 0xFF	; 255
     f00:	4f e7       	ldi	r20, 0x7F	; 127
     f02:	57 e4       	ldi	r21, 0x47	; 71
     f04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f08:	18 16       	cp	r1, r24
     f0a:	4c f5       	brge	.+82     	; 0xf5e <EEPROM_writeString+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f10:	8d 85       	ldd	r24, Y+13	; 0x0d
     f12:	9e 85       	ldd	r25, Y+14	; 0x0e
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e2       	ldi	r20, 0x20	; 32
     f1a:	51 e4       	ldi	r21, 0x41	; 65
     f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	0f c0       	rjmp	.+30     	; 0xf54 <EEPROM_writeString+0x20a>
     f36:	88 ec       	ldi	r24, 0xC8	; 200
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9c 83       	std	Y+4, r25	; 0x04
     f3c:	8b 83       	std	Y+3, r24	; 0x03
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <EEPROM_writeString+0x1f8>
     f46:	9c 83       	std	Y+4, r25	; 0x04
     f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	9e 83       	std	Y+6, r25	; 0x06
     f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	69 f7       	brne	.-38     	; 0xf36 <EEPROM_writeString+0x1ec>
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <EEPROM_writeString+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5e:	6f 81       	ldd	r22, Y+7	; 0x07
     f60:	78 85       	ldd	r23, Y+8	; 0x08
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9e 83       	std	Y+6, r25	; 0x06
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <EEPROM_writeString+0x234>
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
            return ERROR;
        }
        i++;
    }
    _delay_ms(10);
    EEPROM_writeByte(u16addr + i, '#');/*insert a Hash in last Byte to endicate end of string*/
     f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f88:	98 a1       	ldd	r25, Y+32	; 0x20
     f8a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     f8c:	3e 8d       	ldd	r19, Y+30	; 0x1e
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	63 e2       	ldi	r22, 0x23	; 35
     f94:	0e 94 04 06 	call	0xc08	; 0xc08 <EEPROM_writeByte>
}
     f98:	a3 96       	adiw	r28, 0x23	; 35
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <EEPROM_readString>:

uint8 EEPROM_readString(uint16 u16addr,uint8* string)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	a3 97       	sbiw	r28, 0x23	; 35
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	98 a3       	std	Y+32, r25	; 0x20
     fc0:	8f 8f       	std	Y+31, r24	; 0x1f
     fc2:	7a a3       	std	Y+34, r23	; 0x22
     fc4:	69 a3       	std	Y+33, r22	; 0x21
    uint16 i = 0;
     fc6:	1e 8e       	std	Y+30, r1	; 0x1e
     fc8:	1d 8e       	std	Y+29, r1	; 0x1d
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e2       	ldi	r26, 0x20	; 32
     fd0:	b1 e4       	ldi	r27, 0x41	; 65
     fd2:	89 8f       	std	Y+25, r24	; 0x19
     fd4:	9a 8f       	std	Y+26, r25	; 0x1a
     fd6:	ab 8f       	std	Y+27, r26	; 0x1b
     fd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fda:	69 8d       	ldd	r22, Y+25	; 0x19
     fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a ef       	ldi	r20, 0xFA	; 250
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8d 8b       	std	Y+21, r24	; 0x15
     ff4:	9e 8b       	std	Y+22, r25	; 0x16
     ff6:	af 8b       	std	Y+23, r26	; 0x17
     ff8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ffa:	6d 89       	ldd	r22, Y+21	; 0x15
     ffc:	7e 89       	ldd	r23, Y+22	; 0x16
     ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    1000:	98 8d       	ldd	r25, Y+24	; 0x18
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <EEPROM_readString+0x72>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	3f c0       	rjmp	.+126    	; 0x109a <EEPROM_readString+0xf0>
	else if (__tmp > 65535)
    101c:	6d 89       	ldd	r22, Y+21	; 0x15
    101e:	7e 89       	ldd	r23, Y+22	; 0x16
    1020:	8f 89       	ldd	r24, Y+23	; 0x17
    1022:	98 8d       	ldd	r25, Y+24	; 0x18
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <EEPROM_readString+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	69 8d       	ldd	r22, Y+25	; 0x19
    1036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    103a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9c 8b       	std	Y+20, r25	; 0x14
    105a:	8b 8b       	std	Y+19, r24	; 0x13
    105c:	0f c0       	rjmp	.+30     	; 0x107c <EEPROM_readString+0xd2>
    105e:	88 ec       	ldi	r24, 0xC8	; 200
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9a 8b       	std	Y+18, r25	; 0x12
    1064:	89 8b       	std	Y+17, r24	; 0x11
    1066:	89 89       	ldd	r24, Y+17	; 0x11
    1068:	9a 89       	ldd	r25, Y+18	; 0x12
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <EEPROM_readString+0xc0>
    106e:	9a 8b       	std	Y+18, r25	; 0x12
    1070:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	8b 89       	ldd	r24, Y+19	; 0x13
    1074:	9c 89       	ldd	r25, Y+20	; 0x14
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9c 8b       	std	Y+20, r25	; 0x14
    107a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	8b 89       	ldd	r24, Y+19	; 0x13
    107e:	9c 89       	ldd	r25, Y+20	; 0x14
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <EEPROM_readString+0xb4>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <EEPROM_readString+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	6d 89       	ldd	r22, Y+21	; 0x15
    1088:	7e 89       	ldd	r23, Y+22	; 0x16
    108a:	8f 89       	ldd	r24, Y+23	; 0x17
    108c:	98 8d       	ldd	r25, Y+24	; 0x18
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9c 8b       	std	Y+20, r25	; 0x14
    1098:	8b 8b       	std	Y+19, r24	; 0x13
    109a:	8b 89       	ldd	r24, Y+19	; 0x13
    109c:	9c 89       	ldd	r25, Y+20	; 0x14
    109e:	98 8b       	std	Y+16, r25	; 0x10
    10a0:	8f 87       	std	Y+15, r24	; 0x0f
    10a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a4:	98 89       	ldd	r25, Y+16	; 0x10
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <EEPROM_readString+0xfc>
    10aa:	98 8b       	std	Y+16, r25	; 0x10
    10ac:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    /*READ Each Byte of String untill we find a Hash*/
    EEPROM_readByte(u16addr + i, string + i);
    10ae:	2f 8d       	ldd	r18, Y+31	; 0x1f
    10b0:	38 a1       	ldd	r19, Y+32	; 0x20
    10b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10b6:	a9 01       	movw	r20, r18
    10b8:	48 0f       	add	r20, r24
    10ba:	59 1f       	adc	r21, r25
    10bc:	29 a1       	ldd	r18, Y+33	; 0x21
    10be:	3a a1       	ldd	r19, Y+34	; 0x22
    10c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c4:	28 0f       	add	r18, r24
    10c6:	39 1f       	adc	r19, r25
    10c8:	ca 01       	movw	r24, r20
    10ca:	b9 01       	movw	r22, r18
    10cc:	0e 94 45 06 	call	0xc8a	; 0xc8a <EEPROM_readByte>
    10d0:	8e c0       	rjmp	.+284    	; 0x11ee <EEPROM_readString+0x244>
    while (string[i] != '#')
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 e2       	ldi	r26, 0x20	; 32
    10d8:	b1 e4       	ldi	r27, 0x41	; 65
    10da:	8b 87       	std	Y+11, r24	; 0x0b
    10dc:	9c 87       	std	Y+12, r25	; 0x0c
    10de:	ad 87       	std	Y+13, r26	; 0x0d
    10e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	4a ef       	ldi	r20, 0xFA	; 250
    10f0:	54 e4       	ldi	r21, 0x44	; 68
    10f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	8f 83       	std	Y+7, r24	; 0x07
    10fc:	98 87       	std	Y+8, r25	; 0x08
    10fe:	a9 87       	std	Y+9, r26	; 0x09
    1100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1102:	6f 81       	ldd	r22, Y+7	; 0x07
    1104:	78 85       	ldd	r23, Y+8	; 0x08
    1106:	89 85       	ldd	r24, Y+9	; 0x09
    1108:	9a 85       	ldd	r25, Y+10	; 0x0a
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1116:	88 23       	and	r24, r24
    1118:	2c f4       	brge	.+10     	; 0x1124 <EEPROM_readString+0x17a>
		__ticks = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	3f c0       	rjmp	.+126    	; 0x11a2 <EEPROM_readString+0x1f8>
	else if (__tmp > 65535)
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	3f ef       	ldi	r19, 0xFF	; 255
    1130:	4f e7       	ldi	r20, 0x7F	; 127
    1132:	57 e4       	ldi	r21, 0x47	; 71
    1134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1138:	18 16       	cp	r1, r24
    113a:	4c f5       	brge	.+82     	; 0x118e <EEPROM_readString+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113c:	6b 85       	ldd	r22, Y+11	; 0x0b
    113e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1140:	8d 85       	ldd	r24, Y+13	; 0x0d
    1142:	9e 85       	ldd	r25, Y+14	; 0x0e
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e2       	ldi	r20, 0x20	; 32
    114a:	51 e4       	ldi	r21, 0x41	; 65
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <EEPROM_readString+0x1da>
    1166:	88 ec       	ldi	r24, 0xC8	; 200
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <EEPROM_readString+0x1c8>
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	69 f7       	brne	.-38     	; 0x1166 <EEPROM_readString+0x1bc>
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <EEPROM_readString+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <EEPROM_readString+0x204>
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
    {
        _delay_ms(10);
        i++;
    11b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	9e 8f       	std	Y+30, r25	; 0x1e
    11be:	8d 8f       	std	Y+29, r24	; 0x1d
        if(EEPROM_readByte(u16addr + i, string + i)==ERROR)
    11c0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    11c2:	38 a1       	ldd	r19, Y+32	; 0x20
    11c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11c8:	a9 01       	movw	r20, r18
    11ca:	48 0f       	add	r20, r24
    11cc:	59 1f       	adc	r21, r25
    11ce:	29 a1       	ldd	r18, Y+33	; 0x21
    11d0:	3a a1       	ldd	r19, Y+34	; 0x22
    11d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11d6:	28 0f       	add	r18, r24
    11d8:	39 1f       	adc	r19, r25
    11da:	ca 01       	movw	r24, r20
    11dc:	b9 01       	movw	r22, r18
    11de:	0e 94 45 06 	call	0xc8a	; 0xc8a <EEPROM_readByte>
    11e2:	88 23       	and	r24, r24
    11e4:	21 f4       	brne	.+8      	; 0x11ee <EEPROM_readString+0x244>
        {return ERROR;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	8b a3       	std	Y+35, r24	; 0x23
        }
    }
    /*Replace hach with null Terminator*/
    string[i] = '\0';
}
    11ea:	8b a1       	ldd	r24, Y+35	; 0x23
    11ec:	13 c0       	rjmp	.+38     	; 0x1214 <EEPROM_readString+0x26a>
{
    uint16 i = 0;
    _delay_ms(10);
    /*READ Each Byte of String untill we find a Hash*/
    EEPROM_readByte(u16addr + i, string + i);
    while (string[i] != '#')
    11ee:	29 a1       	ldd	r18, Y+33	; 0x21
    11f0:	3a a1       	ldd	r19, Y+34	; 0x22
    11f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11f6:	f9 01       	movw	r30, r18
    11f8:	e8 0f       	add	r30, r24
    11fa:	f9 1f       	adc	r31, r25
    11fc:	80 81       	ld	r24, Z
    11fe:	83 32       	cpi	r24, 0x23	; 35
    1200:	09 f0       	breq	.+2      	; 0x1204 <EEPROM_readString+0x25a>
    1202:	67 cf       	rjmp	.-306    	; 0x10d2 <EEPROM_readString+0x128>
        if(EEPROM_readByte(u16addr + i, string + i)==ERROR)
        {return ERROR;
        }
    }
    /*Replace hach with null Terminator*/
    string[i] = '\0';
    1204:	89 a1       	ldd	r24, Y+33	; 0x21
    1206:	9a a1       	ldd	r25, Y+34	; 0x22
    1208:	2d 8d       	ldd	r18, Y+29	; 0x1d
    120a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    120c:	fc 01       	movw	r30, r24
    120e:	e2 0f       	add	r30, r18
    1210:	f3 1f       	adc	r31, r19
    1212:	10 82       	st	Z, r1
}
    1214:	a3 96       	adiw	r28, 0x23	; 35
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <__vector_17>:
/*******************************************************************************
 *                      ISR                                  *
 *******************************************************************************/

ISR(TWI_vect)
{
    1226:	1f 92       	push	r1
    1228:	0f 92       	push	r0
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	0f 92       	push	r0
    122e:	11 24       	eor	r1, r1
    1230:	2f 93       	push	r18
    1232:	3f 93       	push	r19
    1234:	4f 93       	push	r20
    1236:	5f 93       	push	r21
    1238:	6f 93       	push	r22
    123a:	7f 93       	push	r23
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	af 93       	push	r26
    1242:	bf 93       	push	r27
    1244:	ef 93       	push	r30
    1246:	ff 93       	push	r31
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    if (g_TWI_callBackPtr != NULL_PTR)
    1250:	80 91 78 00 	lds	r24, 0x0078
    1254:	90 91 79 00 	lds	r25, 0x0079
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	29 f0       	breq	.+10     	; 0x1266 <__vector_17+0x40>
    {
        (*g_TWI_callBackPtr)();
    125c:	e0 91 78 00 	lds	r30, 0x0078
    1260:	f0 91 79 00 	lds	r31, 0x0079
    1264:	09 95       	icall
    }
}
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <TWI_init>:
 *                      Function Definitions                                  *
 *******************************************************************************/

/*Initialize TWI with input config.*/
void TWI_init(TWI_ConfigType * cfg_ptr)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <TWI_init+0x6>
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	89 83       	std	Y+1, r24	; 0x01
  /*insert bit-rate value into twr
    */
  TWBR = cfg_ptr->bit_rate;
    129a:	a0 e2       	ldi	r26, 0x20	; 32
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	80 81       	ld	r24, Z
    12a4:	8c 93       	st	X, r24

  /*set prescaler in the first 2-bits of twsr*/
  TWSR = cfg_ptr->prescaler;
    12a6:	a1 e2       	ldi	r26, 0x21	; 33
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e9 81       	ldd	r30, Y+1	; 0x01
    12ac:	fa 81       	ldd	r31, Y+2	; 0x02
    12ae:	81 81       	ldd	r24, Z+1	; 0x01
    12b0:	8c 93       	st	X, r24

  /*
    set slave address in case of slave mode
    and set general call recognition value
    */
  TWAR = (cfg_ptr->slave_address << 1) | cfg_ptr->general_call;
    12b2:	a2 e2       	ldi	r26, 0x22	; 34
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e9 81       	ldd	r30, Y+1	; 0x01
    12b8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	98 2f       	mov	r25, r24
    12c6:	e9 81       	ldd	r30, Y+1	; 0x01
    12c8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ca:	83 81       	ldd	r24, Z+3	; 0x03
    12cc:	89 2b       	or	r24, r25
    12ce:	8c 93       	st	X, r24

  /* enable TWI  */
  TWCR = (1 << TWEN);
    12d0:	e6 e5       	ldi	r30, 0x56	; 86
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	84 e0       	ldi	r24, 0x04	; 4
    12d6:	80 83       	st	Z, r24
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <TWI_start>:
void TWI_start(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
  /*
    Clear interrupt flag (TWINT=1)
    Enable start bit condotion (TWSTA=1)
    Enable TWI (TWEN=1)
    */
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    12ea:	e6 e5       	ldi	r30, 0x56	; 86
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	84 ea       	ldi	r24, 0xA4	; 164
    12f0:	80 83       	st	Z, r24
  /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
  while (BIT_IS_CLEAR(TWCR, TWINT))
    12f2:	e6 e5       	ldi	r30, 0x56	; 86
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	88 23       	and	r24, r24
    12fa:	dc f7       	brge	.-10     	; 0x12f2 <TWI_start+0x10>
    ;
}
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <TWI_stop>:
void TWI_stop(void)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
  /*
    Clear interrupt flag (TWINT=1)
    Enable stop bit condition (TWSTO=1)
    Enable TWI (TWEN=1)
    */
  TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    130a:	e6 e5       	ldi	r30, 0x56	; 86
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	84 e9       	ldi	r24, 0x94	; 148
    1310:	80 83       	st	Z, r24
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <TWI_write>:
void TWI_write(uint8 data)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
  /*insert data in data register to be sent */
  TWDR = data;
    1324:	e3 e2       	ldi	r30, 0x23	; 35
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	80 83       	st	Z, r24
  /*
    Clear interrupt flag (TWINT=1)
    Enable TWI (TWEN=1)
    */
  TWCR = (1 << TWINT) | (1 << TWEN);
    132c:	e6 e5       	ldi	r30, 0x56	; 86
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	84 e8       	ldi	r24, 0x84	; 132
    1332:	80 83       	st	Z, r24
  /*wait untill interrupt flag is set
    indicating data is successfully sent*/
  while (BIT_IS_CLEAR(TWCR, TWINT))
    1334:	e6 e5       	ldi	r30, 0x56	; 86
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 23       	and	r24, r24
    133c:	dc f7       	brge	.-10     	; 0x1334 <TWI_write+0x1c>
    ;
}
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <TWI_readWithAck>:
uint8 TWI_readWithAck()
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
  /*
    Clear interrupt flag (TWINT=1)
    Enable TWI (TWEN=1)
    Enable Acknowledgement bit (TWEA=1)
    */
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    134e:	e6 e5       	ldi	r30, 0x56	; 86
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	84 ec       	ldi	r24, 0xC4	; 196
    1354:	80 83       	st	Z, r24
  /*wait untill interrupt flag is set
    indicating data is uccessfully recieved*/
  while (BIT_IS_CLEAR(TWCR, TWINT))
    1356:	e6 e5       	ldi	r30, 0x56	; 86
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	88 23       	and	r24, r24
    135e:	dc f7       	brge	.-10     	; 0x1356 <TWI_readWithAck+0x10>
    ;
  return TWDR;
    1360:	e3 e2       	ldi	r30, 0x23	; 35
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <TWI_readWithNack>:
uint8 TWI_readWithNack(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
  /*
    Clear interrupt flag (TWINT=1)
    Enable TWI (TWEN=1)
    This time we disable Acknowledgement bit (TWEA=0)
    */
  TWCR = (1 << TWINT) | (1 << TWEN);
    1374:	e6 e5       	ldi	r30, 0x56	; 86
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	84 e8       	ldi	r24, 0x84	; 132
    137a:	80 83       	st	Z, r24
  /*wait untill interrupt flag is set
    indicating data is uccessfully recieved*/
  while (BIT_IS_CLEAR(TWCR, TWINT))
    137c:	e6 e5       	ldi	r30, 0x56	; 86
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	88 23       	and	r24, r24
    1384:	dc f7       	brge	.-10     	; 0x137c <TWI_readWithNack+0x10>
    ;
  return TWDR;
    1386:	e3 e2       	ldi	r30, 0x23	; 35
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
}
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <TWI_getStatus>:
uint8 TWI_getStatus()
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
  /*RETURN MASKED STATUS REG.*/
  return (TWSR & 0XF8);
    139a:	e1 e2       	ldi	r30, 0x21	; 33
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	88 7f       	andi	r24, 0xF8	; 248
}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <TWI_enableInterrupt>:

void TWI_enableInterrupt(void)
 /*interrupt will activate in case of TWINT flag is high*/
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
  /*set TWI interrupt enable bit*/
SET_BIT(TWCR,TWIE);
    13b0:	a6 e5       	ldi	r26, 0x56	; 86
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e6 e5       	ldi	r30, 0x56	; 86
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	8c 93       	st	X, r24
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <TWI_disableInterrupt>:
void TWI_disableInterrupt(void)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62

  /*clear TWI interrupt enable bit*/
CLEAR_BIT(TWCR,TWIE);
    13cc:	a6 e5       	ldi	r26, 0x56	; 86
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e6 e5       	ldi	r30, 0x56	; 86
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	8c 93       	st	X, r24
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <TWI_setCallback>:

void TWI_setCallback(void (*f_ptr)(void))
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <TWI_setCallback+0x6>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
  
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <__vector_5>:
/*                  Global Variables        */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/*                  Interrupt Service Routines        */
ISR(TIMER1_CAPT_vect)
{
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr != NULL_PTR)
    1422:	80 91 7a 00 	lds	r24, 0x007A
    1426:	90 91 7b 00 	lds	r25, 0x007B
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	29 f0       	breq	.+10     	; 0x1438 <__vector_5+0x40>
    {
        (*g_callBackPtr)();
    142e:	e0 91 7a 00 	lds	r30, 0x007A
    1432:	f0 91 7b 00 	lds	r31, 0x007B
    1436:	09 95       	icall
    }
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	ff 91       	pop	r31
    143e:	ef 91       	pop	r30
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <Icu_init>:

/*Initializing icu with timer1 in normal mode*/

void Icu_init(const Icu_ConfigType * cfg_ptr)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <Icu_init+0x6>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	89 83       	std	Y+1, r24	; 0x01
    /*set PD6 as input*/
	DDRD &= ~(1<<PD6);
    146c:	a1 e3       	ldi	r26, 0x31	; 49
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e1 e3       	ldi	r30, 0x31	; 49
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8f 7b       	andi	r24, 0xBF	; 191
    1478:	8c 93       	st	X, r24

    /*Config timer1 in normal mode and set FOC1A/B for 
specifying a non-pwm mode
*/
    TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    147a:	ef e4       	ldi	r30, 0x4F	; 79
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8c e0       	ldi	r24, 0x0C	; 12
    1480:	80 83       	st	Z, r24

    /*insert clock prescalar value in first 3 bits and clear all other bits*/
    TCCR1B =(TCCR1B & 0XF8) | (cfg_ptr->clock);
    1482:	ae e4       	ldi	r26, 0x4E	; 78
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ee e4       	ldi	r30, 0x4E	; 78
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	98 2f       	mov	r25, r24
    148e:	98 7f       	andi	r25, 0xF8	; 248
    1490:	e9 81       	ldd	r30, Y+1	; 0x01
    1492:	fa 81       	ldd	r31, Y+2	; 0x02
    1494:	80 81       	ld	r24, Z
    1496:	89 2b       	or	r24, r25
    1498:	8c 93       	st	X, r24

    /*insert edge mode value in 6th bit*/
    TCCR1B = (TCCR1B & 0XBF) | ((cfg_ptr->edge) << 6);
    149a:	ae e4       	ldi	r26, 0x4E	; 78
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ee e4       	ldi	r30, 0x4E	; 78
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	28 2f       	mov	r18, r24
    14a6:	2f 7b       	andi	r18, 0xBF	; 191
    14a8:	e9 81       	ldd	r30, Y+1	; 0x01
    14aa:	fa 81       	ldd	r31, Y+2	; 0x02
    14ac:	81 81       	ldd	r24, Z+1	; 0x01
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	00 24       	eor	r0, r0
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	07 94       	ror	r0
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	07 94       	ror	r0
    14c0:	98 2f       	mov	r25, r24
    14c2:	80 2d       	mov	r24, r0
    14c4:	82 2b       	or	r24, r18
    14c6:	8c 93       	st	X, r24


    /*INIT timer counter valuse as 0*/
    TCNT1 = 0;
    14c8:	ec e4       	ldi	r30, 0x4C	; 76
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	11 82       	std	Z+1, r1	; 0x01
    14ce:	10 82       	st	Z, r1

    /*ICU counter valuse as 0*/
    ICR1 = 0;
    14d0:	e6 e4       	ldi	r30, 0x46	; 70
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	11 82       	std	Z+1, r1	; 0x01
    14d6:	10 82       	st	Z, r1
    /*Enable interrupt for ICU on PD6*/
    TIMSK |= (1 << TICIE1);
    14d8:	a9 e5       	ldi	r26, 0x59	; 89
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e9 e5       	ldi	r30, 0x59	; 89
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 62       	ori	r24, 0x20	; 32
    14e4:	8c 93       	st	X, r24
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <Icu_setCallBack>:
void Icu_setCallBack(void(*f_ptr)(void))
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <Icu_setCallBack+0x6>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    g_callBackPtr = f_ptr;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	90 93 7b 00 	sts	0x007B, r25
    1506:	80 93 7a 00 	sts	0x007A, r24
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <Icu_setEdgeDetectionType>:

void Icu_setEdgeDetectionType(const Icu_EdgeType a_cfg_edge)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01

    /*insert edge mode value in 6th bit*/
    TCCR1B = (TCCR1B & 0XBF) | (a_cfg_edge << 6);
    1520:	ae e4       	ldi	r26, 0x4E	; 78
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ee e4       	ldi	r30, 0x4E	; 78
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	28 2f       	mov	r18, r24
    152c:	2f 7b       	andi	r18, 0xBF	; 191
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	00 24       	eor	r0, r0
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	07 94       	ror	r0
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	07 94       	ror	r0
    1542:	98 2f       	mov	r25, r24
    1544:	80 2d       	mov	r24, r0
    1546:	82 2b       	or	r24, r18
    1548:	8c 93       	st	X, r24
}
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <Icu_getInputCaptureValue>:
uint16 Icu_getInputCaptureValue(void)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    155a:	e6 e4       	ldi	r30, 0x46	; 70
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <Icu_clearTimerValue>:
void Icu_clearTimerValue(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    /*Reset timer counter value TO 0*/
    TCNT1 = 0;
    1570:	ec e4       	ldi	r30, 0x4C	; 76
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	11 82       	std	Z+1, r1	; 0x01
    1576:	10 82       	st	Z, r1
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <Icu_deInit>:
void Icu_deInit(void)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    /*Reset all timer1 registers*/
    TCCR1A = 0;
    1586:	ef e4       	ldi	r30, 0x4F	; 79
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	10 82       	st	Z, r1
    TCCR1B = 0;
    158c:	ee e4       	ldi	r30, 0x4E	; 78
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	10 82       	st	Z, r1
    TCNT1 = 0;
    1592:	ec e4       	ldi	r30, 0x4C	; 76
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	11 82       	std	Z+1, r1	; 0x01
    1598:	10 82       	st	Z, r1
    ICR1 = 0;
    159a:	e6 e4       	ldi	r30, 0x46	; 70
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	11 82       	std	Z+1, r1	; 0x01
    15a0:	10 82       	st	Z, r1

    /*Clear interrupt flag for the icu*/
    CLEAR_BIT(TIMSK, TICIE1);
    15a2:	a9 e5       	ldi	r26, 0x59	; 89
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e9 e5       	ldi	r30, 0x59	; 89
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 7d       	andi	r24, 0xDF	; 223
    15ae:	8c 93       	st	X, r24
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <Keypad_getPressedKey>:

static uint8 Keypad_4x4_adjustSwitchNumber(uint8 num);
#endif

uint8 Keypad_getPressedKey(void)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <Keypad_getPressedKey+0x6>
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    uint8 row, col;
    while (1)
    {

        for (col = 0; col < KEYPAD_COLS; col++)
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	66 c0       	rjmp	.+204    	; 0x1690 <Keypad_getPressedKey+0xda>
        {
            /*config direction in for all ports except column number to be out in our port*/
              KEYPAD_DIR = (1<<4+col);
    15c4:	ea e3       	ldi	r30, 0x3A	; 58
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c 01       	movw	r18, r24
    15d0:	2c 5f       	subi	r18, 0xFC	; 252
    15d2:	3f 4f       	sbci	r19, 0xFF	; 255
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <Keypad_getPressedKey+0x28>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	2a 95       	dec	r18
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <Keypad_getPressedKey+0x24>
    15e2:	80 83       	st	Z, r24
              /*make output zero on our column and enable internal pullups for all input ports which are rows*/
              KEYPAD_OUT = ~(1 << 4 + col);
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9c 01       	movw	r18, r24
    15f0:	2c 5f       	subi	r18, 0xFC	; 252
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <Keypad_getPressedKey+0x4a>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <Keypad_getPressedKey+0x46>
    1604:	80 95       	com	r24
    1606:	80 83       	st	Z, r24
              for (row = 0; row < KEYPAD_ROWS; row++)
    1608:	1a 82       	std	Y+2, r1	; 0x02
    160a:	3b c0       	rjmp	.+118    	; 0x1682 <Keypad_getPressedKey+0xcc>
              {
                  /*
              check if bit of our row is zero which means key is pressed, and return the adjusted key number
              */
                  if (BIT_IS_CLEAR(KEYPAD_IN, row))
    160c:	e9 e3       	ldi	r30, 0x39	; 57
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <Keypad_getPressedKey+0x6e>
    1620:	55 95       	asr	r21
    1622:	47 95       	ror	r20
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <Keypad_getPressedKey+0x6a>
    1628:	ca 01       	movw	r24, r20
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	90 70       	andi	r25, 0x00	; 0
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	29 f5       	brne	.+74     	; 0x167c <Keypad_getPressedKey+0xc6>
                  {
                      while(BIT_IS_CLEAR(KEYPAD_IN, row));
    1632:	e9 e3       	ldi	r30, 0x39	; 57
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a9 01       	movw	r20, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <Keypad_getPressedKey+0x94>
    1646:	55 95       	asr	r21
    1648:	47 95       	ror	r20
    164a:	8a 95       	dec	r24
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <Keypad_getPressedKey+0x90>
    164e:	ca 01       	movw	r24, r20
    1650:	81 70       	andi	r24, 0x01	; 1
    1652:	90 70       	andi	r25, 0x00	; 0
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	69 f3       	breq	.-38     	; 0x1632 <Keypad_getPressedKey+0x7c>
#if (KEYPAD_COLS == 3)
                      return Keypad_4x3_adjustSwitchNumber(row * KEYPAD_COLS + col + 1);
#elif (KEYPAD_COLS == 4)
                      return Keypad_4x4_adjustSwitchNumber(row * KEYPAD_COLS + col + 1);
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	98 2f       	mov	r25, r24
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	89 0f       	add	r24, r25
    166c:	8f 5f       	subi	r24, 0xFF	; 255
    166e:	0e 94 4d 0b 	call	0x169a	; 0x169a <Keypad_4x4_adjustSwitchNumber>
#endif
                  }
              }
        }
    }
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret
        {
            /*config direction in for all ports except column number to be out in our port*/
              KEYPAD_DIR = (1<<4+col);
              /*make output zero on our column and enable internal pullups for all input ports which are rows*/
              KEYPAD_OUT = ~(1 << 4 + col);
              for (row = 0; row < KEYPAD_ROWS; row++)
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	8f 5f       	subi	r24, 0xFF	; 255
    1680:	8a 83       	std	Y+2, r24	; 0x02
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	08 f4       	brcc	.+2      	; 0x168a <Keypad_getPressedKey+0xd4>
    1688:	c1 cf       	rjmp	.-126    	; 0x160c <Keypad_getPressedKey+0x56>
{
    uint8 row, col;
    while (1)
    {

        for (col = 0; col < KEYPAD_COLS; col++)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	8f 5f       	subi	r24, 0xFF	; 255
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	08 f4       	brcc	.+2      	; 0x1698 <Keypad_getPressedKey+0xe2>
    1696:	96 cf       	rjmp	.-212    	; 0x15c4 <Keypad_getPressedKey+0xe>
    1698:	93 cf       	rjmp	.-218    	; 0x15c0 <Keypad_getPressedKey+0xa>

0000169a <Keypad_4x4_adjustSwitchNumber>:
        return num;
    }
}
#elif (KEYPAD_COLS == 4)
static uint8 Keypad_4x4_adjustSwitchNumber(uint8 num)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <Keypad_4x4_adjustSwitchNumber+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <Keypad_4x4_adjustSwitchNumber+0x8>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	89 83       	std	Y+1, r24	; 0x01
    switch (num)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3c 83       	std	Y+4, r19	; 0x04
    16b0:	2b 83       	std	Y+3, r18	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	88 30       	cpi	r24, 0x08	; 8
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <Keypad_4x4_adjustSwitchNumber+0x24>
    16bc:	70 c0       	rjmp	.+224    	; 0x179e <Keypad_4x4_adjustSwitchNumber+0x104>
    16be:	2b 81       	ldd	r18, Y+3	; 0x03
    16c0:	3c 81       	ldd	r19, Y+4	; 0x04
    16c2:	29 30       	cpi	r18, 0x09	; 9
    16c4:	31 05       	cpc	r19, r1
    16c6:	5c f5       	brge	.+86     	; 0x171e <Keypad_4x4_adjustSwitchNumber+0x84>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	84 30       	cpi	r24, 0x04	; 4
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <Keypad_4x4_adjustSwitchNumber+0x3a>
    16d2:	59 c0       	rjmp	.+178    	; 0x1786 <Keypad_4x4_adjustSwitchNumber+0xec>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	25 30       	cpi	r18, 0x05	; 5
    16da:	31 05       	cpc	r19, r1
    16dc:	9c f4       	brge	.+38     	; 0x1704 <Keypad_4x4_adjustSwitchNumber+0x6a>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	91 05       	cpc	r25, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <Keypad_4x4_adjustSwitchNumber+0x50>
    16e8:	48 c0       	rjmp	.+144    	; 0x177a <Keypad_4x4_adjustSwitchNumber+0xe0>
    16ea:	2b 81       	ldd	r18, Y+3	; 0x03
    16ec:	3c 81       	ldd	r19, Y+4	; 0x04
    16ee:	23 30       	cpi	r18, 0x03	; 3
    16f0:	31 05       	cpc	r19, r1
    16f2:	0c f0       	brlt	.+2      	; 0x16f6 <Keypad_4x4_adjustSwitchNumber+0x5c>
    16f4:	45 c0       	rjmp	.+138    	; 0x1780 <Keypad_4x4_adjustSwitchNumber+0xe6>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <Keypad_4x4_adjustSwitchNumber+0x68>
    1700:	39 c0       	rjmp	.+114    	; 0x1774 <Keypad_4x4_adjustSwitchNumber+0xda>
    1702:	67 c0       	rjmp	.+206    	; 0x17d2 <Keypad_4x4_adjustSwitchNumber+0x138>
    1704:	2b 81       	ldd	r18, Y+3	; 0x03
    1706:	3c 81       	ldd	r19, Y+4	; 0x04
    1708:	26 30       	cpi	r18, 0x06	; 6
    170a:	31 05       	cpc	r19, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <Keypad_4x4_adjustSwitchNumber+0x76>
    170e:	41 c0       	rjmp	.+130    	; 0x1792 <Keypad_4x4_adjustSwitchNumber+0xf8>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	87 30       	cpi	r24, 0x07	; 7
    1716:	91 05       	cpc	r25, r1
    1718:	0c f0       	brlt	.+2      	; 0x171c <Keypad_4x4_adjustSwitchNumber+0x82>
    171a:	3e c0       	rjmp	.+124    	; 0x1798 <Keypad_4x4_adjustSwitchNumber+0xfe>
    171c:	37 c0       	rjmp	.+110    	; 0x178c <Keypad_4x4_adjustSwitchNumber+0xf2>
    171e:	2b 81       	ldd	r18, Y+3	; 0x03
    1720:	3c 81       	ldd	r19, Y+4	; 0x04
    1722:	2c 30       	cpi	r18, 0x0C	; 12
    1724:	31 05       	cpc	r19, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <Keypad_4x4_adjustSwitchNumber+0x90>
    1728:	46 c0       	rjmp	.+140    	; 0x17b6 <Keypad_4x4_adjustSwitchNumber+0x11c>
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	8d 30       	cpi	r24, 0x0D	; 13
    1730:	91 05       	cpc	r25, r1
    1732:	5c f4       	brge	.+22     	; 0x174a <Keypad_4x4_adjustSwitchNumber+0xb0>
    1734:	2b 81       	ldd	r18, Y+3	; 0x03
    1736:	3c 81       	ldd	r19, Y+4	; 0x04
    1738:	2a 30       	cpi	r18, 0x0A	; 10
    173a:	31 05       	cpc	r19, r1
    173c:	b1 f1       	breq	.+108    	; 0x17aa <Keypad_4x4_adjustSwitchNumber+0x110>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	8b 30       	cpi	r24, 0x0B	; 11
    1744:	91 05       	cpc	r25, r1
    1746:	a4 f5       	brge	.+104    	; 0x17b0 <Keypad_4x4_adjustSwitchNumber+0x116>
    1748:	2d c0       	rjmp	.+90     	; 0x17a4 <Keypad_4x4_adjustSwitchNumber+0x10a>
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	3c 81       	ldd	r19, Y+4	; 0x04
    174e:	2e 30       	cpi	r18, 0x0E	; 14
    1750:	31 05       	cpc	r19, r1
    1752:	b9 f1       	breq	.+110    	; 0x17c2 <Keypad_4x4_adjustSwitchNumber+0x128>
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	8e 30       	cpi	r24, 0x0E	; 14
    175a:	91 05       	cpc	r25, r1
    175c:	7c f1       	brlt	.+94     	; 0x17bc <Keypad_4x4_adjustSwitchNumber+0x122>
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	3c 81       	ldd	r19, Y+4	; 0x04
    1762:	2f 30       	cpi	r18, 0x0F	; 15
    1764:	31 05       	cpc	r19, r1
    1766:	79 f1       	breq	.+94     	; 0x17c6 <Keypad_4x4_adjustSwitchNumber+0x12c>
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	80 31       	cpi	r24, 0x10	; 16
    176e:	91 05       	cpc	r25, r1
    1770:	69 f1       	breq	.+90     	; 0x17cc <Keypad_4x4_adjustSwitchNumber+0x132>
    1772:	2f c0       	rjmp	.+94     	; 0x17d2 <Keypad_4x4_adjustSwitchNumber+0x138>
    {
    case 1:
        return 7;
    1774:	97 e0       	ldi	r25, 0x07	; 7
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	2e c0       	rjmp	.+92     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 2:
        return 8;
    177a:	28 e0       	ldi	r18, 0x08	; 8
    177c:	2a 83       	std	Y+2, r18	; 0x02
    177e:	2b c0       	rjmp	.+86     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 3:
        return 9;
    1780:	39 e0       	ldi	r19, 0x09	; 9
    1782:	3a 83       	std	Y+2, r19	; 0x02
    1784:	28 c0       	rjmp	.+80     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 4:
        return '%'; // ASCII Code of %
    1786:	85 e2       	ldi	r24, 0x25	; 37
    1788:	8a 83       	std	Y+2, r24	; 0x02
    178a:	25 c0       	rjmp	.+74     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 5:
        return 4;
    178c:	94 e0       	ldi	r25, 0x04	; 4
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	22 c0       	rjmp	.+68     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 6:
        return 5;
    1792:	25 e0       	ldi	r18, 0x05	; 5
    1794:	2a 83       	std	Y+2, r18	; 0x02
    1796:	1f c0       	rjmp	.+62     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 7:
        return 6;
    1798:	36 e0       	ldi	r19, 0x06	; 6
    179a:	3a 83       	std	Y+2, r19	; 0x02
    179c:	1c c0       	rjmp	.+56     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 8:
        return '*'; /* ASCII Code of '*' */
    179e:	8a e2       	ldi	r24, 0x2A	; 42
    17a0:	8a 83       	std	Y+2, r24	; 0x02
    17a2:	19 c0       	rjmp	.+50     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 9:
        return 1;
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	9a 83       	std	Y+2, r25	; 0x02
    17a8:	16 c0       	rjmp	.+44     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 10:
        return 2;
    17aa:	22 e0       	ldi	r18, 0x02	; 2
    17ac:	2a 83       	std	Y+2, r18	; 0x02
    17ae:	13 c0       	rjmp	.+38     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 11:
        return 3;
    17b0:	33 e0       	ldi	r19, 0x03	; 3
    17b2:	3a 83       	std	Y+2, r19	; 0x02
    17b4:	10 c0       	rjmp	.+32     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 12:
        return '-'; /* ASCII Code of '-' */
    17b6:	8d e2       	ldi	r24, 0x2D	; 45
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 13:
        return 13; /* ASCII of Enter */
    17bc:	9d e0       	ldi	r25, 0x0D	; 13
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	0a c0       	rjmp	.+20     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 14:
        return 0;
    17c2:	1a 82       	std	Y+2, r1	; 0x02
    17c4:	08 c0       	rjmp	.+16     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 15:
        return '='; /* ASCII Code of '=' */
    17c6:	2d e3       	ldi	r18, 0x3D	; 61
    17c8:	2a 83       	std	Y+2, r18	; 0x02
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    case 16:
        return '+'; /* ASCII Code of '+' */
    17cc:	3b e2       	ldi	r19, 0x2B	; 43
    17ce:	3a 83       	std	Y+2, r19	; 0x02
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <Keypad_4x4_adjustSwitchNumber+0x13c>
        break;
    default:
        return num;
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	8a 83       	std	Y+2, r24	; 0x02
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <LCD_init>:
#include "lcd.h"


void LCD_init(void)
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    LCD_CTRL_DIR |= (1 << RS) | (1 << RW) | (1 << E);
    17ee:	a1 e3       	ldi	r26, 0x31	; 49
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e1 e3       	ldi	r30, 0x31	; 49
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 6b       	ori	r24, 0xB0	; 176
    17fa:	8c 93       	st	X, r24
#if (LCD_DATA_BITS_MODE == 8)
    LCD_DATA_DIR = 0XFF; /*enable all data pins as output*/
    17fc:	e4 e3       	ldi	r30, 0x34	; 52
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	80 83       	st	Z, r24

    LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE); /*enable 2 line 8 bit mode*/
    1804:	88 e3       	ldi	r24, 0x38	; 56
    1806:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
#endif
    LCD_sendCommand(LCD_FOUR_BITS_DATA_MODE);
    LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
#endif

    LCD_sendCommand(CURSOR_OFF);
    180a:	8c e0       	ldi	r24, 0x0C	; 12
    180c:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
    LCD_clearScreen();
    1810:	0e 94 7f 10 	call	0x20fe	; 0x20fe <LCD_clearScreen>
}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	e9 97       	sbiw	r28, 0x39	; 57
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	89 af       	std	Y+57, r24	; 0x39
    CLEAR_BIT(LCD_CTRL_PORT, RS); /*command mode*/
    1830:	a2 e3       	ldi	r26, 0x32	; 50
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e2 e3       	ldi	r30, 0x32	; 50
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8f 7e       	andi	r24, 0xEF	; 239
    183c:	8c 93       	st	X, r24
    CLEAR_BIT(LCD_CTRL_PORT, RW); /*write mode*/
    183e:	a2 e3       	ldi	r26, 0x32	; 50
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e2 e3       	ldi	r30, 0x32	; 50
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8f 7d       	andi	r24, 0xDF	; 223
    184a:	8c 93       	st	X, r24
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a0 e8       	ldi	r26, 0x80	; 128
    1852:	bf e3       	ldi	r27, 0x3F	; 63
    1854:	8d ab       	std	Y+53, r24	; 0x35
    1856:	9e ab       	std	Y+54, r25	; 0x36
    1858:	af ab       	std	Y+55, r26	; 0x37
    185a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6d a9       	ldd	r22, Y+53	; 0x35
    185e:	7e a9       	ldd	r23, Y+54	; 0x36
    1860:	8f a9       	ldd	r24, Y+55	; 0x37
    1862:	98 ad       	ldd	r25, Y+56	; 0x38
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a ef       	ldi	r20, 0xFA	; 250
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	89 ab       	std	Y+49, r24	; 0x31
    1876:	9a ab       	std	Y+50, r25	; 0x32
    1878:	ab ab       	std	Y+51, r26	; 0x33
    187a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    187c:	69 a9       	ldd	r22, Y+49	; 0x31
    187e:	7a a9       	ldd	r23, Y+50	; 0x32
    1880:	8b a9       	ldd	r24, Y+51	; 0x33
    1882:	9c a9       	ldd	r25, Y+52	; 0x34
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <LCD_sendCommand+0x84>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 ab       	std	Y+48, r25	; 0x30
    189a:	8f a7       	std	Y+47, r24	; 0x2f
    189c:	3f c0       	rjmp	.+126    	; 0x191c <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    189e:	69 a9       	ldd	r22, Y+49	; 0x31
    18a0:	7a a9       	ldd	r23, Y+50	; 0x32
    18a2:	8b a9       	ldd	r24, Y+51	; 0x33
    18a4:	9c a9       	ldd	r25, Y+52	; 0x34
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6d a9       	ldd	r22, Y+53	; 0x35
    18b8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ba:	8f a9       	ldd	r24, Y+55	; 0x37
    18bc:	98 ad       	ldd	r25, Y+56	; 0x38
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <LCD_sendCommand+0xe4>
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e a7       	std	Y+46, r25	; 0x2e
    18e6:	8d a7       	std	Y+45, r24	; 0x2d
    18e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_sendCommand+0xd2>
    18f0:	9e a7       	std	Y+46, r25	; 0x2e
    18f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f6:	98 a9       	ldd	r25, Y+48	; 0x30
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	98 ab       	std	Y+48, r25	; 0x30
    18fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1900:	98 a9       	ldd	r25, Y+48	; 0x30
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <LCD_sendCommand+0xc6>
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	69 a9       	ldd	r22, Y+49	; 0x31
    190a:	7a a9       	ldd	r23, Y+50	; 0x32
    190c:	8b a9       	ldd	r24, Y+51	; 0x33
    190e:	9c a9       	ldd	r25, Y+52	; 0x34
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
    191c:	8f a5       	ldd	r24, Y+47	; 0x2f
    191e:	98 a9       	ldd	r25, Y+48	; 0x30
    1920:	9c a7       	std	Y+44, r25	; 0x2c
    1922:	8b a7       	std	Y+43, r24	; 0x2b
    1924:	8b a5       	ldd	r24, Y+43	; 0x2b
    1926:	9c a5       	ldd	r25, Y+44	; 0x2c
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <LCD_sendCommand+0x10e>
    192c:	9c a7       	std	Y+44, r25	; 0x2c
    192e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);                 /*tas processing*/
    SET_BIT(LCD_CTRL_PORT, E);    /*ENABLE DATA*/
    1930:	a2 e3       	ldi	r26, 0x32	; 50
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e2 e3       	ldi	r30, 0x32	; 50
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 68       	ori	r24, 0x80	; 128
    193c:	8c 93       	st	X, r24
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a0 e8       	ldi	r26, 0x80	; 128
    1944:	bf e3       	ldi	r27, 0x3F	; 63
    1946:	8f a3       	std	Y+39, r24	; 0x27
    1948:	98 a7       	std	Y+40, r25	; 0x28
    194a:	a9 a7       	std	Y+41, r26	; 0x29
    194c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	6f a1       	ldd	r22, Y+39	; 0x27
    1950:	78 a5       	ldd	r23, Y+40	; 0x28
    1952:	89 a5       	ldd	r24, Y+41	; 0x29
    1954:	9a a5       	ldd	r25, Y+42	; 0x2a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a ef       	ldi	r20, 0xFA	; 250
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8b a3       	std	Y+35, r24	; 0x23
    1968:	9c a3       	std	Y+36, r25	; 0x24
    196a:	ad a3       	std	Y+37, r26	; 0x25
    196c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    196e:	6b a1       	ldd	r22, Y+35	; 0x23
    1970:	7c a1       	ldd	r23, Y+36	; 0x24
    1972:	8d a1       	ldd	r24, Y+37	; 0x25
    1974:	9e a1       	ldd	r25, Y+38	; 0x26
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <LCD_sendCommand+0x176>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9a a3       	std	Y+34, r25	; 0x22
    198c:	89 a3       	std	Y+33, r24	; 0x21
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1990:	6b a1       	ldd	r22, Y+35	; 0x23
    1992:	7c a1       	ldd	r23, Y+36	; 0x24
    1994:	8d a1       	ldd	r24, Y+37	; 0x25
    1996:	9e a1       	ldd	r25, Y+38	; 0x26
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	6f a1       	ldd	r22, Y+39	; 0x27
    19aa:	78 a5       	ldd	r23, Y+40	; 0x28
    19ac:	89 a5       	ldd	r24, Y+41	; 0x29
    19ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9a a3       	std	Y+34, r25	; 0x22
    19ce:	89 a3       	std	Y+33, r24	; 0x21
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <LCD_sendCommand+0x1d6>
    19d2:	88 ec       	ldi	r24, 0xC8	; 200
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	98 a3       	std	Y+32, r25	; 0x20
    19d8:	8f 8f       	std	Y+31, r24	; 0x1f
    19da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19dc:	98 a1       	ldd	r25, Y+32	; 0x20
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_sendCommand+0x1c4>
    19e2:	98 a3       	std	Y+32, r25	; 0x20
    19e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	89 a1       	ldd	r24, Y+33	; 0x21
    19e8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9a a3       	std	Y+34, r25	; 0x22
    19ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	89 a1       	ldd	r24, Y+33	; 0x21
    19f2:	9a a1       	ldd	r25, Y+34	; 0x22
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <LCD_sendCommand+0x1b8>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	6b a1       	ldd	r22, Y+35	; 0x23
    19fc:	7c a1       	ldd	r23, Y+36	; 0x24
    19fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1a00:	9e a1       	ldd	r25, Y+38	; 0x26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9a a3       	std	Y+34, r25	; 0x22
    1a0c:	89 a3       	std	Y+33, r24	; 0x21
    1a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a10:	9a a1       	ldd	r25, Y+34	; 0x22
    1a12:	9e 8f       	std	Y+30, r25	; 0x1e
    1a14:	8d 8f       	std	Y+29, r24	; 0x1d
    1a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_sendCommand+0x200>
    1a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a20:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);                 /*processing*/

#if (LCD_DATA_BITS_MODE == 8)
    LCD_DATA_PORT = command; /*output command on the 8 pins*/
    1a22:	e5 e3       	ldi	r30, 0x35	; 53
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	89 ad       	ldd	r24, Y+57	; 0x39
    1a28:	80 83       	st	Z, r24
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 e8       	ldi	r26, 0x80	; 128
    1a30:	bf e3       	ldi	r27, 0x3F	; 63
    1a32:	89 8f       	std	Y+25, r24	; 0x19
    1a34:	9a 8f       	std	Y+26, r25	; 0x1a
    1a36:	ab 8f       	std	Y+27, r26	; 0x1b
    1a38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8d 8b       	std	Y+21, r24	; 0x15
    1a54:	9e 8b       	std	Y+22, r25	; 0x16
    1a56:	af 8b       	std	Y+23, r26	; 0x17
    1a58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a60:	98 8d       	ldd	r25, Y+24	; 0x18
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <LCD_sendCommand+0x262>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9c 8b       	std	Y+20, r25	; 0x14
    1a78:	8b 8b       	std	Y+19, r24	; 0x13
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a80:	8f 89       	ldd	r24, Y+23	; 0x17
    1a82:	98 8d       	ldd	r25, Y+24	; 0x18
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	4c f5       	brge	.+82     	; 0x1ae6 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	69 8d       	ldd	r22, Y+25	; 0x19
    1a96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9c 8b       	std	Y+20, r25	; 0x14
    1aba:	8b 8b       	std	Y+19, r24	; 0x13
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <LCD_sendCommand+0x2c2>
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9a 8b       	std	Y+18, r25	; 0x12
    1ac4:	89 8b       	std	Y+17, r24	; 0x11
    1ac6:	89 89       	ldd	r24, Y+17	; 0x11
    1ac8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_sendCommand+0x2b0>
    1ace:	9a 8b       	std	Y+18, r25	; 0x12
    1ad0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9c 8b       	std	Y+20, r25	; 0x14
    1ada:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <LCD_sendCommand+0x2a4>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aea:	8f 89       	ldd	r24, Y+23	; 0x17
    1aec:	98 8d       	ldd	r25, Y+24	; 0x18
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9c 8b       	std	Y+20, r25	; 0x14
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
    1afa:	8b 89       	ldd	r24, Y+19	; 0x13
    1afc:	9c 89       	ldd	r25, Y+20	; 0x14
    1afe:	98 8b       	std	Y+16, r25	; 0x10
    1b00:	8f 87       	std	Y+15, r24	; 0x0f
    1b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b04:	98 89       	ldd	r25, Y+16	; 0x10
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_sendCommand+0x2ec>
    1b0a:	98 8b       	std	Y+16, r25	; 0x10
    1b0c:	8f 87       	std	Y+15, r24	; 0x0f
#endif

#endif

    _delay_ms(1);                /*processing*/
    CLEAR_BIT(LCD_CTRL_PORT, E); /*ENABLE DATA*/
    1b0e:	a2 e3       	ldi	r26, 0x32	; 50
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e2 e3       	ldi	r30, 0x32	; 50
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	8f 77       	andi	r24, 0x7F	; 127
    1b1a:	8c 93       	st	X, r24
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 e8       	ldi	r26, 0x80	; 128
    1b22:	bf e3       	ldi	r27, 0x3F	; 63
    1b24:	8b 87       	std	Y+11, r24	; 0x0b
    1b26:	9c 87       	std	Y+12, r25	; 0x0c
    1b28:	ad 87       	std	Y+13, r26	; 0x0d
    1b2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a ef       	ldi	r20, 0xFA	; 250
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8f 83       	std	Y+7, r24	; 0x07
    1b46:	98 87       	std	Y+8, r25	; 0x08
    1b48:	a9 87       	std	Y+9, r26	; 0x09
    1b4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <LCD_sendCommand+0x354>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	4c f5       	brge	.+82     	; 0x1bd8 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e2       	ldi	r20, 0x20	; 32
    1b94:	51 e4       	ldi	r21, 0x41	; 65
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <LCD_sendCommand+0x3b4>
    1bb0:	88 ec       	ldi	r24, 0xC8	; 200
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_sendCommand+0x3a2>
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <LCD_sendCommand+0x396>
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_sendCommand+0x3de>
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);                /*processing*/
}
    1c00:	e9 96       	adiw	r28, 0x39	; 57
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	e9 97       	sbiw	r28, 0x39	; 57
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	89 af       	std	Y+57, r24	; 0x39
    SET_BIT(LCD_CTRL_PORT, RS);   /*data mode*/
    1c28:	a2 e3       	ldi	r26, 0x32	; 50
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e2 e3       	ldi	r30, 0x32	; 50
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	80 61       	ori	r24, 0x10	; 16
    1c34:	8c 93       	st	X, r24
    CLEAR_BIT(LCD_CTRL_PORT, RW); /*write mode*/
    1c36:	a2 e3       	ldi	r26, 0x32	; 50
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e2 e3       	ldi	r30, 0x32	; 50
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8f 7d       	andi	r24, 0xDF	; 223
    1c42:	8c 93       	st	X, r24
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e8       	ldi	r26, 0x80	; 128
    1c4a:	bf e3       	ldi	r27, 0x3F	; 63
    1c4c:	8d ab       	std	Y+53, r24	; 0x35
    1c4e:	9e ab       	std	Y+54, r25	; 0x36
    1c50:	af ab       	std	Y+55, r26	; 0x37
    1c52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	6d a9       	ldd	r22, Y+53	; 0x35
    1c56:	7e a9       	ldd	r23, Y+54	; 0x36
    1c58:	8f a9       	ldd	r24, Y+55	; 0x37
    1c5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a ef       	ldi	r20, 0xFA	; 250
    1c62:	54 e4       	ldi	r21, 0x44	; 68
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	89 ab       	std	Y+49, r24	; 0x31
    1c6e:	9a ab       	std	Y+50, r25	; 0x32
    1c70:	ab ab       	std	Y+51, r26	; 0x33
    1c72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c74:	69 a9       	ldd	r22, Y+49	; 0x31
    1c76:	7a a9       	ldd	r23, Y+50	; 0x32
    1c78:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	98 ab       	std	Y+48, r25	; 0x30
    1c92:	8f a7       	std	Y+47, r24	; 0x2f
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1c96:	69 a9       	ldd	r22, Y+49	; 0x31
    1c98:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	4f e7       	ldi	r20, 0x7F	; 127
    1ca4:	57 e4       	ldi	r21, 0x47	; 71
    1ca6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1caa:	18 16       	cp	r1, r24
    1cac:	4c f5       	brge	.+82     	; 0x1d00 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cae:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb0:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb2:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb4:	98 ad       	ldd	r25, Y+56	; 0x38
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	98 ab       	std	Y+48, r25	; 0x30
    1cd4:	8f a7       	std	Y+47, r24	; 0x2f
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <LCD_displayCharacter+0xe4>
    1cd8:	88 ec       	ldi	r24, 0xC8	; 200
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9e a7       	std	Y+46, r25	; 0x2e
    1cde:	8d a7       	std	Y+45, r24	; 0x2d
    1ce0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_displayCharacter+0xd2>
    1ce8:	9e a7       	std	Y+46, r25	; 0x2e
    1cea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cee:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	98 ab       	std	Y+48, r25	; 0x30
    1cf4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	69 f7       	brne	.-38     	; 0x1cd8 <LCD_displayCharacter+0xc6>
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	69 a9       	ldd	r22, Y+49	; 0x31
    1d02:	7a a9       	ldd	r23, Y+50	; 0x32
    1d04:	8b a9       	ldd	r24, Y+51	; 0x33
    1d06:	9c a9       	ldd	r25, Y+52	; 0x34
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	98 ab       	std	Y+48, r25	; 0x30
    1d12:	8f a7       	std	Y+47, r24	; 0x2f
    1d14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d16:	98 a9       	ldd	r25, Y+48	; 0x30
    1d18:	9c a7       	std	Y+44, r25	; 0x2c
    1d1a:	8b a7       	std	Y+43, r24	; 0x2b
    1d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_displayCharacter+0x10e>
    1d24:	9c a7       	std	Y+44, r25	; 0x2c
    1d26:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);                 /*tas processing*/
    SET_BIT(LCD_CTRL_PORT, E);    /*ENABLE DATA*/
    1d28:	a2 e3       	ldi	r26, 0x32	; 50
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e2 e3       	ldi	r30, 0x32	; 50
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 68       	ori	r24, 0x80	; 128
    1d34:	8c 93       	st	X, r24
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a0 e8       	ldi	r26, 0x80	; 128
    1d3c:	bf e3       	ldi	r27, 0x3F	; 63
    1d3e:	8f a3       	std	Y+39, r24	; 0x27
    1d40:	98 a7       	std	Y+40, r25	; 0x28
    1d42:	a9 a7       	std	Y+41, r26	; 0x29
    1d44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d46:	6f a1       	ldd	r22, Y+39	; 0x27
    1d48:	78 a5       	ldd	r23, Y+40	; 0x28
    1d4a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a ef       	ldi	r20, 0xFA	; 250
    1d54:	54 e4       	ldi	r21, 0x44	; 68
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8b a3       	std	Y+35, r24	; 0x23
    1d60:	9c a3       	std	Y+36, r25	; 0x24
    1d62:	ad a3       	std	Y+37, r26	; 0x25
    1d64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d66:	6b a1       	ldd	r22, Y+35	; 0x23
    1d68:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9a a3       	std	Y+34, r25	; 0x22
    1d84:	89 a3       	std	Y+33, r24	; 0x21
    1d86:	3f c0       	rjmp	.+126    	; 0x1e06 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1d88:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	4c f5       	brge	.+82     	; 0x1df2 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	6f a1       	ldd	r22, Y+39	; 0x27
    1da2:	78 a5       	ldd	r23, Y+40	; 0x28
    1da4:	89 a5       	ldd	r24, Y+41	; 0x29
    1da6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <LCD_displayCharacter+0x1d6>
    1dca:	88 ec       	ldi	r24, 0xC8	; 200
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	98 a3       	std	Y+32, r25	; 0x20
    1dd0:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dd4:	98 a1       	ldd	r25, Y+32	; 0x20
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_displayCharacter+0x1c4>
    1dda:	98 a3       	std	Y+32, r25	; 0x20
    1ddc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	89 a1       	ldd	r24, Y+33	; 0x21
    1de0:	9a a1       	ldd	r25, Y+34	; 0x22
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	9a a3       	std	Y+34, r25	; 0x22
    1de6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dea:	9a a1       	ldd	r25, Y+34	; 0x22
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f7       	brne	.-38     	; 0x1dca <LCD_displayCharacter+0x1b8>
    1df0:	14 c0       	rjmp	.+40     	; 0x1e1a <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	6b a1       	ldd	r22, Y+35	; 0x23
    1df4:	7c a1       	ldd	r23, Y+36	; 0x24
    1df6:	8d a1       	ldd	r24, Y+37	; 0x25
    1df8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
    1e06:	89 a1       	ldd	r24, Y+33	; 0x21
    1e08:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_displayCharacter+0x200>
    1e16:	9e 8f       	std	Y+30, r25	; 0x1e
    1e18:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);                 /*processing*/

#if (LCD_DATA_BITS_MODE == 8)
    LCD_DATA_PORT = data; /*output character on all 8 pins*/
    1e1a:	e5 e3       	ldi	r30, 0x35	; 53
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e20:	80 83       	st	Z, r24
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	a0 e8       	ldi	r26, 0x80	; 128
    1e28:	bf e3       	ldi	r27, 0x3F	; 63
    1e2a:	89 8f       	std	Y+25, r24	; 0x19
    1e2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e32:	69 8d       	ldd	r22, Y+25	; 0x19
    1e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4a ef       	ldi	r20, 0xFA	; 250
    1e40:	54 e4       	ldi	r21, 0x44	; 68
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	8d 8b       	std	Y+21, r24	; 0x15
    1e4c:	9e 8b       	std	Y+22, r25	; 0x16
    1e4e:	af 8b       	std	Y+23, r26	; 0x17
    1e50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e52:	6d 89       	ldd	r22, Y+21	; 0x15
    1e54:	7e 89       	ldd	r23, Y+22	; 0x16
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 8b       	std	Y+20, r25	; 0x14
    1e70:	8b 8b       	std	Y+19, r24	; 0x13
    1e72:	3f c0       	rjmp	.+126    	; 0x1ef2 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1e74:	6d 89       	ldd	r22, Y+21	; 0x15
    1e76:	7e 89       	ldd	r23, Y+22	; 0x16
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	57 e4       	ldi	r21, 0x47	; 71
    1e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e88:	18 16       	cp	r1, r24
    1e8a:	4c f5       	brge	.+82     	; 0x1ede <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e2       	ldi	r20, 0x20	; 32
    1e9a:	51 e4       	ldi	r21, 0x41	; 65
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	0f c0       	rjmp	.+30     	; 0x1ed4 <LCD_displayCharacter+0x2c2>
    1eb6:	88 ec       	ldi	r24, 0xC8	; 200
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9a 8b       	std	Y+18, r25	; 0x12
    1ebc:	89 8b       	std	Y+17, r24	; 0x11
    1ebe:	89 89       	ldd	r24, Y+17	; 0x11
    1ec0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_displayCharacter+0x2b0>
    1ec6:	9a 8b       	std	Y+18, r25	; 0x12
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	9c 8b       	std	Y+20, r25	; 0x14
    1ed2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	69 f7       	brne	.-38     	; 0x1eb6 <LCD_displayCharacter+0x2a4>
    1edc:	14 c0       	rjmp	.+40     	; 0x1f06 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ede:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	98 8b       	std	Y+16, r25	; 0x10
    1ef8:	8f 87       	std	Y+15, r24	; 0x0f
    1efa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efc:	98 89       	ldd	r25, Y+16	; 0x10
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <LCD_displayCharacter+0x2ec>
    1f02:	98 8b       	std	Y+16, r25	; 0x10
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
#else
    LCD_DATA_PORT = (LCD_DATA_PORT & 0XF0) | (data & 0x0F);
#endif
#endif
    _delay_ms(1);                /*processing*/
    CLEAR_BIT(LCD_CTRL_PORT, E); /*ENABLE DATA*/
    1f06:	a2 e3       	ldi	r26, 0x32	; 50
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e2 e3       	ldi	r30, 0x32	; 50
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8f 77       	andi	r24, 0x7F	; 127
    1f12:	8c 93       	st	X, r24
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e8       	ldi	r26, 0x80	; 128
    1f1a:	bf e3       	ldi	r27, 0x3F	; 63
    1f1c:	8b 87       	std	Y+11, r24	; 0x0b
    1f1e:	9c 87       	std	Y+12, r25	; 0x0c
    1f20:	ad 87       	std	Y+13, r26	; 0x0d
    1f22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	8f 83       	std	Y+7, r24	; 0x07
    1f3e:	98 87       	std	Y+8, r25	; 0x08
    1f40:	a9 87       	std	Y+9, r26	; 0x09
    1f42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f44:	6f 81       	ldd	r22, Y+7	; 0x07
    1f46:	78 85       	ldd	r23, Y+8	; 0x08
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1f66:	6f 81       	ldd	r22, Y+7	; 0x07
    1f68:	78 85       	ldd	r23, Y+8	; 0x08
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <LCD_displayCharacter+0x3b4>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	8b 83       	std	Y+3, r24	; 0x03
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_displayCharacter+0x3a2>
    1fb8:	9c 83       	std	Y+4, r25	; 0x04
    1fba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <LCD_displayCharacter+0x396>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd2:	78 85       	ldd	r23, Y+8	; 0x08
    1fd4:	89 85       	ldd	r24, Y+9	; 0x09
    1fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_displayCharacter+0x3de>
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);                /*processing*/
}
    1ff8:	e9 96       	adiw	r28, 0x39	; 57
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <LCD_displayString>:

void LCD_displayString(const char *string)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <LCD_displayString+0x6>
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	0a c0       	rjmp	.+20     	; 0x202e <LCD_displayString+0x24>
    while ((*string) != '\0')
    {
        LCD_displayCharacter(*string); /*display character untill strinf is null terminated*/
    201a:	e9 81       	ldd	r30, Y+1	; 0x01
    201c:	fa 81       	ldd	r31, Y+2	; 0x02
    201e:	80 81       	ld	r24, Z
    2020:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_displayCharacter>
        string++;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 96       	adiw	r24, 0x01	; 1
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);                /*processing*/
}

void LCD_displayString(const char *string)
{
    while ((*string) != '\0')
    202e:	e9 81       	ldd	r30, Y+1	; 0x01
    2030:	fa 81       	ldd	r31, Y+2	; 0x02
    2032:	80 81       	ld	r24, Z
    2034:	88 23       	and	r24, r24
    2036:	89 f7       	brne	.-30     	; 0x201a <LCD_displayString+0x10>
    {
        LCD_displayCharacter(*string); /*display character untill strinf is null terminated*/
        string++;
    }
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row, uint8 col)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <LCD_goToRowColumn+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <LCD_goToRowColumn+0x8>
    204a:	0f 92       	push	r0
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	8a 83       	std	Y+2, r24	; 0x02
    2052:	6b 83       	std	Y+3, r22	; 0x03
    uint8 address = 0; /*initialize address*/
    2054:	19 82       	std	Y+1, r1	; 0x01
    switch (row)
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	3d 83       	std	Y+5, r19	; 0x05
    205e:	2c 83       	std	Y+4, r18	; 0x04
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	91 05       	cpc	r25, r1
    2068:	c1 f0       	breq	.+48     	; 0x209a <LCD_goToRowColumn+0x58>
    206a:	2c 81       	ldd	r18, Y+4	; 0x04
    206c:	3d 81       	ldd	r19, Y+5	; 0x05
    206e:	22 30       	cpi	r18, 0x02	; 2
    2070:	31 05       	cpc	r19, r1
    2072:	2c f4       	brge	.+10     	; 0x207e <LCD_goToRowColumn+0x3c>
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	61 f0       	breq	.+24     	; 0x2094 <LCD_goToRowColumn+0x52>
    207c:	1a c0       	rjmp	.+52     	; 0x20b2 <LCD_goToRowColumn+0x70>
    207e:	2c 81       	ldd	r18, Y+4	; 0x04
    2080:	3d 81       	ldd	r19, Y+5	; 0x05
    2082:	22 30       	cpi	r18, 0x02	; 2
    2084:	31 05       	cpc	r19, r1
    2086:	69 f0       	breq	.+26     	; 0x20a2 <LCD_goToRowColumn+0x60>
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	9d 81       	ldd	r25, Y+5	; 0x05
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	91 05       	cpc	r25, r1
    2090:	61 f0       	breq	.+24     	; 0x20aa <LCD_goToRowColumn+0x68>
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <LCD_goToRowColumn+0x70>
    {
    case 0:
        address = col; /*add base address of first line*/
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <LCD_goToRowColumn+0x72>
        break;

    case 1:
        address = 0x40 + col; /*add base address of second line*/
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	80 5c       	subi	r24, 0xC0	; 192
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <LCD_goToRowColumn+0x72>
        break;

    case 2:
        address = 010 + col; /*add base address of third line*/
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	88 5f       	subi	r24, 0xF8	; 248
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <LCD_goToRowColumn+0x72>
        break;

    case 3:
        address = 0x50 + col; /*add base address of fourth line*/
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	80 5b       	subi	r24, 0xB0	; 176
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <LCD_goToRowColumn+0x72>
        break;

    default:
        address = 0;
    20b2:	19 82       	std	Y+1, r1	; 0x01
    }
    LCD_sendCommand((SET_CURSOR_LOCATION | address)); /*add a 1 to the most signifigant bit so the lcd goes to address*/
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	80 68       	ori	r24, 0x80	; 128
    20b8:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *string)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <LCD_displayStringRowColumn+0x6>
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <LCD_displayStringRowColumn+0x8>
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	6a 83       	std	Y+2, r22	; 0x02
    20dc:	5c 83       	std	Y+4, r21	; 0x04
    20de:	4b 83       	std	Y+3, r20	; 0x03
    LCD_goToRowColumn(row, col);
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	6a 81       	ldd	r22, Y+2	; 0x02
    20e4:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_goToRowColumn>
    LCD_displayString(string);
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	0e 94 05 10 	call	0x200a	; 0x200a <LCD_displayString>
}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(CLEAR_COMMAND); /*send ckear screen command*/
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	0e 94 0d 0c 	call	0x181a	; 0x181a <LCD_sendCommand>
}
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <LCD_intgerToString>:
void LCD_intgerToString(int num)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	62 97       	sbiw	r28, 0x12	; 18
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	9a 8b       	std	Y+18, r25	; 0x12
    2128:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16];       /*buffer String to hold the ascii result */
    itoa(num, buff, 10); /* 10 for decimal */
    212a:	89 89       	ldd	r24, Y+17	; 0x11
    212c:	9a 89       	ldd	r25, Y+18	; 0x12
    212e:	9e 01       	movw	r18, r28
    2130:	2f 5f       	subi	r18, 0xFF	; 255
    2132:	3f 4f       	sbci	r19, 0xFF	; 255
    2134:	b9 01       	movw	r22, r18
    2136:	4a e0       	ldi	r20, 0x0A	; 10
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <itoa>
    LCD_displayString(buff);
    213e:	ce 01       	movw	r24, r28
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	0e 94 05 10 	call	0x200a	; 0x200a <LCD_displayString>
}
    2146:	62 96       	adiw	r28, 0x12	; 18
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <MOTOR_init>:
#include "motor.h"

/*Function Definitions*/
void MOTOR_init(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	/* configure pin interrupt pin*/
	//SET_BIT (DDRD,PD3);
	/* Motor is stopped at the beginning */
	MOTOR_PORT &= ~((1 << MOTOR_CLOCKWISE_PIN) | (1 << MOTOR_ANTICLOCKWISE_PIN));
    2160:	a8 e3       	ldi	r26, 0x38	; 56
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e8 e3       	ldi	r30, 0x38	; 56
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8c 7f       	andi	r24, 0xFC	; 252
    216c:	8c 93       	st	X, r24
	/* configure pins for motor as output pins */
	MOTOR_PORT_DIRECTION |= (1 << MOTOR_CLOCKWISE_PIN) | (1 << MOTOR_ANTICLOCKWISE_PIN);
    216e:	a7 e3       	ldi	r26, 0x37	; 55
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e7 e3       	ldi	r30, 0x37	; 55
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	83 60       	ori	r24, 0x03	; 3
    217a:	8c 93       	st	X, r24
}
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <MOTOR_rotateClockwise>:
void MOTOR_rotateClockwise(void)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MOTOR_PORT,MOTOR_CLOCKWISE_PIN);
    218a:	a8 e3       	ldi	r26, 0x38	; 56
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e8 e3       	ldi	r30, 0x38	; 56
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	81 60       	ori	r24, 0x01	; 1
    2196:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_ANTICLOCKWISE_PIN);
    2198:	a8 e3       	ldi	r26, 0x38	; 56
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e8 e3       	ldi	r30, 0x38	; 56
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8d 7f       	andi	r24, 0xFD	; 253
    21a4:	8c 93       	st	X, r24
}
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <MOTOR_rotateAntiClockwise>:
void MOTOR_rotateAntiClockwise(void)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT(MOTOR_PORT,MOTOR_CLOCKWISE_PIN);
    21b4:	a8 e3       	ldi	r26, 0x38	; 56
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e8 e3       	ldi	r30, 0x38	; 56
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8e 7f       	andi	r24, 0xFE	; 254
    21c0:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT,MOTOR_ANTICLOCKWISE_PIN);
    21c2:	a8 e3       	ldi	r26, 0x38	; 56
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e8 e3       	ldi	r30, 0x38	; 56
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	82 60       	ori	r24, 0x02	; 2
    21ce:	8c 93       	st	X, r24
}
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <MOTOR_stop>:
void MOTOR_stop(void)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_PORT,MOTOR_CLOCKWISE_PIN);
    21de:	a8 e3       	ldi	r26, 0x38	; 56
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e8 e3       	ldi	r30, 0x38	; 56
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8e 7f       	andi	r24, 0xFE	; 254
    21ea:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_ANTICLOCKWISE_PIN);
    21ec:	a8 e3       	ldi	r26, 0x38	; 56
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e8 e3       	ldi	r30, 0x38	; 56
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	8d 7f       	andi	r24, 0xFD	; 253
    21f8:	8c 93       	st	X, r24

}
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <SPI_initMaster>:
#include "spi.h"

void SPI_initMaster(void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    SS(PB4)     = 1 (Output)    slave select line
    MOSI(PB5)   = 1 (Output)    Master output slave input
    MISO(PB6)   = 0 (Input)     Master input slave output
    Sck(PB7)    = 1 (Output)    Serial Clock line
     */
    DDRB |= (1 << PB4) | (1 << PB5) | (1 << PB7);
    2208:	a7 e3       	ldi	r26, 0x37	; 55
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e7 e3       	ldi	r30, 0x37	; 55
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	80 6b       	ori	r24, 0xB0	; 176
    2214:	8c 93       	st	X, r24
    DDRB &= ~((1 << PB6));
    2216:	a7 e3       	ldi	r26, 0x37	; 55
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e7 e3       	ldi	r30, 0x37	; 55
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8f 7b       	andi	r24, 0xBF	; 191
    2222:	8c 93       	st	X, r24
    Description: SPCR (SPI Control REG.)
    SPE      = 1 Enable SPI
    MSTR     = 1 Enable AS SPI Master Mode
    SPR1:0   = 00 Use FCPU/4 clock speed
    */
    SPCR = (1 << SPE) | (1 << MSTR);
    2224:	ed e2       	ldi	r30, 0x2D	; 45
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 e5       	ldi	r24, 0x50	; 80
    222a:	80 83       	st	Z, r24
}
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <SPI_initSlave>:
void SPI_initSlave(void)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    SS(PB4)     = 0 (Input)    slave select line
    MOSI(PB5)   = 0 (Input)    Master Output slave input
    MISO(PB6)   = 1 (Output)     Master input slave Output
    Sck(PB7)    = 0 (Input)    Serial Clock line
     */
    DDRB |= (1 << PB6);
    223a:	a7 e3       	ldi	r26, 0x37	; 55
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e7 e3       	ldi	r30, 0x37	; 55
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	80 64       	ori	r24, 0x40	; 64
    2246:	8c 93       	st	X, r24
    DDRB &= ~((1 << PB4) | (1 << PB5) | (1 << PB7));
    2248:	a7 e3       	ldi	r26, 0x37	; 55
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e7 e3       	ldi	r30, 0x37	; 55
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	8f 74       	andi	r24, 0x4F	; 79
    2254:	8c 93       	st	X, r24
    /*
    Description: SPCR (SPI Control REG.)
    SPE      = 1 Enable SPI
    MSTR     = 0 Enable AS SPI Slave Mode
    */
    SPCR = (1 << SPE);
    2256:	ed e2       	ldi	r30, 0x2D	; 45
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 e4       	ldi	r24, 0x40	; 64
    225c:	80 83       	st	Z, r24
}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <SPI_sendByte>:
void SPI_sendByte(uint8 data)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	0f 92       	push	r0
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	89 83       	std	Y+1, r24	; 0x01
    /*
    Description: SPdR (SPI Data REG.)
    Write data in data register
   */
    SPDR = data;
    2270:	ef e2       	ldi	r30, 0x2F	; 47
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	80 83       	st	Z, r24
    /*
    Description: SPSR (SPI Status REG.)
    wait untill last serial transfer is complete
   */
    while (BIT_IS_CLEAR(SPSR, SPIF))
    2278:	ee e2       	ldi	r30, 0x2E	; 46
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	88 23       	and	r24, r24
    2280:	dc f7       	brge	.-10     	; 0x2278 <SPI_sendByte+0x14>
        ;
}
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <SPI_sendString>:
void SPI_sendString(const uint8 *str)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	00 d0       	rcall	.+0      	; 0x2290 <SPI_sendString+0x6>
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	0a c0       	rjmp	.+20     	; 0x22ae <SPI_sendString+0x24>
    /*Send bytes untill null terminator is found*/
    while (*str != '\0')
    {
        SPI_sendByte(*str);
    229a:	e9 81       	ldd	r30, Y+1	; 0x01
    229c:	fa 81       	ldd	r31, Y+2	; 0x02
    229e:	80 81       	ld	r24, Z
    22a0:	0e 94 32 11 	call	0x2264	; 0x2264 <SPI_sendByte>
        str++;
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	01 96       	adiw	r24, 0x01	; 1
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
        ;
}
void SPI_sendString(const uint8 *str)
{
    /*Send bytes untill null terminator is found*/
    while (*str != '\0')
    22ae:	e9 81       	ldd	r30, Y+1	; 0x01
    22b0:	fa 81       	ldd	r31, Y+2	; 0x02
    22b2:	80 81       	ld	r24, Z
    22b4:	88 23       	and	r24, r24
    22b6:	89 f7       	brne	.-30     	; 0x229a <SPI_sendString+0x10>
    {
        SPI_sendByte(*str);
        str++;
    }
}
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <SPI_recieveByte>:
uint8 SPI_recieveByte(void)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    /*
    Description: SPSR (SPI Status REG.)
    wait untill Data is fully recieved
   */
    while (BIT_IS_CLEAR(SPSR, SPIF))
    22ca:	ee e2       	ldi	r30, 0x2E	; 46
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	88 23       	and	r24, r24
    22d2:	dc f7       	brge	.-10     	; 0x22ca <SPI_recieveByte+0x8>
        ;
    /*return data from SPI Data REG.*/
    return SPDR;
    22d4:	ef e2       	ldi	r30, 0x2F	; 47
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
}
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <SPI_recieveString>:
void SPI_recieveString(uint8 * const str)
{
    22e0:	0f 93       	push	r16
    22e2:	1f 93       	push	r17
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <SPI_recieveString+0xa>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <SPI_recieveString+0xc>
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	8b 83       	std	Y+3, r24	; 0x03
    uint16 i = 0;
    22f4:	1a 82       	std	Y+2, r1	; 0x02
    22f6:	19 82       	std	Y+1, r1	; 0x01
    /*put first recieved byte in string*/
    str[i] = SPI_recieveByte();
    22f8:	2b 81       	ldd	r18, Y+3	; 0x03
    22fa:	3c 81       	ldd	r19, Y+4	; 0x04
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	89 01       	movw	r16, r18
    2302:	08 0f       	add	r16, r24
    2304:	19 1f       	adc	r17, r25
    2306:	0e 94 61 11 	call	0x22c2	; 0x22c2 <SPI_recieveByte>
    230a:	f8 01       	movw	r30, r16
    230c:	80 83       	st	Z, r24
    230e:	10 c0       	rjmp	.+32     	; 0x2330 <SPI_recieveString+0x50>
    /*loop untill a hash is found*/
    while (str[i] != '#')
    {
        i++;
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
        str[i] = SPI_recieveByte();
    231a:	2b 81       	ldd	r18, Y+3	; 0x03
    231c:	3c 81       	ldd	r19, Y+4	; 0x04
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	9a 81       	ldd	r25, Y+2	; 0x02
    2322:	89 01       	movw	r16, r18
    2324:	08 0f       	add	r16, r24
    2326:	19 1f       	adc	r17, r25
    2328:	0e 94 61 11 	call	0x22c2	; 0x22c2 <SPI_recieveByte>
    232c:	f8 01       	movw	r30, r16
    232e:	80 83       	st	Z, r24
{
    uint16 i = 0;
    /*put first recieved byte in string*/
    str[i] = SPI_recieveByte();
    /*loop untill a hash is found*/
    while (str[i] != '#')
    2330:	2b 81       	ldd	r18, Y+3	; 0x03
    2332:	3c 81       	ldd	r19, Y+4	; 0x04
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	f9 01       	movw	r30, r18
    233a:	e8 0f       	add	r30, r24
    233c:	f9 1f       	adc	r31, r25
    233e:	80 81       	ld	r24, Z
    2340:	83 32       	cpi	r24, 0x23	; 35
    2342:	31 f7       	brne	.-52     	; 0x2310 <SPI_recieveString+0x30>
    {
        i++;
        str[i] = SPI_recieveByte();
    }
    /*insert null terminator instaed of last hash*/
    str[i] = '\0';
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	29 81       	ldd	r18, Y+1	; 0x01
    234a:	3a 81       	ldd	r19, Y+2	; 0x02
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	10 82       	st	Z, r1
}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <__vector_19>:
/*******************************************************************************
 *                              ISRs                                                    *
 *******************************************************************************/
#ifdef TIMER_0
ISR(TIMER0_COMP_vect)
{
    2366:	1f 92       	push	r1
    2368:	0f 92       	push	r0
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	0f 92       	push	r0
    236e:	11 24       	eor	r1, r1
    2370:	2f 93       	push	r18
    2372:	3f 93       	push	r19
    2374:	4f 93       	push	r20
    2376:	5f 93       	push	r21
    2378:	6f 93       	push	r22
    237a:	7f 93       	push	r23
    237c:	8f 93       	push	r24
    237e:	9f 93       	push	r25
    2380:	af 93       	push	r26
    2382:	bf 93       	push	r27
    2384:	ef 93       	push	r30
    2386:	ff 93       	push	r31
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_0_Compare_callBackPtr != NULL_PTR)
    2390:	80 91 7e 00 	lds	r24, 0x007E
    2394:	90 91 7f 00 	lds	r25, 0x007F
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	29 f0       	breq	.+10     	; 0x23a6 <__vector_19+0x40>
    {
        (*g_Timer_0_Compare_callBackPtr)();
    239c:	e0 91 7e 00 	lds	r30, 0x007E
    23a0:	f0 91 7f 00 	lds	r31, 0x007F
    23a4:	09 95       	icall
    }
}
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	ff 91       	pop	r31
    23ac:	ef 91       	pop	r30
    23ae:	bf 91       	pop	r27
    23b0:	af 91       	pop	r26
    23b2:	9f 91       	pop	r25
    23b4:	8f 91       	pop	r24
    23b6:	7f 91       	pop	r23
    23b8:	6f 91       	pop	r22
    23ba:	5f 91       	pop	r21
    23bc:	4f 91       	pop	r20
    23be:	3f 91       	pop	r19
    23c0:	2f 91       	pop	r18
    23c2:	0f 90       	pop	r0
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	0f 90       	pop	r0
    23c8:	1f 90       	pop	r1
    23ca:	18 95       	reti

000023cc <__vector_9>:


ISR(TIMER0_OVF_vect)
{
    23cc:	1f 92       	push	r1
    23ce:	0f 92       	push	r0
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	0f 92       	push	r0
    23d4:	11 24       	eor	r1, r1
    23d6:	2f 93       	push	r18
    23d8:	3f 93       	push	r19
    23da:	4f 93       	push	r20
    23dc:	5f 93       	push	r21
    23de:	6f 93       	push	r22
    23e0:	7f 93       	push	r23
    23e2:	8f 93       	push	r24
    23e4:	9f 93       	push	r25
    23e6:	af 93       	push	r26
    23e8:	bf 93       	push	r27
    23ea:	ef 93       	push	r30
    23ec:	ff 93       	push	r31
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_0_Overflow_callBackPtr != NULL_PTR)
    23f6:	80 91 7c 00 	lds	r24, 0x007C
    23fa:	90 91 7d 00 	lds	r25, 0x007D
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	29 f0       	breq	.+10     	; 0x240c <__vector_9+0x40>
    {
        (*g_Timer_0_Overflow_callBackPtr)();
    2402:	e0 91 7c 00 	lds	r30, 0x007C
    2406:	f0 91 7d 00 	lds	r31, 0x007D
    240a:	09 95       	icall
    }
}
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	ff 91       	pop	r31
    2412:	ef 91       	pop	r30
    2414:	bf 91       	pop	r27
    2416:	af 91       	pop	r26
    2418:	9f 91       	pop	r25
    241a:	8f 91       	pop	r24
    241c:	7f 91       	pop	r23
    241e:	6f 91       	pop	r22
    2420:	5f 91       	pop	r21
    2422:	4f 91       	pop	r20
    2424:	3f 91       	pop	r19
    2426:	2f 91       	pop	r18
    2428:	0f 90       	pop	r0
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	0f 90       	pop	r0
    242e:	1f 90       	pop	r1
    2430:	18 95       	reti

00002432 <__vector_3>:
#endif

#ifdef TIMER_2
ISR(TIMER2_COMP_vect)
{
    2432:	1f 92       	push	r1
    2434:	0f 92       	push	r0
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	0f 92       	push	r0
    243a:	11 24       	eor	r1, r1
    243c:	2f 93       	push	r18
    243e:	3f 93       	push	r19
    2440:	4f 93       	push	r20
    2442:	5f 93       	push	r21
    2444:	6f 93       	push	r22
    2446:	7f 93       	push	r23
    2448:	8f 93       	push	r24
    244a:	9f 93       	push	r25
    244c:	af 93       	push	r26
    244e:	bf 93       	push	r27
    2450:	ef 93       	push	r30
    2452:	ff 93       	push	r31
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_2_Compare_callBackPtr != NULL_PTR)
    245c:	80 91 82 00 	lds	r24, 0x0082
    2460:	90 91 83 00 	lds	r25, 0x0083
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	29 f0       	breq	.+10     	; 0x2472 <__vector_3+0x40>
    {
        (*g_Timer_2_Compare_callBackPtr)();
    2468:	e0 91 82 00 	lds	r30, 0x0082
    246c:	f0 91 83 00 	lds	r31, 0x0083
    2470:	09 95       	icall
    }
}
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	ff 91       	pop	r31
    2478:	ef 91       	pop	r30
    247a:	bf 91       	pop	r27
    247c:	af 91       	pop	r26
    247e:	9f 91       	pop	r25
    2480:	8f 91       	pop	r24
    2482:	7f 91       	pop	r23
    2484:	6f 91       	pop	r22
    2486:	5f 91       	pop	r21
    2488:	4f 91       	pop	r20
    248a:	3f 91       	pop	r19
    248c:	2f 91       	pop	r18
    248e:	0f 90       	pop	r0
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	0f 90       	pop	r0
    2494:	1f 90       	pop	r1
    2496:	18 95       	reti

00002498 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    2498:	1f 92       	push	r1
    249a:	0f 92       	push	r0
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	0f 92       	push	r0
    24a0:	11 24       	eor	r1, r1
    24a2:	2f 93       	push	r18
    24a4:	3f 93       	push	r19
    24a6:	4f 93       	push	r20
    24a8:	5f 93       	push	r21
    24aa:	6f 93       	push	r22
    24ac:	7f 93       	push	r23
    24ae:	8f 93       	push	r24
    24b0:	9f 93       	push	r25
    24b2:	af 93       	push	r26
    24b4:	bf 93       	push	r27
    24b6:	ef 93       	push	r30
    24b8:	ff 93       	push	r31
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_2_Overflow_callBackPtr != NULL_PTR)
    24c2:	80 91 80 00 	lds	r24, 0x0080
    24c6:	90 91 81 00 	lds	r25, 0x0081
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	29 f0       	breq	.+10     	; 0x24d8 <__vector_4+0x40>
    {
        (*g_Timer_2_Overflow_callBackPtr)();
    24ce:	e0 91 80 00 	lds	r30, 0x0080
    24d2:	f0 91 81 00 	lds	r31, 0x0081
    24d6:	09 95       	icall
    }
}
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	ff 91       	pop	r31
    24de:	ef 91       	pop	r30
    24e0:	bf 91       	pop	r27
    24e2:	af 91       	pop	r26
    24e4:	9f 91       	pop	r25
    24e6:	8f 91       	pop	r24
    24e8:	7f 91       	pop	r23
    24ea:	6f 91       	pop	r22
    24ec:	5f 91       	pop	r21
    24ee:	4f 91       	pop	r20
    24f0:	3f 91       	pop	r19
    24f2:	2f 91       	pop	r18
    24f4:	0f 90       	pop	r0
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	0f 90       	pop	r0
    24fa:	1f 90       	pop	r1
    24fc:	18 95       	reti

000024fe <__vector_6>:
#endif

#ifdef TIMER_1
ISR(TIMER1_COMPA_vect)
{
    24fe:	1f 92       	push	r1
    2500:	0f 92       	push	r0
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	0f 92       	push	r0
    2506:	11 24       	eor	r1, r1
    2508:	2f 93       	push	r18
    250a:	3f 93       	push	r19
    250c:	4f 93       	push	r20
    250e:	5f 93       	push	r21
    2510:	6f 93       	push	r22
    2512:	7f 93       	push	r23
    2514:	8f 93       	push	r24
    2516:	9f 93       	push	r25
    2518:	af 93       	push	r26
    251a:	bf 93       	push	r27
    251c:	ef 93       	push	r30
    251e:	ff 93       	push	r31
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_CompareA_callBackPtr != NULL_PTR)
    2528:	80 91 86 00 	lds	r24, 0x0086
    252c:	90 91 87 00 	lds	r25, 0x0087
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	29 f0       	breq	.+10     	; 0x253e <__vector_6+0x40>
    {
        (*g_Timer_1_CompareA_callBackPtr)();
    2534:	e0 91 86 00 	lds	r30, 0x0086
    2538:	f0 91 87 00 	lds	r31, 0x0087
    253c:	09 95       	icall
    }
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	ff 91       	pop	r31
    2544:	ef 91       	pop	r30
    2546:	bf 91       	pop	r27
    2548:	af 91       	pop	r26
    254a:	9f 91       	pop	r25
    254c:	8f 91       	pop	r24
    254e:	7f 91       	pop	r23
    2550:	6f 91       	pop	r22
    2552:	5f 91       	pop	r21
    2554:	4f 91       	pop	r20
    2556:	3f 91       	pop	r19
    2558:	2f 91       	pop	r18
    255a:	0f 90       	pop	r0
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	0f 90       	pop	r0
    2560:	1f 90       	pop	r1
    2562:	18 95       	reti

00002564 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    2564:	1f 92       	push	r1
    2566:	0f 92       	push	r0
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	0f 92       	push	r0
    256c:	11 24       	eor	r1, r1
    256e:	2f 93       	push	r18
    2570:	3f 93       	push	r19
    2572:	4f 93       	push	r20
    2574:	5f 93       	push	r21
    2576:	6f 93       	push	r22
    2578:	7f 93       	push	r23
    257a:	8f 93       	push	r24
    257c:	9f 93       	push	r25
    257e:	af 93       	push	r26
    2580:	bf 93       	push	r27
    2582:	ef 93       	push	r30
    2584:	ff 93       	push	r31
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_CompareB_callBackPtr != NULL_PTR)
    258e:	80 91 88 00 	lds	r24, 0x0088
    2592:	90 91 89 00 	lds	r25, 0x0089
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	29 f0       	breq	.+10     	; 0x25a4 <__vector_7+0x40>
    {
        (*g_Timer_1_CompareB_callBackPtr)();
    259a:	e0 91 88 00 	lds	r30, 0x0088
    259e:	f0 91 89 00 	lds	r31, 0x0089
    25a2:	09 95       	icall
    }
}
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	ff 91       	pop	r31
    25aa:	ef 91       	pop	r30
    25ac:	bf 91       	pop	r27
    25ae:	af 91       	pop	r26
    25b0:	9f 91       	pop	r25
    25b2:	8f 91       	pop	r24
    25b4:	7f 91       	pop	r23
    25b6:	6f 91       	pop	r22
    25b8:	5f 91       	pop	r21
    25ba:	4f 91       	pop	r20
    25bc:	3f 91       	pop	r19
    25be:	2f 91       	pop	r18
    25c0:	0f 90       	pop	r0
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	0f 90       	pop	r0
    25c6:	1f 90       	pop	r1
    25c8:	18 95       	reti

000025ca <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    25ca:	1f 92       	push	r1
    25cc:	0f 92       	push	r0
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	0f 92       	push	r0
    25d2:	11 24       	eor	r1, r1
    25d4:	2f 93       	push	r18
    25d6:	3f 93       	push	r19
    25d8:	4f 93       	push	r20
    25da:	5f 93       	push	r21
    25dc:	6f 93       	push	r22
    25de:	7f 93       	push	r23
    25e0:	8f 93       	push	r24
    25e2:	9f 93       	push	r25
    25e4:	af 93       	push	r26
    25e6:	bf 93       	push	r27
    25e8:	ef 93       	push	r30
    25ea:	ff 93       	push	r31
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_Overflow_callBackPtr != NULL_PTR)
    25f4:	80 91 84 00 	lds	r24, 0x0084
    25f8:	90 91 85 00 	lds	r25, 0x0085
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	29 f0       	breq	.+10     	; 0x260a <__vector_8+0x40>
    {
        (*g_Timer_1_Overflow_callBackPtr)();
    2600:	e0 91 84 00 	lds	r30, 0x0084
    2604:	f0 91 85 00 	lds	r31, 0x0085
    2608:	09 95       	icall
    }
}
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	ff 91       	pop	r31
    2610:	ef 91       	pop	r30
    2612:	bf 91       	pop	r27
    2614:	af 91       	pop	r26
    2616:	9f 91       	pop	r25
    2618:	8f 91       	pop	r24
    261a:	7f 91       	pop	r23
    261c:	6f 91       	pop	r22
    261e:	5f 91       	pop	r21
    2620:	4f 91       	pop	r20
    2622:	3f 91       	pop	r19
    2624:	2f 91       	pop	r18
    2626:	0f 90       	pop	r0
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	0f 90       	pop	r0
    262c:	1f 90       	pop	r1
    262e:	18 95       	reti

00002630 <Timer_0_init>:
 *                      Function Definitions                                    *
 *******************************************************************************/
#ifdef TIMER_0
/*Initialize timer 0 configuration*/
void Timer_0_init(const Timer_0_2_ConfigType *const cfg_ptr)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	00 d0       	rcall	.+0      	; 0x2636 <Timer_0_init+0x6>
    2636:	00 d0       	rcall	.+0      	; 0x2638 <Timer_0_init+0x8>
    2638:	0f 92       	push	r0
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register*/
    TCCR0 = ((((~cfg_ptr->mode) & 0b01)) << 7) | ((cfg_ptr->mode & 0b01) << 6) | (cfg_ptr->com_mode << 4) | ((cfg_ptr->mode & 0b10) << 2) | cfg_ptr->clock;
    2642:	83 e5       	ldi	r24, 0x53	; 83
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	9d 83       	std	Y+5, r25	; 0x05
    2648:	8c 83       	std	Y+4, r24	; 0x04
    264a:	e9 81       	ldd	r30, Y+1	; 0x01
    264c:	fa 81       	ldd	r31, Y+2	; 0x02
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	81 70       	andi	r24, 0x01	; 1
    2656:	90 70       	andi	r25, 0x00	; 0
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	19 f4       	brne	.+6      	; 0x2662 <Timer_0_init+0x32>
    265c:	90 e8       	ldi	r25, 0x80	; 128
    265e:	9b 83       	std	Y+3, r25	; 0x03
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <Timer_0_init+0x34>
    2662:	1b 82       	std	Y+3, r1	; 0x03
    2664:	e9 81       	ldd	r30, Y+1	; 0x01
    2666:	fa 81       	ldd	r31, Y+2	; 0x02
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	88 2f       	mov	r24, r24
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	81 70       	andi	r24, 0x01	; 1
    2670:	90 70       	andi	r25, 0x00	; 0
    2672:	00 24       	eor	r0, r0
    2674:	96 95       	lsr	r25
    2676:	87 95       	ror	r24
    2678:	07 94       	ror	r0
    267a:	96 95       	lsr	r25
    267c:	87 95       	ror	r24
    267e:	07 94       	ror	r0
    2680:	98 2f       	mov	r25, r24
    2682:	80 2d       	mov	r24, r0
    2684:	2b 81       	ldd	r18, Y+3	; 0x03
    2686:	28 2b       	or	r18, r24
    2688:	e9 81       	ldd	r30, Y+1	; 0x01
    268a:	fa 81       	ldd	r31, Y+2	; 0x02
    268c:	83 81       	ldd	r24, Z+3	; 0x03
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	82 95       	swap	r24
    2694:	92 95       	swap	r25
    2696:	90 7f       	andi	r25, 0xF0	; 240
    2698:	98 27       	eor	r25, r24
    269a:	80 7f       	andi	r24, 0xF0	; 240
    269c:	98 27       	eor	r25, r24
    269e:	28 2b       	or	r18, r24
    26a0:	e9 81       	ldd	r30, Y+1	; 0x01
    26a2:	fa 81       	ldd	r31, Y+2	; 0x02
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	88 2f       	mov	r24, r24
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	82 70       	andi	r24, 0x02	; 2
    26ac:	90 70       	andi	r25, 0x00	; 0
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	92 2f       	mov	r25, r18
    26b8:	98 2b       	or	r25, r24
    26ba:	e9 81       	ldd	r30, Y+1	; 0x01
    26bc:	fa 81       	ldd	r31, Y+2	; 0x02
    26be:	80 81       	ld	r24, Z
    26c0:	89 2b       	or	r24, r25
    26c2:	ec 81       	ldd	r30, Y+4	; 0x04
    26c4:	fd 81       	ldd	r31, Y+5	; 0x05
    26c6:	80 83       	st	Z, r24

    /*insert compare value to compare register*/
    OCR0 = cfg_ptr->compare_value;
    26c8:	ac e5       	ldi	r26, 0x5C	; 92
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e9 81       	ldd	r30, Y+1	; 0x01
    26ce:	fa 81       	ldd	r31, Y+2	; 0x02
    26d0:	81 81       	ldd	r24, Z+1	; 0x01
    26d2:	8c 93       	st	X, r24

    /*Initialize current counter value to 0*/
    TCNT0 = 0;
    26d4:	e2 e5       	ldi	r30, 0x52	; 82
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	10 82       	st	Z, r1
}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <Timer_0_setCompareValue>:

/*Set output compare value for timer0*/
void Timer_0_setCompareValue(const uint8 compare_val)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	0f 92       	push	r0
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR0 = compare_val;
    26f6:	ec e5       	ldi	r30, 0x5C	; 92
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	80 83       	st	Z, r24
}
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <Timer_0_setCounterValue>:

/*Set current counter value for timer0*/
void Timer_0_setCounterValue(const uint8 counter_val)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	0f 92       	push	r0
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT0 = counter_val;
    2712:	e2 e5       	ldi	r30, 0x52	; 82
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	80 83       	st	Z, r24
}
    271a:	0f 90       	pop	r0
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <Timer_0_setCompareCallBack>:

/*Set compare mode isr callback*/
void Timer_0_setCompareCallBack(void (*f_ptr)(void))
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	00 d0       	rcall	.+0      	; 0x2728 <Timer_0_setCompareCallBack+0x6>
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_0_Compare_callBackPtr = f_ptr;
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	90 93 7f 00 	sts	0x007F, r25
    2738:	80 93 7e 00 	sts	0x007E, r24
}
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <Timer_0_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_0_setOverflowCallBack(void (*f_ptr)(void))
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	00 d0       	rcall	.+0      	; 0x274c <Timer_0_setOverflowCallBack+0x6>
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_0_Overflow_callBackPtr = f_ptr;
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	90 93 7d 00 	sts	0x007D, r25
    275c:	80 93 7c 00 	sts	0x007C, r24
}
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <Timer_0_EnableCompareInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_0_EnableCompareInterrupt(void)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE0);
    2772:	a9 e5       	ldi	r26, 0x59	; 89
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e9 e5       	ldi	r30, 0x59	; 89
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	82 60       	ori	r24, 0x02	; 2
    277e:	8c 93       	st	X, r24
}
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <Timer_0_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_0_EnableOverflowInterrupt(void)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE0);
    278e:	a9 e5       	ldi	r26, 0x59	; 89
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e9 e5       	ldi	r30, 0x59	; 89
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	81 60       	ori	r24, 0x01	; 1
    279a:	8c 93       	st	X, r24
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <Timer_0_DisableCompareInterrupt>:
/*Disable compare mode Interrupt*/

void Timer_0_DisableCompareInterrupt(void)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE0);
    27aa:	a9 e5       	ldi	r26, 0x59	; 89
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e9 e5       	ldi	r30, 0x59	; 89
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	8d 7f       	andi	r24, 0xFD	; 253
    27b6:	8c 93       	st	X, r24
}
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <Timer_0_DisableOverflowInterrupt>:
/*Disable overflow mode Interrupt*/

void Timer_0_DisableOverflowInterrupt(void)
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE0);
    27c6:	a9 e5       	ldi	r26, 0x59	; 89
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e9 e5       	ldi	r30, 0x59	; 89
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	8e 7f       	andi	r24, 0xFE	; 254
    27d2:	8c 93       	st	X, r24
}
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <Timer_0_deInit>:

void Timer_0_deInit(void)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR0 = 0;
    27e2:	e3 e5       	ldi	r30, 0x53	; 83
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	10 82       	st	Z, r1
    OCR0 = 0;
    27e8:	ec e5       	ldi	r30, 0x5C	; 92
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	10 82       	st	Z, r1
    TCNT0 = 0;
    27ee:	e2 e5       	ldi	r30, 0x52	; 82
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE0);
    27f4:	a9 e5       	ldi	r26, 0x59	; 89
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e9 e5       	ldi	r30, 0x59	; 89
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	8d 7f       	andi	r24, 0xFD	; 253
    2800:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE0);
    2802:	a9 e5       	ldi	r26, 0x59	; 89
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e9 e5       	ldi	r30, 0x59	; 89
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	8e 7f       	andi	r24, 0xFE	; 254
    280e:	8c 93       	st	X, r24
}
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <Timer_0_setPrescalar>:

void Timer_0_setPrescalar(const Timer_ClockType clock)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	0f 92       	push	r0
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR0 = (TCCR0 & (~0X07)) | clock;
    2822:	a3 e5       	ldi	r26, 0x53	; 83
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e3 e5       	ldi	r30, 0x53	; 83
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	98 2f       	mov	r25, r24
    282e:	98 7f       	andi	r25, 0xF8	; 248
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	89 2b       	or	r24, r25
    2834:	8c 93       	st	X, r24
}
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <Timer_2_init>:
#endif
/*                           Timer 2                 */
#ifdef TIMER_2
void Timer_2_init(const Timer_0_2_ConfigType *const cfg_ptr)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	00 d0       	rcall	.+0      	; 0x2844 <Timer_2_init+0x6>
    2844:	00 d0       	rcall	.+0      	; 0x2846 <Timer_2_init+0x8>
    2846:	0f 92       	push	r0
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register*/
    TCCR2 = ((((~cfg_ptr->mode) & 0b01)) << 7) | ((cfg_ptr->mode & 0b01) << 6) | (cfg_ptr->com_mode << 4) | ((cfg_ptr->mode & 0b10) << 2) | cfg_ptr->clock;
    2850:	85 e4       	ldi	r24, 0x45	; 69
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9d 83       	std	Y+5, r25	; 0x05
    2856:	8c 83       	std	Y+4, r24	; 0x04
    2858:	e9 81       	ldd	r30, Y+1	; 0x01
    285a:	fa 81       	ldd	r31, Y+2	; 0x02
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	81 70       	andi	r24, 0x01	; 1
    2864:	90 70       	andi	r25, 0x00	; 0
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	19 f4       	brne	.+6      	; 0x2870 <Timer_2_init+0x32>
    286a:	90 e8       	ldi	r25, 0x80	; 128
    286c:	9b 83       	std	Y+3, r25	; 0x03
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <Timer_2_init+0x34>
    2870:	1b 82       	std	Y+3, r1	; 0x03
    2872:	e9 81       	ldd	r30, Y+1	; 0x01
    2874:	fa 81       	ldd	r31, Y+2	; 0x02
    2876:	82 81       	ldd	r24, Z+2	; 0x02
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	81 70       	andi	r24, 0x01	; 1
    287e:	90 70       	andi	r25, 0x00	; 0
    2880:	00 24       	eor	r0, r0
    2882:	96 95       	lsr	r25
    2884:	87 95       	ror	r24
    2886:	07 94       	ror	r0
    2888:	96 95       	lsr	r25
    288a:	87 95       	ror	r24
    288c:	07 94       	ror	r0
    288e:	98 2f       	mov	r25, r24
    2890:	80 2d       	mov	r24, r0
    2892:	2b 81       	ldd	r18, Y+3	; 0x03
    2894:	28 2b       	or	r18, r24
    2896:	e9 81       	ldd	r30, Y+1	; 0x01
    2898:	fa 81       	ldd	r31, Y+2	; 0x02
    289a:	83 81       	ldd	r24, Z+3	; 0x03
    289c:	88 2f       	mov	r24, r24
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	82 95       	swap	r24
    28a2:	92 95       	swap	r25
    28a4:	90 7f       	andi	r25, 0xF0	; 240
    28a6:	98 27       	eor	r25, r24
    28a8:	80 7f       	andi	r24, 0xF0	; 240
    28aa:	98 27       	eor	r25, r24
    28ac:	28 2b       	or	r18, r24
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	88 2f       	mov	r24, r24
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	82 70       	andi	r24, 0x02	; 2
    28ba:	90 70       	andi	r25, 0x00	; 0
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	92 2f       	mov	r25, r18
    28c6:	98 2b       	or	r25, r24
    28c8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ca:	fa 81       	ldd	r31, Y+2	; 0x02
    28cc:	80 81       	ld	r24, Z
    28ce:	89 2b       	or	r24, r25
    28d0:	ec 81       	ldd	r30, Y+4	; 0x04
    28d2:	fd 81       	ldd	r31, Y+5	; 0x05
    28d4:	80 83       	st	Z, r24

    /*insert compare value to compare register*/
    OCR2 = cfg_ptr->compare_value;
    28d6:	a3 e4       	ldi	r26, 0x43	; 67
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e9 81       	ldd	r30, Y+1	; 0x01
    28dc:	fa 81       	ldd	r31, Y+2	; 0x02
    28de:	81 81       	ldd	r24, Z+1	; 0x01
    28e0:	8c 93       	st	X, r24

    /*Initialize current counter value to 0*/
    TCNT2 = 0;
    28e2:	e4 e4       	ldi	r30, 0x44	; 68
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	10 82       	st	Z, r1
}
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <Timer_2_setCompareValue>:

/*Set output compare value for timer0*/
void Timer_2_setCompareValue(const uint8 compare_val)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	0f 92       	push	r0
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR2 = compare_val;
    2904:	e3 e4       	ldi	r30, 0x43	; 67
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	80 83       	st	Z, r24
}
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <Timer_2_setCounterValue>:

/*Set current counter value for timer0*/
void Timer_2_setCounterValue(const uint8 counter_val)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	0f 92       	push	r0
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT2 = counter_val;
    2920:	e4 e4       	ldi	r30, 0x44	; 68
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	80 83       	st	Z, r24
}
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <Timer_2_setCompareCallBack>:

/*Set compare mode isr callback*/
void Timer_2_setCompareCallBack(void (*f_ptr)(void))
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	00 d0       	rcall	.+0      	; 0x2936 <Timer_2_setCompareCallBack+0x6>
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	9a 83       	std	Y+2, r25	; 0x02
    293c:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_2_Compare_callBackPtr = f_ptr;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	90 93 83 00 	sts	0x0083, r25
    2946:	80 93 82 00 	sts	0x0082, r24
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <Timer_2_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_2_setOverflowCallBack(void (*f_ptr)(void))
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <Timer_2_setOverflowCallBack+0x6>
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_2_Overflow_callBackPtr = f_ptr;
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	90 93 81 00 	sts	0x0081, r25
    296a:	80 93 80 00 	sts	0x0080, r24
}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <Timer_2_EnableCompareInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_2_EnableCompareInterrupt(void)
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE2);
    2980:	a9 e5       	ldi	r26, 0x59	; 89
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e9 e5       	ldi	r30, 0x59	; 89
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	80 68       	ori	r24, 0x80	; 128
    298c:	8c 93       	st	X, r24
}
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <Timer_2_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_2_EnableOverflowInterrupt(void)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE2);
    299c:	a9 e5       	ldi	r26, 0x59	; 89
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e9 e5       	ldi	r30, 0x59	; 89
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	80 64       	ori	r24, 0x40	; 64
    29a8:	8c 93       	st	X, r24
}
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <Timer_2_DisableCompareInterrupt>:
/*Disable compare mode Interrupt*/

void Timer_2_DisableCompareInterrupt(void)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE2);
    29b8:	a9 e5       	ldi	r26, 0x59	; 89
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e9 e5       	ldi	r30, 0x59	; 89
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	8f 77       	andi	r24, 0x7F	; 127
    29c4:	8c 93       	st	X, r24
}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <Timer_2_DisableOverflowInterrupt>:
/*Disable overflow mode Interrupt*/

void Timer_2_DisableOverflowInterrupt(void)
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE2);
    29d4:	a9 e5       	ldi	r26, 0x59	; 89
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e9 e5       	ldi	r30, 0x59	; 89
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	8f 7b       	andi	r24, 0xBF	; 191
    29e0:	8c 93       	st	X, r24
}
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <Timer_2_deInit>:

void Timer_2_deInit(void)
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR2 = 0;
    29f0:	e5 e4       	ldi	r30, 0x45	; 69
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	10 82       	st	Z, r1
    OCR2 = 0;
    29f6:	e3 e4       	ldi	r30, 0x43	; 67
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	10 82       	st	Z, r1
    TCNT2 = 0;
    29fc:	e4 e4       	ldi	r30, 0x44	; 68
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE2);
    2a02:	a9 e5       	ldi	r26, 0x59	; 89
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e9 e5       	ldi	r30, 0x59	; 89
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	8f 77       	andi	r24, 0x7F	; 127
    2a0e:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE2);
    2a10:	a9 e5       	ldi	r26, 0x59	; 89
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e9 e5       	ldi	r30, 0x59	; 89
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	8f 7b       	andi	r24, 0xBF	; 191
    2a1c:	8c 93       	st	X, r24
}
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <Timer_2_setPrescalar>:

void Timer_2_setPrescalar(const Timer_ClockType clock)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	0f 92       	push	r0
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR2 = (TCCR2 & (~0X07)) | clock;
    2a30:	a5 e4       	ldi	r26, 0x45	; 69
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	e5 e4       	ldi	r30, 0x45	; 69
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	98 2f       	mov	r25, r24
    2a3c:	98 7f       	andi	r25, 0xF8	; 248
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	89 2b       	or	r24, r25
    2a42:	8c 93       	st	X, r24
}
    2a44:	0f 90       	pop	r0
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <Timer_1_init>:
#endif
/*                       Timer 1               */
#ifdef TIMER_1
void Timer_1_init(const Timer_1_ConfigType *const cfg_ptr)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <Timer_1_init+0x6>
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register A*/
    TCCR1A = (cfg_ptr->com_modeA << 6) | (cfg_ptr->com_modeB << 4) | (cfg_ptr->mode & 0x03);
    2a5a:	af e4       	ldi	r26, 0x4F	; 79
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a60:	fa 81       	ldd	r31, Y+2	; 0x02
    2a62:	86 81       	ldd	r24, Z+6	; 0x06
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	00 24       	eor	r0, r0
    2a6a:	96 95       	lsr	r25
    2a6c:	87 95       	ror	r24
    2a6e:	07 94       	ror	r0
    2a70:	96 95       	lsr	r25
    2a72:	87 95       	ror	r24
    2a74:	07 94       	ror	r0
    2a76:	98 2f       	mov	r25, r24
    2a78:	80 2d       	mov	r24, r0
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a80:	87 81       	ldd	r24, Z+7	; 0x07
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	82 95       	swap	r24
    2a88:	92 95       	swap	r25
    2a8a:	90 7f       	andi	r25, 0xF0	; 240
    2a8c:	98 27       	eor	r25, r24
    2a8e:	80 7f       	andi	r24, 0xF0	; 240
    2a90:	98 27       	eor	r25, r24
    2a92:	92 2f       	mov	r25, r18
    2a94:	98 2b       	or	r25, r24
    2a96:	e9 81       	ldd	r30, Y+1	; 0x01
    2a98:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9a:	85 81       	ldd	r24, Z+5	; 0x05
    2a9c:	83 70       	andi	r24, 0x03	; 3
    2a9e:	89 2b       	or	r24, r25
    2aa0:	8c 93       	st	X, r24

    if ((cfg_ptr->mode == 0) || (cfg_ptr->mode == 4) || (cfg_ptr->mode == 12))
    2aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa6:	85 81       	ldd	r24, Z+5	; 0x05
    2aa8:	88 23       	and	r24, r24
    2aaa:	51 f0       	breq	.+20     	; 0x2ac0 <Timer_1_init+0x74>
    2aac:	e9 81       	ldd	r30, Y+1	; 0x01
    2aae:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab0:	85 81       	ldd	r24, Z+5	; 0x05
    2ab2:	84 30       	cpi	r24, 0x04	; 4
    2ab4:	29 f0       	breq	.+10     	; 0x2ac0 <Timer_1_init+0x74>
    2ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aba:	85 81       	ldd	r24, Z+5	; 0x05
    2abc:	8c 30       	cpi	r24, 0x0C	; 12
    2abe:	39 f4       	brne	.+14     	; 0x2ace <Timer_1_init+0x82>
    {
        /*SET FOC  bits on non-PWM modes*/
        TCCR1A |= (0b11 << 2);
    2ac0:	af e4       	ldi	r26, 0x4F	; 79
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ef e4       	ldi	r30, 0x4F	; 79
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	8c 60       	ori	r24, 0x0C	; 12
    2acc:	8c 93       	st	X, r24
    }
    /*insert all configuration settings in the control register B*/
    TCCR1B = ((cfg_ptr->mode & 0xC0) << 1) | (cfg_ptr->clock);
    2ace:	ae e4       	ldi	r26, 0x4E	; 78
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad6:	85 81       	ldd	r24, Z+5	; 0x05
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	80 7c       	andi	r24, 0xC0	; 192
    2ade:	90 70       	andi	r25, 0x00	; 0
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	98 2f       	mov	r25, r24
    2ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aea:	80 81       	ld	r24, Z
    2aec:	89 2b       	or	r24, r25
    2aee:	8c 93       	st	X, r24
    /*insert compare value to its compare register*/
    OCR1A = cfg_ptr->compare_valueA;
    2af0:	aa e4       	ldi	r26, 0x4A	; 74
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e9 81       	ldd	r30, Y+1	; 0x01
    2af6:	fa 81       	ldd	r31, Y+2	; 0x02
    2af8:	81 81       	ldd	r24, Z+1	; 0x01
    2afa:	92 81       	ldd	r25, Z+2	; 0x02
    2afc:	11 96       	adiw	r26, 0x01	; 1
    2afe:	9c 93       	st	X, r25
    2b00:	8e 93       	st	-X, r24
    OCR1B = cfg_ptr->compare_valueB;
    2b02:	a8 e4       	ldi	r26, 0x48	; 72
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e9 81       	ldd	r30, Y+1	; 0x01
    2b08:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0a:	83 81       	ldd	r24, Z+3	; 0x03
    2b0c:	94 81       	ldd	r25, Z+4	; 0x04
    2b0e:	11 96       	adiw	r26, 0x01	; 1
    2b10:	9c 93       	st	X, r25
    2b12:	8e 93       	st	-X, r24

    /*Initialize current counter value to 0*/
    TCNT1 = 0;
    2b14:	ec e4       	ldi	r30, 0x4C	; 76
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	11 82       	std	Z+1, r1	; 0x01
    2b1a:	10 82       	st	Z, r1
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <Timer_1_deInit>:
void Timer_1_deInit(void)
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR1A = 0;
    2b2e:	ef e4       	ldi	r30, 0x4F	; 79
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	10 82       	st	Z, r1
    TCCR1B = 0;
    2b34:	ee e4       	ldi	r30, 0x4E	; 78
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	10 82       	st	Z, r1
    OCR1A = 0;
    2b3a:	ea e4       	ldi	r30, 0x4A	; 74
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	11 82       	std	Z+1, r1	; 0x01
    2b40:	10 82       	st	Z, r1
    OCR1B = 0;
    2b42:	e8 e4       	ldi	r30, 0x48	; 72
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	11 82       	std	Z+1, r1	; 0x01
    2b48:	10 82       	st	Z, r1
    TCNT1 = 0;
    2b4a:	ec e4       	ldi	r30, 0x4C	; 76
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	11 82       	std	Z+1, r1	; 0x01
    2b50:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE1A);
    2b52:	a9 e5       	ldi	r26, 0x59	; 89
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e9 e5       	ldi	r30, 0x59	; 89
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	8f 7e       	andi	r24, 0xEF	; 239
    2b5e:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, OCIE1B);
    2b60:	a9 e5       	ldi	r26, 0x59	; 89
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e9 e5       	ldi	r30, 0x59	; 89
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	87 7f       	andi	r24, 0xF7	; 247
    2b6c:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE1);
    2b6e:	a9 e5       	ldi	r26, 0x59	; 89
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e9 e5       	ldi	r30, 0x59	; 89
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8b 7f       	andi	r24, 0xFB	; 251
    2b7a:	8c 93       	st	X, r24
}
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <Timer_1_setCompareValueA>:
void Timer_1_setCompareValueA(const uint16 compare_val)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <Timer_1_setCompareValueA+0x6>
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	9a 83       	std	Y+2, r25	; 0x02
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR1A = compare_val;
    2b90:	ea e4       	ldi	r30, 0x4A	; 74
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	9a 81       	ldd	r25, Y+2	; 0x02
    2b98:	91 83       	std	Z+1, r25	; 0x01
    2b9a:	80 83       	st	Z, r24
}
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <Timer_1_setCompareValueB>:
void Timer_1_setCompareValueB(const uint16 compare_val)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <Timer_1_setCompareValueB+0x6>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR1B = compare_val;
    2bb4:	e8 e4       	ldi	r30, 0x48	; 72
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24
}
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	cf 91       	pop	r28
    2bc6:	df 91       	pop	r29
    2bc8:	08 95       	ret

00002bca <Timer_1_setCounterValue>:
/*Set current counter value for timer0*/
void Timer_1_setCounterValue(const uint16 counter_val)
{
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <Timer_1_setCounterValue+0x6>
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	9a 83       	std	Y+2, r25	; 0x02
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT1 = counter_val;
    2bd8:	ec e4       	ldi	r30, 0x4C	; 76
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
}
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <Timer_1_setCompareACallBack>:

/*Set compare mode isr callback*/
void Timer_1_setCompareACallBack(void (*f_ptr)(void))
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	00 d0       	rcall	.+0      	; 0x2bf4 <Timer_1_setCompareACallBack+0x6>
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_1_CompareA_callBackPtr = f_ptr;
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	90 93 87 00 	sts	0x0087, r25
    2c04:	80 93 86 00 	sts	0x0086, r24
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <Timer_1_setCompareBCallBack>:
/*Set compare mode isr callback*/
void Timer_1_setCompareBCallBack(void (*f_ptr)(void))
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <Timer_1_setCompareBCallBack+0x6>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	9a 83       	std	Y+2, r25	; 0x02
    2c1e:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_1_CompareB_callBackPtr = f_ptr;
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	90 93 89 00 	sts	0x0089, r25
    2c28:	80 93 88 00 	sts	0x0088, r24
}
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <Timer_1_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_1_setOverflowCallBack(void (*f_ptr)(void))
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <Timer_1_setOverflowCallBack+0x6>
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	9a 83       	std	Y+2, r25	; 0x02
    2c42:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_1_Overflow_callBackPtr = f_ptr;
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	90 93 85 00 	sts	0x0085, r25
    2c4c:	80 93 84 00 	sts	0x0084, r24
}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <Timer_1_EnableCompareAInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_1_EnableCompareAInterrupt(void)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
    2c62:	a9 e5       	ldi	r26, 0x59	; 89
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e9 e5       	ldi	r30, 0x59	; 89
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 61       	ori	r24, 0x10	; 16
    2c6e:	8c 93       	st	X, r24
}
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <Timer_1_EnableCompareBInterrupt>:
/*Enable compare mode Interrupt*/
void Timer_1_EnableCompareBInterrupt(void)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
    2c7e:	a9 e5       	ldi	r26, 0x59	; 89
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e9 e5       	ldi	r30, 0x59	; 89
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	88 60       	ori	r24, 0x08	; 8
    2c8a:	8c 93       	st	X, r24
}
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	08 95       	ret

00002c92 <Timer_1_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_1_EnableOverflowInterrupt(void)
{
    2c92:	df 93       	push	r29
    2c94:	cf 93       	push	r28
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
    2c9a:	a9 e5       	ldi	r26, 0x59	; 89
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e9 e5       	ldi	r30, 0x59	; 89
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	84 60       	ori	r24, 0x04	; 4
    2ca6:	8c 93       	st	X, r24
}
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <Timer_1_DisableCompareAInterrupt>:

/*Disable compare mode Interrupt*/
void Timer_1_DisableCompareAInterrupt(void)
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE1A);
    2cb6:	a9 e5       	ldi	r26, 0x59	; 89
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e9 e5       	ldi	r30, 0x59	; 89
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	8f 7e       	andi	r24, 0xEF	; 239
    2cc2:	8c 93       	st	X, r24
}
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <Timer_1_DisableCompareBInterrupt>:

/*Disable compare mode Interrupt*/
void Timer_1_DisableCompareBInterrupt(void)
{
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE1A);
    2cd2:	a9 e5       	ldi	r26, 0x59	; 89
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e9 e5       	ldi	r30, 0x59	; 89
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	8f 7e       	andi	r24, 0xEF	; 239
    2cde:	8c 93       	st	X, r24
}
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <Timer_1_DisableOverflowInterrupt>:

/*Disable overflow mode Interrupt*/
void Timer_1_DisableOverflowInterrupt(void)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE1);
    2cee:	a9 e5       	ldi	r26, 0x59	; 89
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e9 e5       	ldi	r30, 0x59	; 89
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8b 7f       	andi	r24, 0xFB	; 251
    2cfa:	8c 93       	st	X, r24
}
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <Timer_1_setPrescalar>:

void Timer_1_setPrescalar(const Timer_ClockType clock)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	0f 92       	push	r0
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR1B = (TCCR1B & (~0X07)) | clock;
    2d0e:	ae e4       	ldi	r26, 0x4E	; 78
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	ee e4       	ldi	r30, 0x4E	; 78
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	98 2f       	mov	r25, r24
    2d1a:	98 7f       	andi	r25, 0xF8	; 248
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	89 2b       	or	r24, r25
    2d20:	8c 93       	st	X, r24
}
    2d22:	0f 90       	pop	r0
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <__vector_11>:
/*******************************************************************************
 *                              ISRs                                                    *
 *******************************************************************************/

ISR(USART_RXC_vect)
{
    2d2a:	1f 92       	push	r1
    2d2c:	0f 92       	push	r0
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	0f 92       	push	r0
    2d32:	11 24       	eor	r1, r1
    2d34:	2f 93       	push	r18
    2d36:	3f 93       	push	r19
    2d38:	4f 93       	push	r20
    2d3a:	5f 93       	push	r21
    2d3c:	6f 93       	push	r22
    2d3e:	7f 93       	push	r23
    2d40:	8f 93       	push	r24
    2d42:	9f 93       	push	r25
    2d44:	af 93       	push	r26
    2d46:	bf 93       	push	r27
    2d48:	ef 93       	push	r30
    2d4a:	ff 93       	push	r31
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_Recieve_Complete_callBackPtr != NULL_PTR)
    2d54:	80 91 8a 00 	lds	r24, 0x008A
    2d58:	90 91 8b 00 	lds	r25, 0x008B
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	29 f0       	breq	.+10     	; 0x2d6a <__vector_11+0x40>
    {
        (*g_UART_Recieve_Complete_callBackPtr)();
    2d60:	e0 91 8a 00 	lds	r30, 0x008A
    2d64:	f0 91 8b 00 	lds	r31, 0x008B
    2d68:	09 95       	icall
    }
}
    2d6a:	cf 91       	pop	r28
    2d6c:	df 91       	pop	r29
    2d6e:	ff 91       	pop	r31
    2d70:	ef 91       	pop	r30
    2d72:	bf 91       	pop	r27
    2d74:	af 91       	pop	r26
    2d76:	9f 91       	pop	r25
    2d78:	8f 91       	pop	r24
    2d7a:	7f 91       	pop	r23
    2d7c:	6f 91       	pop	r22
    2d7e:	5f 91       	pop	r21
    2d80:	4f 91       	pop	r20
    2d82:	3f 91       	pop	r19
    2d84:	2f 91       	pop	r18
    2d86:	0f 90       	pop	r0
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	0f 90       	pop	r0
    2d8c:	1f 90       	pop	r1
    2d8e:	18 95       	reti

00002d90 <__vector_13>:
ISR(USART_TXC_vect)
{
    2d90:	1f 92       	push	r1
    2d92:	0f 92       	push	r0
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	0f 92       	push	r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	2f 93       	push	r18
    2d9c:	3f 93       	push	r19
    2d9e:	4f 93       	push	r20
    2da0:	5f 93       	push	r21
    2da2:	6f 93       	push	r22
    2da4:	7f 93       	push	r23
    2da6:	8f 93       	push	r24
    2da8:	9f 93       	push	r25
    2daa:	af 93       	push	r26
    2dac:	bf 93       	push	r27
    2dae:	ef 93       	push	r30
    2db0:	ff 93       	push	r31
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_Transmit_Complete_callBackPtr != NULL_PTR)
    2dba:	80 91 8c 00 	lds	r24, 0x008C
    2dbe:	90 91 8d 00 	lds	r25, 0x008D
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	29 f0       	breq	.+10     	; 0x2dd0 <__vector_13+0x40>
    {
        (*g_UART_Transmit_Complete_callBackPtr)();
    2dc6:	e0 91 8c 00 	lds	r30, 0x008C
    2dca:	f0 91 8d 00 	lds	r31, 0x008D
    2dce:	09 95       	icall
    }
}
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	ff 91       	pop	r31
    2dd6:	ef 91       	pop	r30
    2dd8:	bf 91       	pop	r27
    2dda:	af 91       	pop	r26
    2ddc:	9f 91       	pop	r25
    2dde:	8f 91       	pop	r24
    2de0:	7f 91       	pop	r23
    2de2:	6f 91       	pop	r22
    2de4:	5f 91       	pop	r21
    2de6:	4f 91       	pop	r20
    2de8:	3f 91       	pop	r19
    2dea:	2f 91       	pop	r18
    2dec:	0f 90       	pop	r0
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	0f 90       	pop	r0
    2df2:	1f 90       	pop	r1
    2df4:	18 95       	reti

00002df6 <__vector_12>:
ISR(USART_UDRE_vect)
{
    2df6:	1f 92       	push	r1
    2df8:	0f 92       	push	r0
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	0f 92       	push	r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	2f 93       	push	r18
    2e02:	3f 93       	push	r19
    2e04:	4f 93       	push	r20
    2e06:	5f 93       	push	r21
    2e08:	6f 93       	push	r22
    2e0a:	7f 93       	push	r23
    2e0c:	8f 93       	push	r24
    2e0e:	9f 93       	push	r25
    2e10:	af 93       	push	r26
    2e12:	bf 93       	push	r27
    2e14:	ef 93       	push	r30
    2e16:	ff 93       	push	r31
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_DataReg_Empty_callBackPtr != NULL_PTR)
    2e20:	80 91 8e 00 	lds	r24, 0x008E
    2e24:	90 91 8f 00 	lds	r25, 0x008F
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	29 f0       	breq	.+10     	; 0x2e36 <__vector_12+0x40>
    {
        (*g_UART_DataReg_Empty_callBackPtr)();
    2e2c:	e0 91 8e 00 	lds	r30, 0x008E
    2e30:	f0 91 8f 00 	lds	r31, 0x008F
    2e34:	09 95       	icall
    }
}
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	ff 91       	pop	r31
    2e3c:	ef 91       	pop	r30
    2e3e:	bf 91       	pop	r27
    2e40:	af 91       	pop	r26
    2e42:	9f 91       	pop	r25
    2e44:	8f 91       	pop	r24
    2e46:	7f 91       	pop	r23
    2e48:	6f 91       	pop	r22
    2e4a:	5f 91       	pop	r21
    2e4c:	4f 91       	pop	r20
    2e4e:	3f 91       	pop	r19
    2e50:	2f 91       	pop	r18
    2e52:	0f 90       	pop	r0
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	0f 90       	pop	r0
    2e58:	1f 90       	pop	r1
    2e5a:	18 95       	reti

00002e5c <UART_init>:
/*******************************************************************************
 *                      Function Definitions                                    *
 *******************************************************************************/

void UART_init(UART_ConfigType *cfg_ptr)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <UART_init+0x6>
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <UART_init+0x8>
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	9c 83       	std	Y+4, r25	; 0x04
    2e6a:	8b 83       	std	Y+3, r24	; 0x03
    uint16 baud = (((F_CPU) / (8UL * cfg_ptr->baud_rate)) - 1);
    2e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	cc 01       	movw	r24, r24
    2e76:	a0 e0       	ldi	r26, 0x00	; 0
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	aa 1f       	adc	r26, r26
    2e80:	bb 1f       	adc	r27, r27
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	aa 1f       	adc	r26, r26
    2e88:	bb 1f       	adc	r27, r27
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	aa 1f       	adc	r26, r26
    2e90:	bb 1f       	adc	r27, r27
    2e92:	9c 01       	movw	r18, r24
    2e94:	ad 01       	movw	r20, r26
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	92 e1       	ldi	r25, 0x12	; 18
    2e9a:	aa e7       	ldi	r26, 0x7A	; 122
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 17 1b 	call	0x362e	; 0x362e <__udivmodsi4>
    2ea6:	da 01       	movw	r26, r20
    2ea8:	c9 01       	movw	r24, r18
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	9a 83       	std	Y+2, r25	; 0x02
    2eae:	89 83       	std	Y+1, r24	; 0x01
    /*Description: UCSRA (uart control & status reg.)
        U2x =  1 for double transmission speed (8 Divisor instead of 16)
*/
    UCSRA = (1 << U2X);
    2eb0:	eb e2       	ldi	r30, 0x2B	; 43
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	80 83       	st	Z, r24
UDRIE   = 0 DATA REG. EMPTY INTERRUPT ENABLE BIT (DISABLE)
RXEN    = second bit of conn_direction to turn on transmitter
TXEN    = first bit of conn_direction to turn on reciever
UCSZ2   = c_size bit-3 
*/
    UCSRB = (cfg_ptr->conn_direction << 3) | (cfg_ptr->c_size & (0x04));
    2eb8:	aa e2       	ldi	r26, 0x2A	; 42
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ebe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec0:	86 81       	ldd	r24, Z+6	; 0x06
    2ec2:	88 2f       	mov	r24, r24
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ed6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ed8:	84 81       	ldd	r24, Z+4	; 0x04
    2eda:	84 70       	andi	r24, 0x04	; 4
    2edc:	89 2b       	or	r24, r25
    2ede:	8c 93       	st	X, r24
UPM1:0  = 00 DISABLE PARITY CHECKS
USBS    = 0 1-STOP-BIT SELECT
UPCOL   = CLOCK polarity MODE
UCSZ1:0 = first 2-bitts in character size;
*/
    UCSRC = (1 << URSEL) | (cfg_ptr->mode << 6) | ((cfg_ptr->c_size & 0x03) << 1) | cfg_ptr->clock_polarity;
    2ee0:	a0 e4       	ldi	r26, 0x40	; 64
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee8:	80 81       	ld	r24, Z
    2eea:	88 2f       	mov	r24, r24
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	00 24       	eor	r0, r0
    2ef0:	96 95       	lsr	r25
    2ef2:	87 95       	ror	r24
    2ef4:	07 94       	ror	r0
    2ef6:	96 95       	lsr	r25
    2ef8:	87 95       	ror	r24
    2efa:	07 94       	ror	r0
    2efc:	98 2f       	mov	r25, r24
    2efe:	80 2d       	mov	r24, r0
    2f00:	28 2f       	mov	r18, r24
    2f02:	20 68       	ori	r18, 0x80	; 128
    2f04:	eb 81       	ldd	r30, Y+3	; 0x03
    2f06:	fc 81       	ldd	r31, Y+4	; 0x04
    2f08:	84 81       	ldd	r24, Z+4	; 0x04
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	83 70       	andi	r24, 0x03	; 3
    2f10:	90 70       	andi	r25, 0x00	; 0
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	92 2f       	mov	r25, r18
    2f18:	98 2b       	or	r25, r24
    2f1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f1e:	87 81       	ldd	r24, Z+7	; 0x07
    2f20:	89 2b       	or	r24, r25
    2f22:	8c 93       	st	X, r24

    /*Description: UBBR
URSEL   = 0 TO WRITE TO UBBR
UBBR = BAUD RATE
*/
    UBRRH = (baud >> 8);
    2f24:	e0 e4       	ldi	r30, 0x40	; 64
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	89 2f       	mov	r24, r25
    2f2e:	99 27       	eor	r25, r25
    2f30:	80 83       	st	Z, r24
    UBRRL = (baud);
    2f32:	e9 e2       	ldi	r30, 0x29	; 41
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	80 83       	st	Z, r24
}
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <UART_sendData>:

/*data is uint16 in case of 9-bit mode*/
void UART_sendData(uint16 data)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <UART_sendData+0x6>
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	89 83       	std	Y+1, r24	; 0x01
    /*Wait untill data transmit buffer is empty */
    while (BIT_IS_CLEAR(UCSRA, UDRE))
    2f56:	eb e2       	ldi	r30, 0x2B	; 43
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	80 72       	andi	r24, 0x20	; 32
    2f62:	90 70       	andi	r25, 0x00	; 0
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	b9 f3       	breq	.-18     	; 0x2f56 <UART_sendData+0xe>
        ;
    /*in case of 9-bit uart insert 9nth bit into ucsrb*/
    if (BIT_IS_SET(UCSRB, UCSZ2))
    2f68:	ea e2       	ldi	r30, 0x2A	; 42
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	84 70       	andi	r24, 0x04	; 4
    2f74:	90 70       	andi	r25, 0x00	; 0
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	39 f0       	breq	.+14     	; 0x2f88 <UART_sendData+0x40>
    {
        UCSRB = (UCSRB & (~0X01)) | (data & 0x100);
    2f7a:	aa e2       	ldi	r26, 0x2A	; 42
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	ea e2       	ldi	r30, 0x2A	; 42
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	8e 7f       	andi	r24, 0xFE	; 254
    2f86:	8c 93       	st	X, r24
    }
    /*insert REST of data into UDR buffer to transmit*/
    UDR = data;
    2f88:	ec e2       	ldi	r30, 0x2C	; 44
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	80 83       	st	Z, r24
}
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <UART_recieveData>:

uint16 UART_recieveData(void)
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <UART_recieveData+0x6>
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    /*Wait untill recieve is complete*/
    while (BIT_IS_CLEAR(UCSRA, RXC))
    2fa4:	eb e2       	ldi	r30, 0x2B	; 43
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	88 23       	and	r24, r24
    2fac:	dc f7       	brge	.-10     	; 0x2fa4 <UART_recieveData+0xa>
        ;
    /*in case of 9-bit uart */
    if (BIT_IS_SET(UCSRB, UCSZ2))
    2fae:	ea e2       	ldi	r30, 0x2A	; 42
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	84 70       	andi	r24, 0x04	; 4
    2fba:	90 70       	andi	r25, 0x00	; 0
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	b1 f0       	breq	.+44     	; 0x2fec <UART_recieveData+0x52>
    {
        /*return recieved data in data register plus 9nth bit*/
        return (UDR | ((UCSRB & 0X02) << 7));
    2fc0:	ec e2       	ldi	r30, 0x2C	; 44
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	ea e2       	ldi	r30, 0x2A	; 42
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	88 2f       	mov	r24, r24
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	82 70       	andi	r24, 0x02	; 2
    2fd6:	90 70       	andi	r25, 0x00	; 0
    2fd8:	96 95       	lsr	r25
    2fda:	98 2f       	mov	r25, r24
    2fdc:	88 27       	eor	r24, r24
    2fde:	97 95       	ror	r25
    2fe0:	87 95       	ror	r24
    2fe2:	82 2b       	or	r24, r18
    2fe4:	93 2b       	or	r25, r19
    2fe6:	9a 83       	std	Y+2, r25	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	07 c0       	rjmp	.+14     	; 0x2ffa <UART_recieveData+0x60>
    }
    else
    {
        /*return recieved data in data register*/
        return UDR;
    2fec:	ec e2       	ldi	r30, 0x2C	; 44
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	3a 83       	std	Y+2, r19	; 0x02
    2ff8:	29 83       	std	Y+1, r18	; 0x01
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    }
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <UART_sendString>:

void UART_sendString(const uint8 *string)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	00 d0       	rcall	.+0      	; 0x300e <UART_sendString+0x6>
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	9a 83       	std	Y+2, r25	; 0x02
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	0c c0       	rjmp	.+24     	; 0x3030 <UART_sendString+0x28>
    /*send each character of our string until we reach the null terminator*/
    while (*string != '\0')
    {
        UART_sendData(*string);
    3018:	e9 81       	ldd	r30, Y+1	; 0x01
    301a:	fa 81       	ldd	r31, Y+2	; 0x02
    301c:	80 81       	ld	r24, Z
    301e:	88 2f       	mov	r24, r24
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <UART_sendData>
        string++;
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *string)
{
    /*send each character of our string until we reach the null terminator*/
    while (*string != '\0')
    3030:	e9 81       	ldd	r30, Y+1	; 0x01
    3032:	fa 81       	ldd	r31, Y+2	; 0x02
    3034:	80 81       	ld	r24, Z
    3036:	88 23       	and	r24, r24
    3038:	79 f7       	brne	.-34     	; 0x3018 <UART_sendString+0x10>
    {
        UART_sendData(*string);
        string++;
    }
}
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	08 95       	ret

00003044 <UART_recieveString>:
void UART_recieveString(uint8 *string)
{
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	00 d0       	rcall	.+0      	; 0x304e <UART_recieveString+0xa>
    304e:	00 d0       	rcall	.+0      	; 0x3050 <UART_recieveString+0xc>
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	9c 83       	std	Y+4, r25	; 0x04
    3056:	8b 83       	std	Y+3, r24	; 0x03
    /*recieve each character string until we find a '#' 
    then replace it with null terminator*/

    uint16 i = 0;
    3058:	1a 82       	std	Y+2, r1	; 0x02
    305a:	19 82       	std	Y+1, r1	; 0x01
    string[i] = UART_recieveData();
    305c:	2b 81       	ldd	r18, Y+3	; 0x03
    305e:	3c 81       	ldd	r19, Y+4	; 0x04
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	89 01       	movw	r16, r18
    3066:	08 0f       	add	r16, r24
    3068:	19 1f       	adc	r17, r25
    306a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <UART_recieveData>
    306e:	f8 01       	movw	r30, r16
    3070:	80 83       	st	Z, r24
    3072:	10 c0       	rjmp	.+32     	; 0x3094 <UART_recieveString+0x50>
    while (string[i] != '#')
    {
        i++;
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
        string[i] = UART_recieveData();
    307e:	2b 81       	ldd	r18, Y+3	; 0x03
    3080:	3c 81       	ldd	r19, Y+4	; 0x04
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	89 01       	movw	r16, r18
    3088:	08 0f       	add	r16, r24
    308a:	19 1f       	adc	r17, r25
    308c:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <UART_recieveData>
    3090:	f8 01       	movw	r30, r16
    3092:	80 83       	st	Z, r24
    /*recieve each character string until we find a '#' 
    then replace it with null terminator*/

    uint16 i = 0;
    string[i] = UART_recieveData();
    while (string[i] != '#')
    3094:	2b 81       	ldd	r18, Y+3	; 0x03
    3096:	3c 81       	ldd	r19, Y+4	; 0x04
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	9a 81       	ldd	r25, Y+2	; 0x02
    309c:	f9 01       	movw	r30, r18
    309e:	e8 0f       	add	r30, r24
    30a0:	f9 1f       	adc	r31, r25
    30a2:	80 81       	ld	r24, Z
    30a4:	83 32       	cpi	r24, 0x23	; 35
    30a6:	31 f7       	brne	.-52     	; 0x3074 <UART_recieveString+0x30>
    {
        i++;
        string[i] = UART_recieveData();
    }
    string[i] = '\0';
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	29 81       	ldd	r18, Y+1	; 0x01
    30ae:	3a 81       	ldd	r19, Y+2	; 0x02
    30b0:	fc 01       	movw	r30, r24
    30b2:	e2 0f       	add	r30, r18
    30b4:	f3 1f       	adc	r31, r19
    30b6:	10 82       	st	Z, r1
}
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	1f 91       	pop	r17
    30c6:	0f 91       	pop	r16
    30c8:	08 95       	ret

000030ca <UART_setRecieveCompleteCallback>:

void UART_setRecieveCompleteCallback(void (*f_ptr)(void))
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <UART_setRecieveCompleteCallback+0x6>
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
    /*set global pointer of the recieve interrupt functin in isr*/
    g_UART_Recieve_Complete_callBackPtr = f_ptr;
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	90 93 8b 00 	sts	0x008B, r25
    30e0:	80 93 8a 00 	sts	0x008A, r24
}
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <UART_setTransmitCompleteCallback>:
void UART_setTransmitCompleteCallback(void (*f_ptr)(void))
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	00 d0       	rcall	.+0      	; 0x30f4 <UART_setTransmitCompleteCallback+0x6>
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	9a 83       	std	Y+2, r25	; 0x02
    30fa:	89 83       	std	Y+1, r24	; 0x01
    /*set global pointer of the transmit interrupt functin in isr*/

    g_UART_Transmit_Complete_callBackPtr = f_ptr;
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	90 93 8d 00 	sts	0x008D, r25
    3104:	80 93 8c 00 	sts	0x008C, r24
}
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <UART_setDataEmptyCallback>:
void UART_setDataEmptyCallback(void (*f_ptr)(void))
{
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	00 d0       	rcall	.+0      	; 0x3118 <UART_setDataEmptyCallback+0x6>
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	9a 83       	std	Y+2, r25	; 0x02
    311e:	89 83       	std	Y+1, r24	; 0x01

    /*set global pointer of the data empty interrupt functin in isr*/
    g_UART_DataReg_Empty_callBackPtr = f_ptr;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	9a 81       	ldd	r25, Y+2	; 0x02
    3124:	90 93 8f 00 	sts	0x008F, r25
    3128:	80 93 8e 00 	sts	0x008E, r24
}
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	cf 91       	pop	r28
    3132:	df 91       	pop	r29
    3134:	08 95       	ret

00003136 <UART_enableRecieveCompleteInterrupt>:
void UART_enableRecieveCompleteInterrupt(void)
{
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    /*set interrupt enable bit for recieve complete*/
    SET_BIT(UCSRB, RXCIE);
    313e:	aa e2       	ldi	r26, 0x2A	; 42
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	ea e2       	ldi	r30, 0x2A	; 42
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	80 68       	ori	r24, 0x80	; 128
    314a:	8c 93       	st	X, r24
}
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <UART_enableTransmitCompleteInterrupt>:
void UART_enableTransmitCompleteInterrupt(void)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62

    /*set interrupt enable bit for transfer complete*/
    SET_BIT(UCSRB, TXCIE);
    315a:	aa e2       	ldi	r26, 0x2A	; 42
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	ea e2       	ldi	r30, 0x2A	; 42
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	80 64       	ori	r24, 0x40	; 64
    3166:	8c 93       	st	X, r24
}
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <UART_enableDataEmptyInterrupt>:
void UART_enableDataEmptyInterrupt(void)
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62

    /*set interrupt enable bit for data empty*/
    SET_BIT(UCSRB, UDRIE);
    3176:	aa e2       	ldi	r26, 0x2A	; 42
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	ea e2       	ldi	r30, 0x2A	; 42
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	80 62       	ori	r24, 0x20	; 32
    3182:	8c 93       	st	X, r24
}
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <UART_disableRecieveCompleteInterrupt>:
void UART_disableRecieveCompleteInterrupt(void)
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    /*clear interrupt enable bit for recieve complete*/
    CLEAR_BIT(UCSRB, RXCIE);
    3192:	aa e2       	ldi	r26, 0x2A	; 42
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	ea e2       	ldi	r30, 0x2A	; 42
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	8f 77       	andi	r24, 0x7F	; 127
    319e:	8c 93       	st	X, r24
}
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	08 95       	ret

000031a6 <UART_disableTransmitCompleteInterrupt>:
void UART_disableTransmitCompleteInterrupt(void)
{
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62

    /*clear interrupt enable bit for transfer complete*/
    CLEAR_BIT(UCSRB, TXCIE);
    31ae:	aa e2       	ldi	r26, 0x2A	; 42
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	ea e2       	ldi	r30, 0x2A	; 42
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	8f 7b       	andi	r24, 0xBF	; 191
    31ba:	8c 93       	st	X, r24
}
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <UART_disableDataEmptyInterrupt>:
void UART_disableDataEmptyInterrupt(void)
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62

    /*clear interrupt enable bit for data empty*/
    CLEAR_BIT(UCSRB, UDRIE);
    31ca:	aa e2       	ldi	r26, 0x2A	; 42
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	ea e2       	ldi	r30, 0x2A	; 42
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	8f 7d       	andi	r24, 0xDF	; 223
    31d6:	8c 93       	st	X, r24
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <Timer_1_delaySeconds>:
#include "Mydrivers/motor.h"
#include "Mydrivers/external_eeprom.h"
#include "projectConfig.h"

void Timer_1_delaySeconds(uint16 seconds)
{
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	60 97       	sbiw	r28, 0x10	; 16
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	9b 87       	std	Y+11, r25	; 0x0b
    31f4:	8a 87       	std	Y+10, r24	; 0x0a
    Timer_1_ConfigType cfg = {F_CPU_1024, 7812, 0, CTC_OCR1A, NORMAL_OCn_DISCONNECTED, NORMAL_OCn_DISCONNECTED};
    31f6:	ce 01       	movw	r24, r28
    31f8:	02 96       	adiw	r24, 0x02	; 2
    31fa:	9d 87       	std	Y+13, r25	; 0x0d
    31fc:	8c 87       	std	Y+12, r24	; 0x0c
    31fe:	e8 e6       	ldi	r30, 0x68	; 104
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	ff 87       	std	Y+15, r31	; 0x0f
    3204:	ee 87       	std	Y+14, r30	; 0x0e
    3206:	f8 e0       	ldi	r31, 0x08	; 8
    3208:	f8 8b       	std	Y+16, r31	; 0x10
    320a:	ee 85       	ldd	r30, Y+14	; 0x0e
    320c:	ff 85       	ldd	r31, Y+15	; 0x0f
    320e:	00 80       	ld	r0, Z
    3210:	8e 85       	ldd	r24, Y+14	; 0x0e
    3212:	9f 85       	ldd	r25, Y+15	; 0x0f
    3214:	01 96       	adiw	r24, 0x01	; 1
    3216:	9f 87       	std	Y+15, r25	; 0x0f
    3218:	8e 87       	std	Y+14, r24	; 0x0e
    321a:	ec 85       	ldd	r30, Y+12	; 0x0c
    321c:	fd 85       	ldd	r31, Y+13	; 0x0d
    321e:	00 82       	st	Z, r0
    3220:	8c 85       	ldd	r24, Y+12	; 0x0c
    3222:	9d 85       	ldd	r25, Y+13	; 0x0d
    3224:	01 96       	adiw	r24, 0x01	; 1
    3226:	9d 87       	std	Y+13, r25	; 0x0d
    3228:	8c 87       	std	Y+12, r24	; 0x0c
    322a:	98 89       	ldd	r25, Y+16	; 0x10
    322c:	91 50       	subi	r25, 0x01	; 1
    322e:	98 8b       	std	Y+16, r25	; 0x10
    3230:	e8 89       	ldd	r30, Y+16	; 0x10
    3232:	ee 23       	and	r30, r30
    3234:	51 f7       	brne	.-44     	; 0x320a <Timer_1_delaySeconds+0x2c>
    Timer_1_init(&cfg);
    3236:	ce 01       	movw	r24, r28
    3238:	02 96       	adiw	r24, 0x02	; 2
    323a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <Timer_1_init>
    for (uint8 i = 0; i < seconds; i++)
    323e:	19 82       	std	Y+1, r1	; 0x01
    3240:	17 c0       	rjmp	.+46     	; 0x3270 <Timer_1_delaySeconds+0x92>
    {
        while (BIT_IS_CLEAR(TIFR, OCF1A))
    3242:	e8 e5       	ldi	r30, 0x58	; 88
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	88 2f       	mov	r24, r24
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	80 71       	andi	r24, 0x10	; 16
    324e:	90 70       	andi	r25, 0x00	; 0
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	b9 f3       	breq	.-18     	; 0x3242 <Timer_1_delaySeconds+0x64>
            ;
        SET_BIT(TIFR, OCF1A);
    3254:	a8 e5       	ldi	r26, 0x58	; 88
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e8 e5       	ldi	r30, 0x58	; 88
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	80 61       	ori	r24, 0x10	; 16
    3260:	8c 93       	st	X, r24
        Timer_1_setCounterValue(0);
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 e5 15 	call	0x2bca	; 0x2bca <Timer_1_setCounterValue>

void Timer_1_delaySeconds(uint16 seconds)
{
    Timer_1_ConfigType cfg = {F_CPU_1024, 7812, 0, CTC_OCR1A, NORMAL_OCn_DISCONNECTED, NORMAL_OCn_DISCONNECTED};
    Timer_1_init(&cfg);
    for (uint8 i = 0; i < seconds; i++)
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	8f 5f       	subi	r24, 0xFF	; 255
    326e:	89 83       	std	Y+1, r24	; 0x01
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	8a 85       	ldd	r24, Y+10	; 0x0a
    3278:	9b 85       	ldd	r25, Y+11	; 0x0b
    327a:	28 17       	cp	r18, r24
    327c:	39 07       	cpc	r19, r25
    327e:	08 f3       	brcs	.-62     	; 0x3242 <Timer_1_delaySeconds+0x64>
            ;
        SET_BIT(TIFR, OCF1A);
        Timer_1_setCounterValue(0);
    }

    Timer_1_deInit();
    3280:	0e 94 93 15 	call	0x2b26	; 0x2b26 <Timer_1_deInit>
}
    3284:	60 96       	adiw	r28, 0x10	; 16
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	f8 94       	cli
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	cd bf       	out	0x3d, r28	; 61
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <init_APP_MC2>:
void init_APP_MC2()
{
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	2d 97       	sbiw	r28, 0x0d	; 13
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	f8 94       	cli
    32a4:	de bf       	out	0x3e, r29	; 62
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	cd bf       	out	0x3d, r28	; 61
    LCD_init();
    32aa:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <LCD_init>
    UART_ConfigType cfg = {ASYNCHRONOUS, DISABLE_PARITY, 9600, UART_8_BIT, UART_1_STOP_BIT, TRANSMITTER_RECIEVER, RISING_T_FALLING_R};
    32ae:	ce 01       	movw	r24, r28
    32b0:	01 96       	adiw	r24, 0x01	; 1
    32b2:	9a 87       	std	Y+10, r25	; 0x0a
    32b4:	89 87       	std	Y+9, r24	; 0x09
    32b6:	e0 e7       	ldi	r30, 0x70	; 112
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	fc 87       	std	Y+12, r31	; 0x0c
    32bc:	eb 87       	std	Y+11, r30	; 0x0b
    32be:	f8 e0       	ldi	r31, 0x08	; 8
    32c0:	fd 87       	std	Y+13, r31	; 0x0d
    32c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    32c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    32c6:	00 80       	ld	r0, Z
    32c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    32ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    32cc:	01 96       	adiw	r24, 0x01	; 1
    32ce:	9c 87       	std	Y+12, r25	; 0x0c
    32d0:	8b 87       	std	Y+11, r24	; 0x0b
    32d2:	e9 85       	ldd	r30, Y+9	; 0x09
    32d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    32d6:	00 82       	st	Z, r0
    32d8:	89 85       	ldd	r24, Y+9	; 0x09
    32da:	9a 85       	ldd	r25, Y+10	; 0x0a
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	9a 87       	std	Y+10, r25	; 0x0a
    32e0:	89 87       	std	Y+9, r24	; 0x09
    32e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    32e4:	91 50       	subi	r25, 0x01	; 1
    32e6:	9d 87       	std	Y+13, r25	; 0x0d
    32e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    32ea:	ee 23       	and	r30, r30
    32ec:	51 f7       	brne	.-44     	; 0x32c2 <init_APP_MC2+0x2c>
    UART_init(&cfg);
    32ee:	ce 01       	movw	r24, r28
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <UART_init>
    EEPROM_init();
    32f6:	0e 94 ed 05 	call	0xbda	; 0xbda <EEPROM_init>
    MOTOR_init();
    32fa:	0e 94 ac 10 	call	0x2158	; 0x2158 <MOTOR_init>
    SET_BIT(BUZZER_PORT_DIRECTION,BUZZER_PIN);
    32fe:	a4 e3       	ldi	r26, 0x34	; 52
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e4 e3       	ldi	r30, 0x34	; 52
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	80 61       	ori	r24, 0x10	; 16
    330a:	8c 93       	st	X, r24
}
    330c:	2d 96       	adiw	r28, 0x0d	; 13
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	08 95       	ret

0000331e <activate_alarm>:

void activate_alarm()
{
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(BUZZER_PORT, BUZZER_PIN);
    3326:	a5 e3       	ldi	r26, 0x35	; 53
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	e5 e3       	ldi	r30, 0x35	; 53
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 81       	ld	r24, Z
    3330:	80 61       	ori	r24, 0x10	; 16
    3332:	8c 93       	st	X, r24
    Timer_1_delaySeconds(ALARM_ON_PERIOD);
    3334:	8a e0       	ldi	r24, 0x0A	; 10
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	0e 94 ef 18 	call	0x31de	; 0x31de <Timer_1_delaySeconds>
    CLEAR_BIT(BUZZER_PORT, BUZZER_PIN);
    333c:	a5 e3       	ldi	r26, 0x35	; 53
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e5 e3       	ldi	r30, 0x35	; 53
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	8f 7e       	andi	r24, 0xEF	; 239
    3348:	8c 93       	st	X, r24
}
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <openDoor>:
void openDoor()
{
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    MOTOR_rotateClockwise();
    3358:	0e 94 c1 10 	call	0x2182	; 0x2182 <MOTOR_rotateClockwise>
    Timer_1_delaySeconds(OPEN_DOOR_PERIOD/2);
    335c:	85 e0       	ldi	r24, 0x05	; 5
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 ef 18 	call	0x31de	; 0x31de <Timer_1_delaySeconds>
    MOTOR_rotateAntiClockwise();
    3364:	0e 94 d6 10 	call	0x21ac	; 0x21ac <MOTOR_rotateAntiClockwise>
    Timer_1_delaySeconds(OPEN_DOOR_PERIOD/2);
    3368:	85 e0       	ldi	r24, 0x05	; 5
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	0e 94 ef 18 	call	0x31de	; 0x31de <Timer_1_delaySeconds>
    MOTOR_stop();
    3370:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <MOTOR_stop>
}
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <main>:

void main()
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	e7 97       	sbiw	r28, 0x37	; 55
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	cd bf       	out	0x3d, r28	; 61
    uint8 wrong_pass_count = 0;
    338e:	1e 8e       	std	Y+30, r1	; 0x1e
    uint8 first_time_check = 0;
    3390:	1f 8e       	std	Y+31, r1	; 0x1f
    uint8 recieveBuffer[12];
    uint8 passwordBuffer[12];
    uint8 key = 0;
    3392:	1d 8e       	std	Y+29, r1	; 0x1d
    init_APP_MC2();
    3394:	0e 94 4b 19 	call	0x3296	; 0x3296 <init_APP_MC2>
    while (1)
    {
        UART_recieveString(recieveBuffer);
    3398:	ce 01       	movw	r24, r28
    339a:	80 96       	adiw	r24, 0x20	; 32
    339c:	0e 94 22 18 	call	0x3044	; 0x3044 <UART_recieveString>
        EEPROM_readByte(EEPROM_PASSWORD_CHECK_FIRST_TIME_ADDRESS, &first_time_check); /*read address of first time check to compare it with original code*/
    33a0:	9e 01       	movw	r18, r28
    33a2:	21 5e       	subi	r18, 0xE1	; 225
    33a4:	3f 4f       	sbci	r19, 0xFF	; 255
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	92 e0       	ldi	r25, 0x02	; 2
    33aa:	b9 01       	movw	r22, r18
    33ac:	0e 94 45 06 	call	0xc8a	; 0xc8a <EEPROM_readByte>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	a0 e2       	ldi	r26, 0x20	; 32
    33b6:	b1 e4       	ldi	r27, 0x41	; 65
    33b8:	89 8f       	std	Y+25, r24	; 0x19
    33ba:	9a 8f       	std	Y+26, r25	; 0x1a
    33bc:	ab 8f       	std	Y+27, r26	; 0x1b
    33be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c0:	69 8d       	ldd	r22, Y+25	; 0x19
    33c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	4a ef       	ldi	r20, 0xFA	; 250
    33ce:	54 e4       	ldi	r21, 0x44	; 68
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	8d 8b       	std	Y+21, r24	; 0x15
    33da:	9e 8b       	std	Y+22, r25	; 0x16
    33dc:	af 8b       	std	Y+23, r26	; 0x17
    33de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33e0:	6d 89       	ldd	r22, Y+21	; 0x15
    33e2:	7e 89       	ldd	r23, Y+22	; 0x16
    33e4:	8f 89       	ldd	r24, Y+23	; 0x17
    33e6:	98 8d       	ldd	r25, Y+24	; 0x18
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e8       	ldi	r20, 0x80	; 128
    33ee:	5f e3       	ldi	r21, 0x3F	; 63
    33f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f4:	88 23       	and	r24, r24
    33f6:	2c f4       	brge	.+10     	; 0x3402 <main+0x88>
		__ticks = 1;
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	9c 8b       	std	Y+20, r25	; 0x14
    33fe:	8b 8b       	std	Y+19, r24	; 0x13
    3400:	3f c0       	rjmp	.+126    	; 0x3480 <main+0x106>
	else if (__tmp > 65535)
    3402:	6d 89       	ldd	r22, Y+21	; 0x15
    3404:	7e 89       	ldd	r23, Y+22	; 0x16
    3406:	8f 89       	ldd	r24, Y+23	; 0x17
    3408:	98 8d       	ldd	r25, Y+24	; 0x18
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	3f ef       	ldi	r19, 0xFF	; 255
    340e:	4f e7       	ldi	r20, 0x7F	; 127
    3410:	57 e4       	ldi	r21, 0x47	; 71
    3412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3416:	18 16       	cp	r1, r24
    3418:	4c f5       	brge	.+82     	; 0x346c <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    341a:	69 8d       	ldd	r22, Y+25	; 0x19
    341c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    341e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	51 e4       	ldi	r21, 0x41	; 65
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9c 8b       	std	Y+20, r25	; 0x14
    3440:	8b 8b       	std	Y+19, r24	; 0x13
    3442:	0f c0       	rjmp	.+30     	; 0x3462 <main+0xe8>
    3444:	88 ec       	ldi	r24, 0xC8	; 200
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9a 8b       	std	Y+18, r25	; 0x12
    344a:	89 8b       	std	Y+17, r24	; 0x11
    344c:	89 89       	ldd	r24, Y+17	; 0x11
    344e:	9a 89       	ldd	r25, Y+18	; 0x12
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	f1 f7       	brne	.-4      	; 0x3450 <main+0xd6>
    3454:	9a 8b       	std	Y+18, r25	; 0x12
    3456:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3458:	8b 89       	ldd	r24, Y+19	; 0x13
    345a:	9c 89       	ldd	r25, Y+20	; 0x14
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	9c 8b       	std	Y+20, r25	; 0x14
    3460:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3462:	8b 89       	ldd	r24, Y+19	; 0x13
    3464:	9c 89       	ldd	r25, Y+20	; 0x14
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	69 f7       	brne	.-38     	; 0x3444 <main+0xca>
    346a:	14 c0       	rjmp	.+40     	; 0x3494 <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346c:	6d 89       	ldd	r22, Y+21	; 0x15
    346e:	7e 89       	ldd	r23, Y+22	; 0x16
    3470:	8f 89       	ldd	r24, Y+23	; 0x17
    3472:	98 8d       	ldd	r25, Y+24	; 0x18
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9c 8b       	std	Y+20, r25	; 0x14
    347e:	8b 8b       	std	Y+19, r24	; 0x13
    3480:	8b 89       	ldd	r24, Y+19	; 0x13
    3482:	9c 89       	ldd	r25, Y+20	; 0x14
    3484:	98 8b       	std	Y+16, r25	; 0x10
    3486:	8f 87       	std	Y+15, r24	; 0x0f
    3488:	8f 85       	ldd	r24, Y+15	; 0x0f
    348a:	98 89       	ldd	r25, Y+16	; 0x10
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <main+0x112>
    3490:	98 8b       	std	Y+16, r25	; 0x10
    3492:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        if (first_time_check != EEPROM_PASSWORD_CHECK_FIRST_TIME_CODE)
    3494:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3496:	83 37       	cpi	r24, 0x73	; 115
    3498:	91 f0       	breq	.+36     	; 0x34be <main+0x144>
        {
            EEPROM_writeByte(EEPROM_PASSWORD_CHECK_FIRST_TIME_ADDRESS, EEPROM_PASSWORD_CHECK_FIRST_TIME_CODE);
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	92 e0       	ldi	r25, 0x02	; 2
    349e:	63 e7       	ldi	r22, 0x73	; 115
    34a0:	0e 94 04 06 	call	0xc08	; 0xc08 <EEPROM_writeByte>
            EEPROM_writeString(EEPROM_PASSWORD_START_ADDRESS, recieveBuffer);
    34a4:	9e 01       	movw	r18, r28
    34a6:	20 5e       	subi	r18, 0xE0	; 224
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	93 e0       	ldi	r25, 0x03	; 3
    34ae:	b9 01       	movw	r22, r18
    34b0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <EEPROM_writeString>
            UART_sendData(AUTHORIZED);
    34b4:	8a ee       	ldi	r24, 0xEA	; 234
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <UART_sendData>
    34bc:	29 c0       	rjmp	.+82     	; 0x3510 <main+0x196>
        }
        else
        {
            EEPROM_readString(EEPROM_PASSWORD_START_ADDRESS, passwordBuffer);
    34be:	9e 01       	movw	r18, r28
    34c0:	24 5d       	subi	r18, 0xD4	; 212
    34c2:	3f 4f       	sbci	r19, 0xFF	; 255
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	93 e0       	ldi	r25, 0x03	; 3
    34c8:	b9 01       	movw	r22, r18
    34ca:	0e 94 d5 07 	call	0xfaa	; 0xfaa <EEPROM_readString>
            if (strcmp(passwordBuffer, recieveBuffer) == 0)
    34ce:	ce 01       	movw	r24, r28
    34d0:	8c 96       	adiw	r24, 0x2c	; 44
    34d2:	9e 01       	movw	r18, r28
    34d4:	20 5e       	subi	r18, 0xE0	; 224
    34d6:	3f 4f       	sbci	r19, 0xFF	; 255
    34d8:	b9 01       	movw	r22, r18
    34da:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <strcmp>
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	29 f4       	brne	.+10     	; 0x34ec <main+0x172>
            {
                UART_sendData(AUTHORIZED);
    34e2:	8a ee       	ldi	r24, 0xEA	; 234
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <UART_sendData>
    34ea:	12 c0       	rjmp	.+36     	; 0x3510 <main+0x196>
            }
            else
            {
                wrong_pass_count++;
    34ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34ee:	8f 5f       	subi	r24, 0xFF	; 255
    34f0:	8e 8f       	std	Y+30, r24	; 0x1e
                if (wrong_pass_count > 4)
    34f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34f4:	85 30       	cpi	r24, 0x05	; 5
    34f6:	38 f0       	brcs	.+14     	; 0x3506 <main+0x18c>
                {
                    wrong_pass_count = 0;
    34f8:	1e 8e       	std	Y+30, r1	; 0x1e
                    UART_sendData(ALARM_ON);
    34fa:	8a e2       	ldi	r24, 0x2A	; 42
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <UART_sendData>
                    activate_alarm();
    3502:	0e 94 8f 19 	call	0x331e	; 0x331e <activate_alarm>
                }
                UART_sendData(UNAUTHORIZED);
    3506:	86 e5       	ldi	r24, 0x56	; 86
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <UART_sendData>
    350e:	44 cf       	rjmp	.-376    	; 0x3398 <main+0x1e>
                continue;
            }
        }
        key = UART_recieveData();
    3510:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <UART_recieveData>
    3514:	8d 8f       	std	Y+29, r24	; 0x1d
    3516:	03 c0       	rjmp	.+6      	; 0x351e <main+0x1a4>
        while ((key != '+') && (key != '-'))
        {
            key = UART_recieveData();
    3518:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <UART_recieveData>
    351c:	8d 8f       	std	Y+29, r24	; 0x1d
                UART_sendData(UNAUTHORIZED);
                continue;
            }
        }
        key = UART_recieveData();
        while ((key != '+') && (key != '-'))
    351e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3520:	8b 32       	cpi	r24, 0x2B	; 43
    3522:	19 f0       	breq	.+6      	; 0x352a <main+0x1b0>
    3524:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3526:	8d 32       	cpi	r24, 0x2D	; 45
    3528:	b9 f7       	brne	.-18     	; 0x3518 <main+0x19e>
        {
            key = UART_recieveData();
        }
        if (key == '+')
    352a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    352c:	8b 32       	cpi	r24, 0x2B	; 43
    352e:	19 f4       	brne	.+6      	; 0x3536 <main+0x1bc>
        {
            openDoor();
    3530:	0e 94 a8 19 	call	0x3350	; 0x3350 <openDoor>
    3534:	31 cf       	rjmp	.-414    	; 0x3398 <main+0x1e>
        }
        else if (key == '-')
    3536:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3538:	8d 32       	cpi	r24, 0x2D	; 45
    353a:	09 f0       	breq	.+2      	; 0x353e <main+0x1c4>
    353c:	2d cf       	rjmp	.-422    	; 0x3398 <main+0x1e>
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	a0 e2       	ldi	r26, 0x20	; 32
    3544:	b1 e4       	ldi	r27, 0x41	; 65
    3546:	8b 87       	std	Y+11, r24	; 0x0b
    3548:	9c 87       	std	Y+12, r25	; 0x0c
    354a:	ad 87       	std	Y+13, r26	; 0x0d
    354c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    354e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3550:	7c 85       	ldd	r23, Y+12	; 0x0c
    3552:	8d 85       	ldd	r24, Y+13	; 0x0d
    3554:	9e 85       	ldd	r25, Y+14	; 0x0e
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	4a ef       	ldi	r20, 0xFA	; 250
    355c:	54 e4       	ldi	r21, 0x44	; 68
    355e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	8f 83       	std	Y+7, r24	; 0x07
    3568:	98 87       	std	Y+8, r25	; 0x08
    356a:	a9 87       	std	Y+9, r26	; 0x09
    356c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    356e:	6f 81       	ldd	r22, Y+7	; 0x07
    3570:	78 85       	ldd	r23, Y+8	; 0x08
    3572:	89 85       	ldd	r24, Y+9	; 0x09
    3574:	9a 85       	ldd	r25, Y+10	; 0x0a
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	40 e8       	ldi	r20, 0x80	; 128
    357c:	5f e3       	ldi	r21, 0x3F	; 63
    357e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3582:	88 23       	and	r24, r24
    3584:	2c f4       	brge	.+10     	; 0x3590 <main+0x216>
		__ticks = 1;
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	9e 83       	std	Y+6, r25	; 0x06
    358c:	8d 83       	std	Y+5, r24	; 0x05
    358e:	3f c0       	rjmp	.+126    	; 0x360e <main+0x294>
	else if (__tmp > 65535)
    3590:	6f 81       	ldd	r22, Y+7	; 0x07
    3592:	78 85       	ldd	r23, Y+8	; 0x08
    3594:	89 85       	ldd	r24, Y+9	; 0x09
    3596:	9a 85       	ldd	r25, Y+10	; 0x0a
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	3f ef       	ldi	r19, 0xFF	; 255
    359c:	4f e7       	ldi	r20, 0x7F	; 127
    359e:	57 e4       	ldi	r21, 0x47	; 71
    35a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a4:	18 16       	cp	r1, r24
    35a6:	4c f5       	brge	.+82     	; 0x35fa <main+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	40 e2       	ldi	r20, 0x20	; 32
    35b6:	51 e4       	ldi	r21, 0x41	; 65
    35b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	bc 01       	movw	r22, r24
    35c2:	cd 01       	movw	r24, r26
    35c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	9e 83       	std	Y+6, r25	; 0x06
    35ce:	8d 83       	std	Y+5, r24	; 0x05
    35d0:	0f c0       	rjmp	.+30     	; 0x35f0 <main+0x276>
    35d2:	88 ec       	ldi	r24, 0xC8	; 200
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	9c 83       	std	Y+4, r25	; 0x04
    35d8:	8b 83       	std	Y+3, r24	; 0x03
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	9c 81       	ldd	r25, Y+4	; 0x04
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <main+0x264>
    35e2:	9c 83       	std	Y+4, r25	; 0x04
    35e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	9e 83       	std	Y+6, r25	; 0x06
    35ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f0:	8d 81       	ldd	r24, Y+5	; 0x05
    35f2:	9e 81       	ldd	r25, Y+6	; 0x06
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	69 f7       	brne	.-38     	; 0x35d2 <main+0x258>
    35f8:	14 c0       	rjmp	.+40     	; 0x3622 <main+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fa:	6f 81       	ldd	r22, Y+7	; 0x07
    35fc:	78 85       	ldd	r23, Y+8	; 0x08
    35fe:	89 85       	ldd	r24, Y+9	; 0x09
    3600:	9a 85       	ldd	r25, Y+10	; 0x0a
    3602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	9e 83       	std	Y+6, r25	; 0x06
    360c:	8d 83       	std	Y+5, r24	; 0x05
    360e:	8d 81       	ldd	r24, Y+5	; 0x05
    3610:	9e 81       	ldd	r25, Y+6	; 0x06
    3612:	9a 83       	std	Y+2, r25	; 0x02
    3614:	89 83       	std	Y+1, r24	; 0x01
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	9a 81       	ldd	r25, Y+2	; 0x02
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	f1 f7       	brne	.-4      	; 0x361a <main+0x2a0>
    361e:	9a 83       	std	Y+2, r25	; 0x02
    3620:	89 83       	std	Y+1, r24	; 0x01
        {
            /*to change password, pretend it's first time by altering first time check value*/
            _delay_ms(10);
            EEPROM_writeByte(EEPROM_PASSWORD_CHECK_FIRST_TIME_ADDRESS, 0x0);
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	92 e0       	ldi	r25, 0x02	; 2
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	0e 94 04 06 	call	0xc08	; 0xc08 <EEPROM_writeByte>
    362c:	b5 ce       	rjmp	.-662    	; 0x3398 <main+0x1e>

0000362e <__udivmodsi4>:
    362e:	a1 e2       	ldi	r26, 0x21	; 33
    3630:	1a 2e       	mov	r1, r26
    3632:	aa 1b       	sub	r26, r26
    3634:	bb 1b       	sub	r27, r27
    3636:	fd 01       	movw	r30, r26
    3638:	0d c0       	rjmp	.+26     	; 0x3654 <__udivmodsi4_ep>

0000363a <__udivmodsi4_loop>:
    363a:	aa 1f       	adc	r26, r26
    363c:	bb 1f       	adc	r27, r27
    363e:	ee 1f       	adc	r30, r30
    3640:	ff 1f       	adc	r31, r31
    3642:	a2 17       	cp	r26, r18
    3644:	b3 07       	cpc	r27, r19
    3646:	e4 07       	cpc	r30, r20
    3648:	f5 07       	cpc	r31, r21
    364a:	20 f0       	brcs	.+8      	; 0x3654 <__udivmodsi4_ep>
    364c:	a2 1b       	sub	r26, r18
    364e:	b3 0b       	sbc	r27, r19
    3650:	e4 0b       	sbc	r30, r20
    3652:	f5 0b       	sbc	r31, r21

00003654 <__udivmodsi4_ep>:
    3654:	66 1f       	adc	r22, r22
    3656:	77 1f       	adc	r23, r23
    3658:	88 1f       	adc	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	1a 94       	dec	r1
    365e:	69 f7       	brne	.-38     	; 0x363a <__udivmodsi4_loop>
    3660:	60 95       	com	r22
    3662:	70 95       	com	r23
    3664:	80 95       	com	r24
    3666:	90 95       	com	r25
    3668:	9b 01       	movw	r18, r22
    366a:	ac 01       	movw	r20, r24
    366c:	bd 01       	movw	r22, r26
    366e:	cf 01       	movw	r24, r30
    3670:	08 95       	ret

00003672 <__prologue_saves__>:
    3672:	2f 92       	push	r2
    3674:	3f 92       	push	r3
    3676:	4f 92       	push	r4
    3678:	5f 92       	push	r5
    367a:	6f 92       	push	r6
    367c:	7f 92       	push	r7
    367e:	8f 92       	push	r8
    3680:	9f 92       	push	r9
    3682:	af 92       	push	r10
    3684:	bf 92       	push	r11
    3686:	cf 92       	push	r12
    3688:	df 92       	push	r13
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	ca 1b       	sub	r28, r26
    369c:	db 0b       	sbc	r29, r27
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	09 94       	ijmp

000036aa <__epilogue_restores__>:
    36aa:	2a 88       	ldd	r2, Y+18	; 0x12
    36ac:	39 88       	ldd	r3, Y+17	; 0x11
    36ae:	48 88       	ldd	r4, Y+16	; 0x10
    36b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    36b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    36b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    36b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    36b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    36ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    36bc:	b9 84       	ldd	r11, Y+9	; 0x09
    36be:	c8 84       	ldd	r12, Y+8	; 0x08
    36c0:	df 80       	ldd	r13, Y+7	; 0x07
    36c2:	ee 80       	ldd	r14, Y+6	; 0x06
    36c4:	fd 80       	ldd	r15, Y+5	; 0x05
    36c6:	0c 81       	ldd	r16, Y+4	; 0x04
    36c8:	1b 81       	ldd	r17, Y+3	; 0x03
    36ca:	aa 81       	ldd	r26, Y+2	; 0x02
    36cc:	b9 81       	ldd	r27, Y+1	; 0x01
    36ce:	ce 0f       	add	r28, r30
    36d0:	d1 1d       	adc	r29, r1
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	ed 01       	movw	r28, r26
    36de:	08 95       	ret

000036e0 <strcmp>:
    36e0:	fb 01       	movw	r30, r22
    36e2:	dc 01       	movw	r26, r24
    36e4:	8d 91       	ld	r24, X+
    36e6:	01 90       	ld	r0, Z+
    36e8:	80 19       	sub	r24, r0
    36ea:	01 10       	cpse	r0, r1
    36ec:	d9 f3       	breq	.-10     	; 0x36e4 <strcmp+0x4>
    36ee:	99 0b       	sbc	r25, r25
    36f0:	08 95       	ret

000036f2 <itoa>:
    36f2:	fb 01       	movw	r30, r22
    36f4:	9f 01       	movw	r18, r30
    36f6:	e8 94       	clt
    36f8:	42 30       	cpi	r20, 0x02	; 2
    36fa:	c4 f0       	brlt	.+48     	; 0x372c <itoa+0x3a>
    36fc:	45 32       	cpi	r20, 0x25	; 37
    36fe:	b4 f4       	brge	.+44     	; 0x372c <itoa+0x3a>
    3700:	4a 30       	cpi	r20, 0x0A	; 10
    3702:	29 f4       	brne	.+10     	; 0x370e <itoa+0x1c>
    3704:	97 fb       	bst	r25, 7
    3706:	1e f4       	brtc	.+6      	; 0x370e <itoa+0x1c>
    3708:	90 95       	com	r25
    370a:	81 95       	neg	r24
    370c:	9f 4f       	sbci	r25, 0xFF	; 255
    370e:	64 2f       	mov	r22, r20
    3710:	77 27       	eor	r23, r23
    3712:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodhi4>
    3716:	80 5d       	subi	r24, 0xD0	; 208
    3718:	8a 33       	cpi	r24, 0x3A	; 58
    371a:	0c f0       	brlt	.+2      	; 0x371e <itoa+0x2c>
    371c:	89 5d       	subi	r24, 0xD9	; 217
    371e:	81 93       	st	Z+, r24
    3720:	cb 01       	movw	r24, r22
    3722:	00 97       	sbiw	r24, 0x00	; 0
    3724:	a1 f7       	brne	.-24     	; 0x370e <itoa+0x1c>
    3726:	16 f4       	brtc	.+4      	; 0x372c <itoa+0x3a>
    3728:	5d e2       	ldi	r21, 0x2D	; 45
    372a:	51 93       	st	Z+, r21
    372c:	10 82       	st	Z, r1
    372e:	c9 01       	movw	r24, r18
    3730:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <strrev>

00003734 <strrev>:
    3734:	dc 01       	movw	r26, r24
    3736:	fc 01       	movw	r30, r24
    3738:	67 2f       	mov	r22, r23
    373a:	71 91       	ld	r23, Z+
    373c:	77 23       	and	r23, r23
    373e:	e1 f7       	brne	.-8      	; 0x3738 <strrev+0x4>
    3740:	32 97       	sbiw	r30, 0x02	; 2
    3742:	04 c0       	rjmp	.+8      	; 0x374c <strrev+0x18>
    3744:	7c 91       	ld	r23, X
    3746:	6d 93       	st	X+, r22
    3748:	70 83       	st	Z, r23
    374a:	62 91       	ld	r22, -Z
    374c:	ae 17       	cp	r26, r30
    374e:	bf 07       	cpc	r27, r31
    3750:	c8 f3       	brcs	.-14     	; 0x3744 <strrev+0x10>
    3752:	08 95       	ret

00003754 <__udivmodhi4>:
    3754:	aa 1b       	sub	r26, r26
    3756:	bb 1b       	sub	r27, r27
    3758:	51 e1       	ldi	r21, 0x11	; 17
    375a:	07 c0       	rjmp	.+14     	; 0x376a <__udivmodhi4_ep>

0000375c <__udivmodhi4_loop>:
    375c:	aa 1f       	adc	r26, r26
    375e:	bb 1f       	adc	r27, r27
    3760:	a6 17       	cp	r26, r22
    3762:	b7 07       	cpc	r27, r23
    3764:	10 f0       	brcs	.+4      	; 0x376a <__udivmodhi4_ep>
    3766:	a6 1b       	sub	r26, r22
    3768:	b7 0b       	sbc	r27, r23

0000376a <__udivmodhi4_ep>:
    376a:	88 1f       	adc	r24, r24
    376c:	99 1f       	adc	r25, r25
    376e:	5a 95       	dec	r21
    3770:	a9 f7       	brne	.-22     	; 0x375c <__udivmodhi4_loop>
    3772:	80 95       	com	r24
    3774:	90 95       	com	r25
    3776:	bc 01       	movw	r22, r24
    3778:	cd 01       	movw	r24, r26
    377a:	08 95       	ret

0000377c <_exit>:
    377c:	f8 94       	cli

0000377e <__stop_program>:
    377e:	ff cf       	rjmp	.-2      	; 0x377e <__stop_program>
