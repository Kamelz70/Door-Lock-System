
FINAL_Proj_MC2_control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000027ae  00002842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800078  00800078  0000285a  2**0
                  ALLOC
  3 .stab         00002b20  00000000  00000000  0000285c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002009  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007385  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007635  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000927e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a169  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b305  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__vector_3>
      10:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__vector_6>
      1c:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_7>
      20:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__vector_8>
      24:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__vector_11>
      30:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__vector_12>
      34:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 42 11 	call	0x2284	; 0x2284 <main>
      8a:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_init>:
/*******************************************************************************
 *                               Function Definitions                                    *
 *******************************************************************************/

void EEPROM_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
    /*Init. the twi module*/
    TWI_ConfigType cfg = {EEPROM_TWI_BIT_RATE, EEPROM_TWI_PRE_SCALER, 0X01, GENERAL_CALL_OFF};
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	1c 82       	std	Y+4, r1	; 0x04
    TWI_init(&cfg);
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <TWI_init>
}
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <EEPROM_writeByte+0x6>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <EEPROM_writeByte+0x8>
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	6b 83       	std	Y+3, r22	; 0x03
    /*send a start bit*/
    TWI_start();
     b86:	0e 94 27 09 	call	0x124e	; 0x124e <TWI_start>

    /*check if start bit is successfully sent*/
    if (TWI_getStatus() != TW_START)
     b8a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     b8e:	88 30       	cpi	r24, 0x08	; 8
     b90:	11 f0       	breq	.+4      	; 0xb96 <EEPROM_writeByte+0x22>
        return ERROR;
     b92:	1c 82       	std	Y+4, r1	; 0x04
     b94:	28 c0       	rjmp	.+80     	; 0xbe6 <EEPROM_writeByte+0x72>

    /*send address of eeprom along with 3 bits from memory address with a r/w bit of 0 to write*/
    TWI_write((uint8)(0xA0 | ((u16addr & 0x700) >> 7)));
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	80 70       	andi	r24, 0x00	; 0
     b9c:	97 70       	andi	r25, 0x07	; 7
     b9e:	88 0f       	add	r24, r24
     ba0:	89 2f       	mov	r24, r25
     ba2:	88 1f       	adc	r24, r24
     ba4:	99 0b       	sbc	r25, r25
     ba6:	91 95       	neg	r25
     ba8:	80 6a       	ori	r24, 0xA0	; 160
     baa:	0e 94 42 09 	call	0x1284	; 0x1284 <TWI_write>

    /*make sure address is sent*/
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     bae:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     bb2:	88 31       	cpi	r24, 0x18	; 24
     bb4:	11 f0       	breq	.+4      	; 0xbba <EEPROM_writeByte+0x46>
        return ERROR;
     bb6:	1c 82       	std	Y+4, r1	; 0x04
     bb8:	16 c0       	rjmp	.+44     	; 0xbe6 <EEPROM_writeByte+0x72>

    /*send rest of memory address to write into*/
    TWI_write((uint8)u16addr);
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	0e 94 42 09 	call	0x1284	; 0x1284 <TWI_write>

    /*make sure address is sent*/
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     bc0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     bc4:	88 32       	cpi	r24, 0x28	; 40
     bc6:	11 f0       	breq	.+4      	; 0xbcc <EEPROM_writeByte+0x58>
        return ERROR;
     bc8:	1c 82       	std	Y+4, r1	; 0x04
     bca:	0d c0       	rjmp	.+26     	; 0xbe6 <EEPROM_writeByte+0x72>

    /*send our data to be written in the eeprom*/
    TWI_write(u8data);
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	0e 94 42 09 	call	0x1284	; 0x1284 <TWI_write>

    /*make sure data is sent*/
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     bd2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     bd6:	88 32       	cpi	r24, 0x28	; 40
     bd8:	11 f0       	breq	.+4      	; 0xbde <EEPROM_writeByte+0x6a>
        return ERROR;
     bda:	1c 82       	std	Y+4, r1	; 0x04
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <EEPROM_writeByte+0x72>

    /*send stop bit*/
    TWI_stop();
     bde:	0e 94 37 09 	call	0x126e	; 0x126e <TWI_stop>

    return SUCCESS;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	8c 83       	std	Y+4, r24	; 0x04
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <EEPROM_readByte+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <EEPROM_readByte+0x8>
     bfe:	0f 92       	push	r0
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	7c 83       	std	Y+4, r23	; 0x04
     c0a:	6b 83       	std	Y+3, r22	; 0x03
    /*send a start bit*/
    TWI_start();
     c0c:	0e 94 27 09 	call	0x124e	; 0x124e <TWI_start>

    /*check if start bit is successfully sent*/
    if (TWI_getStatus() != TW_START)
     c10:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     c14:	88 30       	cpi	r24, 0x08	; 8
     c16:	11 f0       	breq	.+4      	; 0xc1c <EEPROM_readByte+0x26>
        return ERROR;
     c18:	1d 82       	std	Y+5, r1	; 0x05
     c1a:	44 c0       	rjmp	.+136    	; 0xca4 <EEPROM_readByte+0xae>

    /*send address of eeprom along with 3 bits from memory address with a r/w bit of 0 to write*/
    TWI_write((uint8)0xA0 | ((u16addr & 0x700) >> 7));
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	80 70       	andi	r24, 0x00	; 0
     c22:	97 70       	andi	r25, 0x07	; 7
     c24:	88 0f       	add	r24, r24
     c26:	89 2f       	mov	r24, r25
     c28:	88 1f       	adc	r24, r24
     c2a:	99 0b       	sbc	r25, r25
     c2c:	91 95       	neg	r25
     c2e:	80 6a       	ori	r24, 0xA0	; 160
     c30:	0e 94 42 09 	call	0x1284	; 0x1284 <TWI_write>

    /*make sure address is sent*/
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c34:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     c38:	88 31       	cpi	r24, 0x18	; 24
     c3a:	11 f0       	breq	.+4      	; 0xc40 <EEPROM_readByte+0x4a>
        return ERROR;
     c3c:	1d 82       	std	Y+5, r1	; 0x05
     c3e:	32 c0       	rjmp	.+100    	; 0xca4 <EEPROM_readByte+0xae>

    /*send rest of memory address to write into*/
    TWI_write((uint8)u16addr);
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	0e 94 42 09 	call	0x1284	; 0x1284 <TWI_write>

    /*make sure address is sent*/
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c46:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     c4a:	88 32       	cpi	r24, 0x28	; 40
     c4c:	11 f0       	breq	.+4      	; 0xc52 <EEPROM_readByte+0x5c>
        return ERROR;
     c4e:	1d 82       	std	Y+5, r1	; 0x05
     c50:	29 c0       	rjmp	.+82     	; 0xca4 <EEPROM_readByte+0xae>

    /*send another start bit*/
    TWI_start();
     c52:	0e 94 27 09 	call	0x124e	; 0x124e <TWI_start>

    /*check if repeated start bit is successfully sent*/
    if (TWI_getStatus() != TW_REP_START)
     c56:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     c5a:	80 31       	cpi	r24, 0x10	; 16
     c5c:	11 f0       	breq	.+4      	; 0xc62 <EEPROM_readByte+0x6c>
        return ERROR;
     c5e:	1d 82       	std	Y+5, r1	; 0x05
     c60:	21 c0       	rjmp	.+66     	; 0xca4 <EEPROM_readByte+0xae>

    /*send address of eeprom along with 3 bits from memory address with a r/w bit of 1 to read*/
    TWI_write((uint8)0xA0 | (((u16addr & 0x700) >> 7) | 1));
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	80 70       	andi	r24, 0x00	; 0
     c68:	97 70       	andi	r25, 0x07	; 7
     c6a:	88 0f       	add	r24, r24
     c6c:	89 2f       	mov	r24, r25
     c6e:	88 1f       	adc	r24, r24
     c70:	99 0b       	sbc	r25, r25
     c72:	91 95       	neg	r25
     c74:	81 6a       	ori	r24, 0xA1	; 161
     c76:	0e 94 42 09 	call	0x1284	; 0x1284 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     c7a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     c7e:	80 34       	cpi	r24, 0x40	; 64
     c80:	11 f0       	breq	.+4      	; 0xc86 <EEPROM_readByte+0x90>
        return ERROR;
     c82:	1d 82       	std	Y+5, r1	; 0x05
     c84:	0f c0       	rjmp	.+30     	; 0xca4 <EEPROM_readByte+0xae>

    /*read data and send Nack*/
    *u8data = TWI_readWithNack();
     c86:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TWI_readWithNack>
     c8a:	eb 81       	ldd	r30, Y+3	; 0x03
     c8c:	fc 81       	ldd	r31, Y+4	; 0x04
     c8e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     c90:	0e 94 7f 09 	call	0x12fe	; 0x12fe <TWI_getStatus>
     c94:	88 35       	cpi	r24, 0x58	; 88
     c96:	11 f0       	breq	.+4      	; 0xc9c <EEPROM_readByte+0xa6>
        return ERROR;
     c98:	1d 82       	std	Y+5, r1	; 0x05
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <EEPROM_readByte+0xae>

    /*send stop bit*/
    TWI_stop();
     c9c:	0e 94 37 09 	call	0x126e	; 0x126e <TWI_stop>

    return SUCCESS;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	8d 83       	std	Y+5, r24	; 0x05
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <EEPROM_writeString>:

uint8 EEPROM_writeString(uint16 u16addr,uint8* string)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	a3 97       	sbiw	r28, 0x23	; 35
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	98 a3       	std	Y+32, r25	; 0x20
     ccc:	8f 8f       	std	Y+31, r24	; 0x1f
     cce:	7a a3       	std	Y+34, r23	; 0x22
     cd0:	69 a3       	std	Y+33, r22	; 0x21
    uint16 i=0;
     cd2:	1e 8e       	std	Y+30, r1	; 0x1e
     cd4:	1d 8e       	std	Y+29, r1	; 0x1d
     cd6:	90 c0       	rjmp	.+288    	; 0xdf8 <EEPROM_writeString+0x142>
    /*Write Each Byte of String untill we find a Null terminator*/
    while (string[i] != '\0')
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e2       	ldi	r26, 0x20	; 32
     cde:	b1 e4       	ldi	r27, 0x41	; 65
     ce0:	89 8f       	std	Y+25, r24	; 0x19
     ce2:	9a 8f       	std	Y+26, r25	; 0x1a
     ce4:	ab 8f       	std	Y+27, r26	; 0x1b
     ce6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	69 8d       	ldd	r22, Y+25	; 0x19
     cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4a ef       	ldi	r20, 0xFA	; 250
     cf6:	54 e4       	ldi	r21, 0x44	; 68
     cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	8d 8b       	std	Y+21, r24	; 0x15
     d02:	9e 8b       	std	Y+22, r25	; 0x16
     d04:	af 8b       	std	Y+23, r26	; 0x17
     d06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d08:	6d 89       	ldd	r22, Y+21	; 0x15
     d0a:	7e 89       	ldd	r23, Y+22	; 0x16
     d0c:	8f 89       	ldd	r24, Y+23	; 0x17
     d0e:	98 8d       	ldd	r25, Y+24	; 0x18
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	2c f4       	brge	.+10     	; 0xd2a <EEPROM_writeString+0x74>
		__ticks = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9c 8b       	std	Y+20, r25	; 0x14
     d26:	8b 8b       	std	Y+19, r24	; 0x13
     d28:	3f c0       	rjmp	.+126    	; 0xda8 <EEPROM_writeString+0xf2>
	else if (__tmp > 65535)
     d2a:	6d 89       	ldd	r22, Y+21	; 0x15
     d2c:	7e 89       	ldd	r23, Y+22	; 0x16
     d2e:	8f 89       	ldd	r24, Y+23	; 0x17
     d30:	98 8d       	ldd	r25, Y+24	; 0x18
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	3f ef       	ldi	r19, 0xFF	; 255
     d36:	4f e7       	ldi	r20, 0x7F	; 127
     d38:	57 e4       	ldi	r21, 0x47	; 71
     d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3e:	18 16       	cp	r1, r24
     d40:	4c f5       	brge	.+82     	; 0xd94 <EEPROM_writeString+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	69 8d       	ldd	r22, Y+25	; 0x19
     d44:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e2       	ldi	r20, 0x20	; 32
     d50:	51 e4       	ldi	r21, 0x41	; 65
     d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <EEPROM_writeString+0xd4>
     d6c:	88 ec       	ldi	r24, 0xC8	; 200
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9a 8b       	std	Y+18, r25	; 0x12
     d72:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d74:	89 89       	ldd	r24, Y+17	; 0x11
     d76:	9a 89       	ldd	r25, Y+18	; 0x12
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <EEPROM_writeString+0xc2>
     d7c:	9a 8b       	std	Y+18, r25	; 0x12
     d7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d80:	8b 89       	ldd	r24, Y+19	; 0x13
     d82:	9c 89       	ldd	r25, Y+20	; 0x14
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9c 8b       	std	Y+20, r25	; 0x14
     d88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	8b 89       	ldd	r24, Y+19	; 0x13
     d8c:	9c 89       	ldd	r25, Y+20	; 0x14
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	69 f7       	brne	.-38     	; 0xd6c <EEPROM_writeString+0xb6>
     d92:	14 c0       	rjmp	.+40     	; 0xdbc <EEPROM_writeString+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d94:	6d 89       	ldd	r22, Y+21	; 0x15
     d96:	7e 89       	ldd	r23, Y+22	; 0x16
     d98:	8f 89       	ldd	r24, Y+23	; 0x17
     d9a:	98 8d       	ldd	r25, Y+24	; 0x18
     d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	9c 8b       	std	Y+20, r25	; 0x14
     da6:	8b 8b       	std	Y+19, r24	; 0x13
     da8:	8b 89       	ldd	r24, Y+19	; 0x13
     daa:	9c 89       	ldd	r25, Y+20	; 0x14
     dac:	98 8b       	std	Y+16, r25	; 0x10
     dae:	8f 87       	std	Y+15, r24	; 0x0f
     db0:	8f 85       	ldd	r24, Y+15	; 0x0f
     db2:	98 89       	ldd	r25, Y+16	; 0x10
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <EEPROM_writeString+0xfe>
     db8:	98 8b       	std	Y+16, r25	; 0x10
     dba:	8f 87       	std	Y+15, r24	; 0x0f
    {
        _delay_ms(10);/*delay for processing*/
        if(EEPROM_writeByte(u16addr + i, string[i])==ERROR)
     dbc:	2f 8d       	ldd	r18, Y+31	; 0x1f
     dbe:	38 a1       	ldd	r19, Y+32	; 0x20
     dc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dc4:	a9 01       	movw	r20, r18
     dc6:	48 0f       	add	r20, r24
     dc8:	59 1f       	adc	r21, r25
     dca:	29 a1       	ldd	r18, Y+33	; 0x21
     dcc:	3a a1       	ldd	r19, Y+34	; 0x22
     dce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dd2:	f9 01       	movw	r30, r18
     dd4:	e8 0f       	add	r30, r24
     dd6:	f9 1f       	adc	r31, r25
     dd8:	20 81       	ld	r18, Z
     dda:	ca 01       	movw	r24, r20
     ddc:	62 2f       	mov	r22, r18
     dde:	0e 94 ba 05 	call	0xb74	; 0xb74 <EEPROM_writeByte>
     de2:	88 23       	and	r24, r24
     de4:	21 f4       	brne	.+8      	; 0xdee <EEPROM_writeString+0x138>
        {
            return ERROR;
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	8b a3       	std	Y+35, r24	; 0x23
        }
        i++;
    }
    _delay_ms(10);
    EEPROM_writeByte(u16addr + i, '#');/*insert a Hash in last Byte to endicate end of string*/
}
     dea:	8b a1       	ldd	r24, Y+35	; 0x23
     dec:	8b c0       	rjmp	.+278    	; 0xf04 <EEPROM_writeString+0x24e>
        _delay_ms(10);/*delay for processing*/
        if(EEPROM_writeByte(u16addr + i, string[i])==ERROR)
        {
            return ERROR;
        }
        i++;
     dee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	9e 8f       	std	Y+30, r25	; 0x1e
     df6:	8d 8f       	std	Y+29, r24	; 0x1d

uint8 EEPROM_writeString(uint16 u16addr,uint8* string)
{
    uint16 i=0;
    /*Write Each Byte of String untill we find a Null terminator*/
    while (string[i] != '\0')
     df8:	29 a1       	ldd	r18, Y+33	; 0x21
     dfa:	3a a1       	ldd	r19, Y+34	; 0x22
     dfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dfe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e00:	f9 01       	movw	r30, r18
     e02:	e8 0f       	add	r30, r24
     e04:	f9 1f       	adc	r31, r25
     e06:	80 81       	ld	r24, Z
     e08:	88 23       	and	r24, r24
     e0a:	09 f0       	breq	.+2      	; 0xe0e <EEPROM_writeString+0x158>
     e0c:	65 cf       	rjmp	.-310    	; 0xcd8 <EEPROM_writeString+0x22>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a0 e2       	ldi	r26, 0x20	; 32
     e14:	b1 e4       	ldi	r27, 0x41	; 65
     e16:	8b 87       	std	Y+11, r24	; 0x0b
     e18:	9c 87       	std	Y+12, r25	; 0x0c
     e1a:	ad 87       	std	Y+13, r26	; 0x0d
     e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e20:	7c 85       	ldd	r23, Y+12	; 0x0c
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	4a ef       	ldi	r20, 0xFA	; 250
     e2c:	54 e4       	ldi	r21, 0x44	; 68
     e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	8f 83       	std	Y+7, r24	; 0x07
     e38:	98 87       	std	Y+8, r25	; 0x08
     e3a:	a9 87       	std	Y+9, r26	; 0x09
     e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e8       	ldi	r20, 0x80	; 128
     e4c:	5f e3       	ldi	r21, 0x3F	; 63
     e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e52:	88 23       	and	r24, r24
     e54:	2c f4       	brge	.+10     	; 0xe60 <EEPROM_writeString+0x1aa>
		__ticks = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9e 83       	std	Y+6, r25	; 0x06
     e5c:	8d 83       	std	Y+5, r24	; 0x05
     e5e:	3f c0       	rjmp	.+126    	; 0xede <EEPROM_writeString+0x228>
	else if (__tmp > 65535)
     e60:	6f 81       	ldd	r22, Y+7	; 0x07
     e62:	78 85       	ldd	r23, Y+8	; 0x08
     e64:	89 85       	ldd	r24, Y+9	; 0x09
     e66:	9a 85       	ldd	r25, Y+10	; 0x0a
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	3f ef       	ldi	r19, 0xFF	; 255
     e6c:	4f e7       	ldi	r20, 0x7F	; 127
     e6e:	57 e4       	ldi	r21, 0x47	; 71
     e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e74:	18 16       	cp	r1, r24
     e76:	4c f5       	brge	.+82     	; 0xeca <EEPROM_writeString+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e78:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e2       	ldi	r20, 0x20	; 32
     e86:	51 e4       	ldi	r21, 0x41	; 65
     e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <EEPROM_writeString+0x20a>
     ea2:	88 ec       	ldi	r24, 0xC8	; 200
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9c 83       	std	Y+4, r25	; 0x04
     ea8:	8b 83       	std	Y+3, r24	; 0x03
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <EEPROM_writeString+0x1f8>
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	69 f7       	brne	.-38     	; 0xea2 <EEPROM_writeString+0x1ec>
     ec8:	14 c0       	rjmp	.+40     	; 0xef2 <EEPROM_writeString+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eca:	6f 81       	ldd	r22, Y+7	; 0x07
     ecc:	78 85       	ldd	r23, Y+8	; 0x08
     ece:	89 85       	ldd	r24, Y+9	; 0x09
     ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <EEPROM_writeString+0x234>
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
            return ERROR;
        }
        i++;
    }
    _delay_ms(10);
    EEPROM_writeByte(u16addr + i, '#');/*insert a Hash in last Byte to endicate end of string*/
     ef2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ef4:	98 a1       	ldd	r25, Y+32	; 0x20
     ef6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     ef8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	63 e2       	ldi	r22, 0x23	; 35
     f00:	0e 94 ba 05 	call	0xb74	; 0xb74 <EEPROM_writeByte>
}
     f04:	a3 96       	adiw	r28, 0x23	; 35
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <EEPROM_readString>:

uint8 EEPROM_readString(uint16 u16addr,uint8* string)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	a3 97       	sbiw	r28, 0x23	; 35
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	98 a3       	std	Y+32, r25	; 0x20
     f2c:	8f 8f       	std	Y+31, r24	; 0x1f
     f2e:	7a a3       	std	Y+34, r23	; 0x22
     f30:	69 a3       	std	Y+33, r22	; 0x21
    uint16 i = 0;
     f32:	1e 8e       	std	Y+30, r1	; 0x1e
     f34:	1d 8e       	std	Y+29, r1	; 0x1d
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e2       	ldi	r26, 0x20	; 32
     f3c:	b1 e4       	ldi	r27, 0x41	; 65
     f3e:	89 8f       	std	Y+25, r24	; 0x19
     f40:	9a 8f       	std	Y+26, r25	; 0x1a
     f42:	ab 8f       	std	Y+27, r26	; 0x1b
     f44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f46:	69 8d       	ldd	r22, Y+25	; 0x19
     f48:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a ef       	ldi	r20, 0xFA	; 250
     f54:	54 e4       	ldi	r21, 0x44	; 68
     f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8d 8b       	std	Y+21, r24	; 0x15
     f60:	9e 8b       	std	Y+22, r25	; 0x16
     f62:	af 8b       	std	Y+23, r26	; 0x17
     f64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f66:	6d 89       	ldd	r22, Y+21	; 0x15
     f68:	7e 89       	ldd	r23, Y+22	; 0x16
     f6a:	8f 89       	ldd	r24, Y+23	; 0x17
     f6c:	98 8d       	ldd	r25, Y+24	; 0x18
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e8       	ldi	r20, 0x80	; 128
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	2c f4       	brge	.+10     	; 0xf88 <EEPROM_readString+0x72>
		__ticks = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9c 8b       	std	Y+20, r25	; 0x14
     f84:	8b 8b       	std	Y+19, r24	; 0x13
     f86:	3f c0       	rjmp	.+126    	; 0x1006 <EEPROM_readString+0xf0>
	else if (__tmp > 65535)
     f88:	6d 89       	ldd	r22, Y+21	; 0x15
     f8a:	7e 89       	ldd	r23, Y+22	; 0x16
     f8c:	8f 89       	ldd	r24, Y+23	; 0x17
     f8e:	98 8d       	ldd	r25, Y+24	; 0x18
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	3f ef       	ldi	r19, 0xFF	; 255
     f94:	4f e7       	ldi	r20, 0x7F	; 127
     f96:	57 e4       	ldi	r21, 0x47	; 71
     f98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	4c f5       	brge	.+82     	; 0xff2 <EEPROM_readString+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa0:	69 8d       	ldd	r22, Y+25	; 0x19
     fa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e2       	ldi	r20, 0x20	; 32
     fae:	51 e4       	ldi	r21, 0x41	; 65
     fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9c 8b       	std	Y+20, r25	; 0x14
     fc6:	8b 8b       	std	Y+19, r24	; 0x13
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <EEPROM_readString+0xd2>
     fca:	88 ec       	ldi	r24, 0xC8	; 200
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9a 8b       	std	Y+18, r25	; 0x12
     fd0:	89 8b       	std	Y+17, r24	; 0x11
     fd2:	89 89       	ldd	r24, Y+17	; 0x11
     fd4:	9a 89       	ldd	r25, Y+18	; 0x12
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <EEPROM_readString+0xc0>
     fda:	9a 8b       	std	Y+18, r25	; 0x12
     fdc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fde:	8b 89       	ldd	r24, Y+19	; 0x13
     fe0:	9c 89       	ldd	r25, Y+20	; 0x14
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	8b 89       	ldd	r24, Y+19	; 0x13
     fea:	9c 89       	ldd	r25, Y+20	; 0x14
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	69 f7       	brne	.-38     	; 0xfca <EEPROM_readString+0xb4>
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <EEPROM_readString+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff2:	6d 89       	ldd	r22, Y+21	; 0x15
     ff4:	7e 89       	ldd	r23, Y+22	; 0x16
     ff6:	8f 89       	ldd	r24, Y+23	; 0x17
     ff8:	98 8d       	ldd	r25, Y+24	; 0x18
     ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	9c 8b       	std	Y+20, r25	; 0x14
    1004:	8b 8b       	std	Y+19, r24	; 0x13
    1006:	8b 89       	ldd	r24, Y+19	; 0x13
    1008:	9c 89       	ldd	r25, Y+20	; 0x14
    100a:	98 8b       	std	Y+16, r25	; 0x10
    100c:	8f 87       	std	Y+15, r24	; 0x0f
    100e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1010:	98 89       	ldd	r25, Y+16	; 0x10
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <EEPROM_readString+0xfc>
    1016:	98 8b       	std	Y+16, r25	; 0x10
    1018:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    /*READ Each Byte of String untill we find a Hash*/
    EEPROM_readByte(u16addr + i, string + i);
    101a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    101c:	38 a1       	ldd	r19, Y+32	; 0x20
    101e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1020:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1022:	a9 01       	movw	r20, r18
    1024:	48 0f       	add	r20, r24
    1026:	59 1f       	adc	r21, r25
    1028:	29 a1       	ldd	r18, Y+33	; 0x21
    102a:	3a a1       	ldd	r19, Y+34	; 0x22
    102c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    102e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1030:	28 0f       	add	r18, r24
    1032:	39 1f       	adc	r19, r25
    1034:	ca 01       	movw	r24, r20
    1036:	b9 01       	movw	r22, r18
    1038:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EEPROM_readByte>
    103c:	8e c0       	rjmp	.+284    	; 0x115a <EEPROM_readString+0x244>
    while (string[i] != '#')
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e2       	ldi	r26, 0x20	; 32
    1044:	b1 e4       	ldi	r27, 0x41	; 65
    1046:	8b 87       	std	Y+11, r24	; 0x0b
    1048:	9c 87       	std	Y+12, r25	; 0x0c
    104a:	ad 87       	std	Y+13, r26	; 0x0d
    104c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1050:	7c 85       	ldd	r23, Y+12	; 0x0c
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	9e 85       	ldd	r25, Y+14	; 0x0e
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4a ef       	ldi	r20, 0xFA	; 250
    105c:	54 e4       	ldi	r21, 0x44	; 68
    105e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	8f 83       	std	Y+7, r24	; 0x07
    1068:	98 87       	std	Y+8, r25	; 0x08
    106a:	a9 87       	std	Y+9, r26	; 0x09
    106c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1082:	88 23       	and	r24, r24
    1084:	2c f4       	brge	.+10     	; 0x1090 <EEPROM_readString+0x17a>
		__ticks = 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	3f c0       	rjmp	.+126    	; 0x110e <EEPROM_readString+0x1f8>
	else if (__tmp > 65535)
    1090:	6f 81       	ldd	r22, Y+7	; 0x07
    1092:	78 85       	ldd	r23, Y+8	; 0x08
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	9a 85       	ldd	r25, Y+10	; 0x0a
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	3f ef       	ldi	r19, 0xFF	; 255
    109c:	4f e7       	ldi	r20, 0x7F	; 127
    109e:	57 e4       	ldi	r21, 0x47	; 71
    10a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a4:	18 16       	cp	r1, r24
    10a6:	4c f5       	brge	.+82     	; 0x10fa <EEPROM_readString+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	51 e4       	ldi	r21, 0x41	; 65
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9e 83       	std	Y+6, r25	; 0x06
    10ce:	8d 83       	std	Y+5, r24	; 0x05
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <EEPROM_readString+0x1da>
    10d2:	88 ec       	ldi	r24, 0xC8	; 200
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <EEPROM_readString+0x1c8>
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9e 83       	std	Y+6, r25	; 0x06
    10ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <EEPROM_readString+0x1bc>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <EEPROM_readString+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <EEPROM_readString+0x204>
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    {
        _delay_ms(10);
        i++;
    1122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	9e 8f       	std	Y+30, r25	; 0x1e
    112a:	8d 8f       	std	Y+29, r24	; 0x1d
        if(EEPROM_readByte(u16addr + i, string + i)==ERROR)
    112c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    112e:	38 a1       	ldd	r19, Y+32	; 0x20
    1130:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1132:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1134:	a9 01       	movw	r20, r18
    1136:	48 0f       	add	r20, r24
    1138:	59 1f       	adc	r21, r25
    113a:	29 a1       	ldd	r18, Y+33	; 0x21
    113c:	3a a1       	ldd	r19, Y+34	; 0x22
    113e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1140:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1142:	28 0f       	add	r18, r24
    1144:	39 1f       	adc	r19, r25
    1146:	ca 01       	movw	r24, r20
    1148:	b9 01       	movw	r22, r18
    114a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EEPROM_readByte>
    114e:	88 23       	and	r24, r24
    1150:	21 f4       	brne	.+8      	; 0x115a <EEPROM_readString+0x244>
        {return ERROR;
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	8b a3       	std	Y+35, r24	; 0x23
        }
    }
    /*Replace hach with null Terminator*/
    string[i] = '\0';
}
    1156:	8b a1       	ldd	r24, Y+35	; 0x23
    1158:	13 c0       	rjmp	.+38     	; 0x1180 <EEPROM_readString+0x26a>
{
    uint16 i = 0;
    _delay_ms(10);
    /*READ Each Byte of String untill we find a Hash*/
    EEPROM_readByte(u16addr + i, string + i);
    while (string[i] != '#')
    115a:	29 a1       	ldd	r18, Y+33	; 0x21
    115c:	3a a1       	ldd	r19, Y+34	; 0x22
    115e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1160:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1162:	f9 01       	movw	r30, r18
    1164:	e8 0f       	add	r30, r24
    1166:	f9 1f       	adc	r31, r25
    1168:	80 81       	ld	r24, Z
    116a:	83 32       	cpi	r24, 0x23	; 35
    116c:	09 f0       	breq	.+2      	; 0x1170 <EEPROM_readString+0x25a>
    116e:	67 cf       	rjmp	.-306    	; 0x103e <EEPROM_readString+0x128>
        if(EEPROM_readByte(u16addr + i, string + i)==ERROR)
        {return ERROR;
        }
    }
    /*Replace hach with null Terminator*/
    string[i] = '\0';
    1170:	89 a1       	ldd	r24, Y+33	; 0x21
    1172:	9a a1       	ldd	r25, Y+34	; 0x22
    1174:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1176:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1178:	fc 01       	movw	r30, r24
    117a:	e2 0f       	add	r30, r18
    117c:	f3 1f       	adc	r31, r19
    117e:	10 82       	st	Z, r1
}
    1180:	a3 96       	adiw	r28, 0x23	; 35
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <__vector_17>:
/*******************************************************************************
 *                      ISR                                  *
 *******************************************************************************/

ISR(TWI_vect)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    if (g_TWI_callBackPtr != NULL_PTR)
    11bc:	80 91 78 00 	lds	r24, 0x0078
    11c0:	90 91 79 00 	lds	r25, 0x0079
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	29 f0       	breq	.+10     	; 0x11d2 <__vector_17+0x40>
    {
        (*g_TWI_callBackPtr)();
    11c8:	e0 91 78 00 	lds	r30, 0x0078
    11cc:	f0 91 79 00 	lds	r31, 0x0079
    11d0:	09 95       	icall
    }
}
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <TWI_init>:
 *                      Function Definitions                                  *
 *******************************************************************************/

/*Initialize TWI with input config.*/
void TWI_init(TWI_ConfigType * cfg_ptr)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <TWI_init+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
  /*insert bit-rate value into twr
    */
  TWBR = cfg_ptr->bit_rate;
    1206:	a0 e2       	ldi	r26, 0x20	; 32
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e9 81       	ldd	r30, Y+1	; 0x01
    120c:	fa 81       	ldd	r31, Y+2	; 0x02
    120e:	80 81       	ld	r24, Z
    1210:	8c 93       	st	X, r24

  /*set prescaler in the first 2-bits of twsr*/
  TWSR = cfg_ptr->prescaler;
    1212:	a1 e2       	ldi	r26, 0x21	; 33
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e9 81       	ldd	r30, Y+1	; 0x01
    1218:	fa 81       	ldd	r31, Y+2	; 0x02
    121a:	81 81       	ldd	r24, Z+1	; 0x01
    121c:	8c 93       	st	X, r24

  /*
    set slave address in case of slave mode
    and set general call recognition value
    */
  TWAR = (cfg_ptr->slave_address << 1) | cfg_ptr->general_call;
    121e:	a2 e2       	ldi	r26, 0x22	; 34
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e9 81       	ldd	r30, Y+1	; 0x01
    1224:	fa 81       	ldd	r31, Y+2	; 0x02
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	98 2f       	mov	r25, r24
    1232:	e9 81       	ldd	r30, Y+1	; 0x01
    1234:	fa 81       	ldd	r31, Y+2	; 0x02
    1236:	83 81       	ldd	r24, Z+3	; 0x03
    1238:	89 2b       	or	r24, r25
    123a:	8c 93       	st	X, r24

  /* enable TWI  */
  TWCR = (1 << TWEN);
    123c:	e6 e5       	ldi	r30, 0x56	; 86
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	80 83       	st	Z, r24
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <TWI_start>:
void TWI_start(void)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
  /*
    Clear interrupt flag (TWINT=1)
    Enable start bit condotion (TWSTA=1)
    Enable TWI (TWEN=1)
    */
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1256:	e6 e5       	ldi	r30, 0x56	; 86
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	84 ea       	ldi	r24, 0xA4	; 164
    125c:	80 83       	st	Z, r24
  /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
  while (BIT_IS_CLEAR(TWCR, TWINT))
    125e:	e6 e5       	ldi	r30, 0x56	; 86
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	88 23       	and	r24, r24
    1266:	dc f7       	brge	.-10     	; 0x125e <TWI_start+0x10>
    ;
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <TWI_stop>:
void TWI_stop(void)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
  /*
    Clear interrupt flag (TWINT=1)
    Enable stop bit condition (TWSTO=1)
    Enable TWI (TWEN=1)
    */
  TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1276:	e6 e5       	ldi	r30, 0x56	; 86
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	84 e9       	ldi	r24, 0x94	; 148
    127c:	80 83       	st	Z, r24
}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <TWI_write>:
void TWI_write(uint8 data)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
  /*insert data in data register to be sent */
  TWDR = data;
    1290:	e3 e2       	ldi	r30, 0x23	; 35
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	80 83       	st	Z, r24
  /*
    Clear interrupt flag (TWINT=1)
    Enable TWI (TWEN=1)
    */
  TWCR = (1 << TWINT) | (1 << TWEN);
    1298:	e6 e5       	ldi	r30, 0x56	; 86
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	84 e8       	ldi	r24, 0x84	; 132
    129e:	80 83       	st	Z, r24
  /*wait untill interrupt flag is set
    indicating data is successfully sent*/
  while (BIT_IS_CLEAR(TWCR, TWINT))
    12a0:	e6 e5       	ldi	r30, 0x56	; 86
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	88 23       	and	r24, r24
    12a8:	dc f7       	brge	.-10     	; 0x12a0 <TWI_write+0x1c>
    ;
}
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <TWI_readWithAck>:
uint8 TWI_readWithAck()
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
  /*
    Clear interrupt flag (TWINT=1)
    Enable TWI (TWEN=1)
    Enable Acknowledgement bit (TWEA=1)
    */
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    12ba:	e6 e5       	ldi	r30, 0x56	; 86
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	84 ec       	ldi	r24, 0xC4	; 196
    12c0:	80 83       	st	Z, r24
  /*wait untill interrupt flag is set
    indicating data is uccessfully recieved*/
  while (BIT_IS_CLEAR(TWCR, TWINT))
    12c2:	e6 e5       	ldi	r30, 0x56	; 86
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 23       	and	r24, r24
    12ca:	dc f7       	brge	.-10     	; 0x12c2 <TWI_readWithAck+0x10>
    ;
  return TWDR;
    12cc:	e3 e2       	ldi	r30, 0x23	; 35
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <TWI_readWithNack>:
uint8 TWI_readWithNack(void)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
  /*
    Clear interrupt flag (TWINT=1)
    Enable TWI (TWEN=1)
    This time we disable Acknowledgement bit (TWEA=0)
    */
  TWCR = (1 << TWINT) | (1 << TWEN);
    12e0:	e6 e5       	ldi	r30, 0x56	; 86
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	84 e8       	ldi	r24, 0x84	; 132
    12e6:	80 83       	st	Z, r24
  /*wait untill interrupt flag is set
    indicating data is uccessfully recieved*/
  while (BIT_IS_CLEAR(TWCR, TWINT))
    12e8:	e6 e5       	ldi	r30, 0x56	; 86
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	88 23       	and	r24, r24
    12f0:	dc f7       	brge	.-10     	; 0x12e8 <TWI_readWithNack+0x10>
    ;
  return TWDR;
    12f2:	e3 e2       	ldi	r30, 0x23	; 35
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
}
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <TWI_getStatus>:
uint8 TWI_getStatus()
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
  /*RETURN MASKED STATUS REG.*/
  return (TWSR & 0XF8);
    1306:	e1 e2       	ldi	r30, 0x21	; 33
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 7f       	andi	r24, 0xF8	; 248
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <TWI_enableInterrupt>:

void TWI_enableInterrupt(void)
 /*interrupt will activate in case of TWINT flag is high*/
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
  /*set TWI interrupt enable bit*/
SET_BIT(TWCR,TWIE);
    131c:	a6 e5       	ldi	r26, 0x56	; 86
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e6 e5       	ldi	r30, 0x56	; 86
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	81 60       	ori	r24, 0x01	; 1
    1328:	8c 93       	st	X, r24
}
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <TWI_disableInterrupt>:
void TWI_disableInterrupt(void)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62

  /*clear TWI interrupt enable bit*/
CLEAR_BIT(TWCR,TWIE);
    1338:	a6 e5       	ldi	r26, 0x56	; 86
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e6 e5       	ldi	r30, 0x56	; 86
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8e 7f       	andi	r24, 0xFE	; 254
    1344:	8c 93       	st	X, r24
}
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <TWI_setCallback>:

void TWI_setCallback(void (*f_ptr)(void))
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	00 d0       	rcall	.+0      	; 0x1352 <TWI_setCallback+0x6>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
  
}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <MOTOR_init>:
#include "motor.h"

/*Function Definitions*/
void MOTOR_init(void)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
	/* configure pin interrupt pin*/
	//SET_BIT (DDRD,PD3);
	/* Motor is stopped at the beginning */
	MOTOR_PORT &= ~((1 << MOTOR_CLOCKWISE_PIN) | (1 << MOTOR_ANTICLOCKWISE_PIN));
    136c:	a8 e3       	ldi	r26, 0x38	; 56
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e8 e3       	ldi	r30, 0x38	; 56
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8c 7f       	andi	r24, 0xFC	; 252
    1378:	8c 93       	st	X, r24
	/* configure pins for motor as output pins */
	MOTOR_PORT_DIRECTION |= (1 << MOTOR_CLOCKWISE_PIN) | (1 << MOTOR_ANTICLOCKWISE_PIN);
    137a:	a7 e3       	ldi	r26, 0x37	; 55
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e7 e3       	ldi	r30, 0x37	; 55
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	83 60       	ori	r24, 0x03	; 3
    1386:	8c 93       	st	X, r24
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <MOTOR_rotateClockwise>:
void MOTOR_rotateClockwise(void)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(MOTOR_PORT,MOTOR_CLOCKWISE_PIN);
    1396:	a8 e3       	ldi	r26, 0x38	; 56
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	82 60       	ori	r24, 0x02	; 2
    13a2:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_ANTICLOCKWISE_PIN);
    13a4:	a8 e3       	ldi	r26, 0x38	; 56
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e8 e3       	ldi	r30, 0x38	; 56
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8e 7f       	andi	r24, 0xFE	; 254
    13b0:	8c 93       	st	X, r24
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <MOTOR_rotateAntiClockwise>:
void MOTOR_rotateAntiClockwise(void)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT(MOTOR_PORT,MOTOR_CLOCKWISE_PIN);
    13c0:	a8 e3       	ldi	r26, 0x38	; 56
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8d 7f       	andi	r24, 0xFD	; 253
    13cc:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT,MOTOR_ANTICLOCKWISE_PIN);
    13ce:	a8 e3       	ldi	r26, 0x38	; 56
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e8 e3       	ldi	r30, 0x38	; 56
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	81 60       	ori	r24, 0x01	; 1
    13da:	8c 93       	st	X, r24
}
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <MOTOR_stop>:
void MOTOR_stop(void)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_PORT,MOTOR_CLOCKWISE_PIN);
    13ea:	a8 e3       	ldi	r26, 0x38	; 56
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8d 7f       	andi	r24, 0xFD	; 253
    13f6:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT,MOTOR_ANTICLOCKWISE_PIN);
    13f8:	a8 e3       	ldi	r26, 0x38	; 56
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e8 e3       	ldi	r30, 0x38	; 56
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8e 7f       	andi	r24, 0xFE	; 254
    1404:	8c 93       	st	X, r24

}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <__vector_19>:
/*******************************************************************************
 *                              ISRs                                                    *
 *******************************************************************************/
#ifdef TIMER_0
ISR(TIMER0_COMP_vect)
{
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_0_Compare_callBackPtr != NULL_PTR)
    1436:	80 91 7c 00 	lds	r24, 0x007C
    143a:	90 91 7d 00 	lds	r25, 0x007D
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	29 f0       	breq	.+10     	; 0x144c <__vector_19+0x40>
    {
        (*g_Timer_0_Compare_callBackPtr)();
    1442:	e0 91 7c 00 	lds	r30, 0x007C
    1446:	f0 91 7d 00 	lds	r31, 0x007D
    144a:	09 95       	icall
    }
}
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <__vector_9>:


ISR(TIMER0_OVF_vect)
{
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	4f 93       	push	r20
    1482:	5f 93       	push	r21
    1484:	6f 93       	push	r22
    1486:	7f 93       	push	r23
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	af 93       	push	r26
    148e:	bf 93       	push	r27
    1490:	ef 93       	push	r30
    1492:	ff 93       	push	r31
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_0_Overflow_callBackPtr != NULL_PTR)
    149c:	80 91 7a 00 	lds	r24, 0x007A
    14a0:	90 91 7b 00 	lds	r25, 0x007B
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	29 f0       	breq	.+10     	; 0x14b2 <__vector_9+0x40>
    {
        (*g_Timer_0_Overflow_callBackPtr)();
    14a8:	e0 91 7a 00 	lds	r30, 0x007A
    14ac:	f0 91 7b 00 	lds	r31, 0x007B
    14b0:	09 95       	icall
    }
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	ff 91       	pop	r31
    14b8:	ef 91       	pop	r30
    14ba:	bf 91       	pop	r27
    14bc:	af 91       	pop	r26
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	7f 91       	pop	r23
    14c4:	6f 91       	pop	r22
    14c6:	5f 91       	pop	r21
    14c8:	4f 91       	pop	r20
    14ca:	3f 91       	pop	r19
    14cc:	2f 91       	pop	r18
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti

000014d8 <__vector_3>:
#endif

#ifdef TIMER_2
ISR(TIMER2_COMP_vect)
{
    14d8:	1f 92       	push	r1
    14da:	0f 92       	push	r0
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	0f 92       	push	r0
    14e0:	11 24       	eor	r1, r1
    14e2:	2f 93       	push	r18
    14e4:	3f 93       	push	r19
    14e6:	4f 93       	push	r20
    14e8:	5f 93       	push	r21
    14ea:	6f 93       	push	r22
    14ec:	7f 93       	push	r23
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	af 93       	push	r26
    14f4:	bf 93       	push	r27
    14f6:	ef 93       	push	r30
    14f8:	ff 93       	push	r31
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_2_Compare_callBackPtr != NULL_PTR)
    1502:	80 91 80 00 	lds	r24, 0x0080
    1506:	90 91 81 00 	lds	r25, 0x0081
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	29 f0       	breq	.+10     	; 0x1518 <__vector_3+0x40>
    {
        (*g_Timer_2_Compare_callBackPtr)();
    150e:	e0 91 80 00 	lds	r30, 0x0080
    1512:	f0 91 81 00 	lds	r31, 0x0081
    1516:	09 95       	icall
    }
}
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	bf 91       	pop	r27
    1522:	af 91       	pop	r26
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	7f 91       	pop	r23
    152a:	6f 91       	pop	r22
    152c:	5f 91       	pop	r21
    152e:	4f 91       	pop	r20
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	2f 93       	push	r18
    154a:	3f 93       	push	r19
    154c:	4f 93       	push	r20
    154e:	5f 93       	push	r21
    1550:	6f 93       	push	r22
    1552:	7f 93       	push	r23
    1554:	8f 93       	push	r24
    1556:	9f 93       	push	r25
    1558:	af 93       	push	r26
    155a:	bf 93       	push	r27
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_2_Overflow_callBackPtr != NULL_PTR)
    1568:	80 91 7e 00 	lds	r24, 0x007E
    156c:	90 91 7f 00 	lds	r25, 0x007F
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	29 f0       	breq	.+10     	; 0x157e <__vector_4+0x40>
    {
        (*g_Timer_2_Overflow_callBackPtr)();
    1574:	e0 91 7e 00 	lds	r30, 0x007E
    1578:	f0 91 7f 00 	lds	r31, 0x007F
    157c:	09 95       	icall
    }
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	ff 91       	pop	r31
    1584:	ef 91       	pop	r30
    1586:	bf 91       	pop	r27
    1588:	af 91       	pop	r26
    158a:	9f 91       	pop	r25
    158c:	8f 91       	pop	r24
    158e:	7f 91       	pop	r23
    1590:	6f 91       	pop	r22
    1592:	5f 91       	pop	r21
    1594:	4f 91       	pop	r20
    1596:	3f 91       	pop	r19
    1598:	2f 91       	pop	r18
    159a:	0f 90       	pop	r0
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	0f 90       	pop	r0
    15a0:	1f 90       	pop	r1
    15a2:	18 95       	reti

000015a4 <__vector_6>:
#endif

#ifdef TIMER_1
ISR(TIMER1_COMPA_vect)
{
    15a4:	1f 92       	push	r1
    15a6:	0f 92       	push	r0
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	0f 92       	push	r0
    15ac:	11 24       	eor	r1, r1
    15ae:	2f 93       	push	r18
    15b0:	3f 93       	push	r19
    15b2:	4f 93       	push	r20
    15b4:	5f 93       	push	r21
    15b6:	6f 93       	push	r22
    15b8:	7f 93       	push	r23
    15ba:	8f 93       	push	r24
    15bc:	9f 93       	push	r25
    15be:	af 93       	push	r26
    15c0:	bf 93       	push	r27
    15c2:	ef 93       	push	r30
    15c4:	ff 93       	push	r31
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_CompareA_callBackPtr != NULL_PTR)
    15ce:	80 91 84 00 	lds	r24, 0x0084
    15d2:	90 91 85 00 	lds	r25, 0x0085
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <__vector_6+0x40>
    {
        (*g_Timer_1_CompareA_callBackPtr)();
    15da:	e0 91 84 00 	lds	r30, 0x0084
    15de:	f0 91 85 00 	lds	r31, 0x0085
    15e2:	09 95       	icall
    }
}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_CompareB_callBackPtr != NULL_PTR)
    1634:	80 91 86 00 	lds	r24, 0x0086
    1638:	90 91 87 00 	lds	r25, 0x0087
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	29 f0       	breq	.+10     	; 0x164a <__vector_7+0x40>
    {
        (*g_Timer_1_CompareB_callBackPtr)();
    1640:	e0 91 86 00 	lds	r30, 0x0086
    1644:	f0 91 87 00 	lds	r31, 0x0087
    1648:	09 95       	icall
    }
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1670:	1f 92       	push	r1
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	0f 92       	push	r0
    1678:	11 24       	eor	r1, r1
    167a:	2f 93       	push	r18
    167c:	3f 93       	push	r19
    167e:	4f 93       	push	r20
    1680:	5f 93       	push	r21
    1682:	6f 93       	push	r22
    1684:	7f 93       	push	r23
    1686:	8f 93       	push	r24
    1688:	9f 93       	push	r25
    168a:	af 93       	push	r26
    168c:	bf 93       	push	r27
    168e:	ef 93       	push	r30
    1690:	ff 93       	push	r31
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    if (g_Timer_1_Overflow_callBackPtr != NULL_PTR)
    169a:	80 91 82 00 	lds	r24, 0x0082
    169e:	90 91 83 00 	lds	r25, 0x0083
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	29 f0       	breq	.+10     	; 0x16b0 <__vector_8+0x40>
    {
        (*g_Timer_1_Overflow_callBackPtr)();
    16a6:	e0 91 82 00 	lds	r30, 0x0082
    16aa:	f0 91 83 00 	lds	r31, 0x0083
    16ae:	09 95       	icall
    }
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <Timer_0_init>:
 *                      Function Definitions                                    *
 *******************************************************************************/
#ifdef TIMER_0
/*Initialize timer 0 configuration*/
void Timer_0_init(const Timer_0_2_ConfigType *const cfg_ptr)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <Timer_0_init+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <Timer_0_init+0x8>
    16de:	0f 92       	push	r0
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register*/
    TCCR0 = ((((~cfg_ptr->mode) & 0b01)) << 7) | ((cfg_ptr->mode & 0b01) << 6) | (cfg_ptr->com_mode << 4) | ((cfg_ptr->mode & 0b10) << 2) | cfg_ptr->clock;
    16e8:	83 e5       	ldi	r24, 0x53	; 83
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9d 83       	std	Y+5, r25	; 0x05
    16ee:	8c 83       	std	Y+4, r24	; 0x04
    16f0:	e9 81       	ldd	r30, Y+1	; 0x01
    16f2:	fa 81       	ldd	r31, Y+2	; 0x02
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	90 70       	andi	r25, 0x00	; 0
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	19 f4       	brne	.+6      	; 0x1708 <Timer_0_init+0x32>
    1702:	90 e8       	ldi	r25, 0x80	; 128
    1704:	9b 83       	std	Y+3, r25	; 0x03
    1706:	01 c0       	rjmp	.+2      	; 0x170a <Timer_0_init+0x34>
    1708:	1b 82       	std	Y+3, r1	; 0x03
    170a:	e9 81       	ldd	r30, Y+1	; 0x01
    170c:	fa 81       	ldd	r31, Y+2	; 0x02
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	81 70       	andi	r24, 0x01	; 1
    1716:	90 70       	andi	r25, 0x00	; 0
    1718:	00 24       	eor	r0, r0
    171a:	96 95       	lsr	r25
    171c:	87 95       	ror	r24
    171e:	07 94       	ror	r0
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	07 94       	ror	r0
    1726:	98 2f       	mov	r25, r24
    1728:	80 2d       	mov	r24, r0
    172a:	2b 81       	ldd	r18, Y+3	; 0x03
    172c:	28 2b       	or	r18, r24
    172e:	e9 81       	ldd	r30, Y+1	; 0x01
    1730:	fa 81       	ldd	r31, Y+2	; 0x02
    1732:	83 81       	ldd	r24, Z+3	; 0x03
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	82 95       	swap	r24
    173a:	92 95       	swap	r25
    173c:	90 7f       	andi	r25, 0xF0	; 240
    173e:	98 27       	eor	r25, r24
    1740:	80 7f       	andi	r24, 0xF0	; 240
    1742:	98 27       	eor	r25, r24
    1744:	28 2b       	or	r18, r24
    1746:	e9 81       	ldd	r30, Y+1	; 0x01
    1748:	fa 81       	ldd	r31, Y+2	; 0x02
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	82 70       	andi	r24, 0x02	; 2
    1752:	90 70       	andi	r25, 0x00	; 0
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	92 2f       	mov	r25, r18
    175e:	98 2b       	or	r25, r24
    1760:	e9 81       	ldd	r30, Y+1	; 0x01
    1762:	fa 81       	ldd	r31, Y+2	; 0x02
    1764:	80 81       	ld	r24, Z
    1766:	89 2b       	or	r24, r25
    1768:	ec 81       	ldd	r30, Y+4	; 0x04
    176a:	fd 81       	ldd	r31, Y+5	; 0x05
    176c:	80 83       	st	Z, r24

    /*insert compare value to compare register*/
    OCR0 = cfg_ptr->compare_value;
    176e:	ac e5       	ldi	r26, 0x5C	; 92
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	81 81       	ldd	r24, Z+1	; 0x01
    1778:	8c 93       	st	X, r24

    /*Initialize current counter value to 0*/
    TCNT0 = 0;
    177a:	e2 e5       	ldi	r30, 0x52	; 82
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	10 82       	st	Z, r1
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <Timer_0_setCompareValue>:

/*Set output compare value for timer0*/
void Timer_0_setCompareValue(const uint8 compare_val)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	0f 92       	push	r0
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR0 = compare_val;
    179c:	ec e5       	ldi	r30, 0x5C	; 92
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	80 83       	st	Z, r24
}
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <Timer_0_setCounterValue>:

/*Set current counter value for timer0*/
void Timer_0_setCounterValue(const uint8 counter_val)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	0f 92       	push	r0
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT0 = counter_val;
    17b8:	e2 e5       	ldi	r30, 0x52	; 82
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	80 83       	st	Z, r24
}
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <Timer_0_setCompareCallBack>:

/*Set compare mode isr callback*/
void Timer_0_setCompareCallBack(void (*f_ptr)(void))
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <Timer_0_setCompareCallBack+0x6>
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_0_Compare_callBackPtr = f_ptr;
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	90 93 7d 00 	sts	0x007D, r25
    17de:	80 93 7c 00 	sts	0x007C, r24
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <Timer_0_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_0_setOverflowCallBack(void (*f_ptr)(void))
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <Timer_0_setOverflowCallBack+0x6>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_0_Overflow_callBackPtr = f_ptr;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	90 93 7b 00 	sts	0x007B, r25
    1802:	80 93 7a 00 	sts	0x007A, r24
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <Timer_0_EnableCompareInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_0_EnableCompareInterrupt(void)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE0);
    1818:	a9 e5       	ldi	r26, 0x59	; 89
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e9 e5       	ldi	r30, 0x59	; 89
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	8c 93       	st	X, r24
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <Timer_0_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_0_EnableOverflowInterrupt(void)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE0);
    1834:	a9 e5       	ldi	r26, 0x59	; 89
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e9 e5       	ldi	r30, 0x59	; 89
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	81 60       	ori	r24, 0x01	; 1
    1840:	8c 93       	st	X, r24
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <Timer_0_DisableCompareInterrupt>:
/*Disable compare mode Interrupt*/

void Timer_0_DisableCompareInterrupt(void)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE0);
    1850:	a9 e5       	ldi	r26, 0x59	; 89
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e9 e5       	ldi	r30, 0x59	; 89
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8d 7f       	andi	r24, 0xFD	; 253
    185c:	8c 93       	st	X, r24
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <Timer_0_DisableOverflowInterrupt>:
/*Disable overflow mode Interrupt*/

void Timer_0_DisableOverflowInterrupt(void)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE0);
    186c:	a9 e5       	ldi	r26, 0x59	; 89
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e9 e5       	ldi	r30, 0x59	; 89
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8e 7f       	andi	r24, 0xFE	; 254
    1878:	8c 93       	st	X, r24
}
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <Timer_0_deInit>:

void Timer_0_deInit(void)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR0 = 0;
    1888:	e3 e5       	ldi	r30, 0x53	; 83
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	10 82       	st	Z, r1
    OCR0 = 0;
    188e:	ec e5       	ldi	r30, 0x5C	; 92
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	10 82       	st	Z, r1
    TCNT0 = 0;
    1894:	e2 e5       	ldi	r30, 0x52	; 82
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE0);
    189a:	a9 e5       	ldi	r26, 0x59	; 89
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e9 e5       	ldi	r30, 0x59	; 89
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8d 7f       	andi	r24, 0xFD	; 253
    18a6:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE0);
    18a8:	a9 e5       	ldi	r26, 0x59	; 89
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e9 e5       	ldi	r30, 0x59	; 89
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8e 7f       	andi	r24, 0xFE	; 254
    18b4:	8c 93       	st	X, r24
}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <Timer_0_setPrescalar>:

void Timer_0_setPrescalar(const Timer_ClockType clock)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	0f 92       	push	r0
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR0 = (TCCR0 & (~0X07)) | clock;
    18c8:	a3 e5       	ldi	r26, 0x53	; 83
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e3 e5       	ldi	r30, 0x53	; 83
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	98 2f       	mov	r25, r24
    18d4:	98 7f       	andi	r25, 0xF8	; 248
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	89 2b       	or	r24, r25
    18da:	8c 93       	st	X, r24
}
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <Timer_2_init>:
#endif
/*                           Timer 2                 */
#ifdef TIMER_2
void Timer_2_init(const Timer_0_2_ConfigType *const cfg_ptr)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <Timer_2_init+0x6>
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <Timer_2_init+0x8>
    18ec:	0f 92       	push	r0
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register*/
    TCCR2 = ((((~cfg_ptr->mode) & 0b01)) << 7) | ((cfg_ptr->mode & 0b01) << 6) | (cfg_ptr->com_mode << 4) | ((cfg_ptr->mode & 0b10) << 2) | cfg_ptr->clock;
    18f6:	85 e4       	ldi	r24, 0x45	; 69
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9d 83       	std	Y+5, r25	; 0x05
    18fc:	8c 83       	std	Y+4, r24	; 0x04
    18fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1900:	fa 81       	ldd	r31, Y+2	; 0x02
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	90 70       	andi	r25, 0x00	; 0
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	19 f4       	brne	.+6      	; 0x1916 <Timer_2_init+0x32>
    1910:	90 e8       	ldi	r25, 0x80	; 128
    1912:	9b 83       	std	Y+3, r25	; 0x03
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <Timer_2_init+0x34>
    1916:	1b 82       	std	Y+3, r1	; 0x03
    1918:	e9 81       	ldd	r30, Y+1	; 0x01
    191a:	fa 81       	ldd	r31, Y+2	; 0x02
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	00 24       	eor	r0, r0
    1928:	96 95       	lsr	r25
    192a:	87 95       	ror	r24
    192c:	07 94       	ror	r0
    192e:	96 95       	lsr	r25
    1930:	87 95       	ror	r24
    1932:	07 94       	ror	r0
    1934:	98 2f       	mov	r25, r24
    1936:	80 2d       	mov	r24, r0
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	28 2b       	or	r18, r24
    193c:	e9 81       	ldd	r30, Y+1	; 0x01
    193e:	fa 81       	ldd	r31, Y+2	; 0x02
    1940:	83 81       	ldd	r24, Z+3	; 0x03
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	82 95       	swap	r24
    1948:	92 95       	swap	r25
    194a:	90 7f       	andi	r25, 0xF0	; 240
    194c:	98 27       	eor	r25, r24
    194e:	80 7f       	andi	r24, 0xF0	; 240
    1950:	98 27       	eor	r25, r24
    1952:	28 2b       	or	r18, r24
    1954:	e9 81       	ldd	r30, Y+1	; 0x01
    1956:	fa 81       	ldd	r31, Y+2	; 0x02
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	88 2f       	mov	r24, r24
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	82 70       	andi	r24, 0x02	; 2
    1960:	90 70       	andi	r25, 0x00	; 0
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	92 2f       	mov	r25, r18
    196c:	98 2b       	or	r25, r24
    196e:	e9 81       	ldd	r30, Y+1	; 0x01
    1970:	fa 81       	ldd	r31, Y+2	; 0x02
    1972:	80 81       	ld	r24, Z
    1974:	89 2b       	or	r24, r25
    1976:	ec 81       	ldd	r30, Y+4	; 0x04
    1978:	fd 81       	ldd	r31, Y+5	; 0x05
    197a:	80 83       	st	Z, r24

    /*insert compare value to compare register*/
    OCR2 = cfg_ptr->compare_value;
    197c:	a3 e4       	ldi	r26, 0x43	; 67
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e9 81       	ldd	r30, Y+1	; 0x01
    1982:	fa 81       	ldd	r31, Y+2	; 0x02
    1984:	81 81       	ldd	r24, Z+1	; 0x01
    1986:	8c 93       	st	X, r24

    /*Initialize current counter value to 0*/
    TCNT2 = 0;
    1988:	e4 e4       	ldi	r30, 0x44	; 68
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	10 82       	st	Z, r1
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <Timer_2_setCompareValue>:

/*Set output compare value for timer0*/
void Timer_2_setCompareValue(const uint8 compare_val)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	0f 92       	push	r0
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR2 = compare_val;
    19aa:	e3 e4       	ldi	r30, 0x43	; 67
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	80 83       	st	Z, r24
}
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <Timer_2_setCounterValue>:

/*Set current counter value for timer0*/
void Timer_2_setCounterValue(const uint8 counter_val)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT2 = counter_val;
    19c6:	e4 e4       	ldi	r30, 0x44	; 68
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	80 83       	st	Z, r24
}
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <Timer_2_setCompareCallBack>:

/*Set compare mode isr callback*/
void Timer_2_setCompareCallBack(void (*f_ptr)(void))
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	00 d0       	rcall	.+0      	; 0x19dc <Timer_2_setCompareCallBack+0x6>
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_2_Compare_callBackPtr = f_ptr;
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	90 93 81 00 	sts	0x0081, r25
    19ec:	80 93 80 00 	sts	0x0080, r24
}
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <Timer_2_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_2_setOverflowCallBack(void (*f_ptr)(void))
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <Timer_2_setOverflowCallBack+0x6>
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_2_Overflow_callBackPtr = f_ptr;
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	90 93 7f 00 	sts	0x007F, r25
    1a10:	80 93 7e 00 	sts	0x007E, r24
}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <Timer_2_EnableCompareInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_2_EnableCompareInterrupt(void)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE2);
    1a26:	a9 e5       	ldi	r26, 0x59	; 89
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e9 e5       	ldi	r30, 0x59	; 89
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 68       	ori	r24, 0x80	; 128
    1a32:	8c 93       	st	X, r24
}
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <Timer_2_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_2_EnableOverflowInterrupt(void)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE2);
    1a42:	a9 e5       	ldi	r26, 0x59	; 89
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e9 e5       	ldi	r30, 0x59	; 89
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 64       	ori	r24, 0x40	; 64
    1a4e:	8c 93       	st	X, r24
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <Timer_2_DisableCompareInterrupt>:
/*Disable compare mode Interrupt*/

void Timer_2_DisableCompareInterrupt(void)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE2);
    1a5e:	a9 e5       	ldi	r26, 0x59	; 89
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e9 e5       	ldi	r30, 0x59	; 89
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8f 77       	andi	r24, 0x7F	; 127
    1a6a:	8c 93       	st	X, r24
}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <Timer_2_DisableOverflowInterrupt>:
/*Disable overflow mode Interrupt*/

void Timer_2_DisableOverflowInterrupt(void)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE2);
    1a7a:	a9 e5       	ldi	r26, 0x59	; 89
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e9 e5       	ldi	r30, 0x59	; 89
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	8f 7b       	andi	r24, 0xBF	; 191
    1a86:	8c 93       	st	X, r24
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <Timer_2_deInit>:

void Timer_2_deInit(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR2 = 0;
    1a96:	e5 e4       	ldi	r30, 0x45	; 69
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	10 82       	st	Z, r1
    OCR2 = 0;
    1a9c:	e3 e4       	ldi	r30, 0x43	; 67
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	10 82       	st	Z, r1
    TCNT2 = 0;
    1aa2:	e4 e4       	ldi	r30, 0x44	; 68
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE2);
    1aa8:	a9 e5       	ldi	r26, 0x59	; 89
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e9 e5       	ldi	r30, 0x59	; 89
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8f 77       	andi	r24, 0x7F	; 127
    1ab4:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE2);
    1ab6:	a9 e5       	ldi	r26, 0x59	; 89
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e9 e5       	ldi	r30, 0x59	; 89
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8f 7b       	andi	r24, 0xBF	; 191
    1ac2:	8c 93       	st	X, r24
}
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <Timer_2_setPrescalar>:

void Timer_2_setPrescalar(const Timer_ClockType clock)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	0f 92       	push	r0
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR2 = (TCCR2 & (~0X07)) | clock;
    1ad6:	a5 e4       	ldi	r26, 0x45	; 69
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e4       	ldi	r30, 0x45	; 69
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	98 2f       	mov	r25, r24
    1ae2:	98 7f       	andi	r25, 0xF8	; 248
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	89 2b       	or	r24, r25
    1ae8:	8c 93       	st	X, r24
}
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <Timer_1_init>:
#endif
/*                       Timer 1               */
#ifdef TIMER_1
void Timer_1_init(const Timer_1_ConfigType *const cfg_ptr)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <Timer_1_init+0x6>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    /*insert all configuration settings in the control register A*/
    TCCR1A = (cfg_ptr->com_modeA << 6) | (cfg_ptr->com_modeB << 4) | (cfg_ptr->mode & 0x03);
    1b00:	af e4       	ldi	r26, 0x4F	; 79
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e9 81       	ldd	r30, Y+1	; 0x01
    1b06:	fa 81       	ldd	r31, Y+2	; 0x02
    1b08:	86 81       	ldd	r24, Z+6	; 0x06
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	00 24       	eor	r0, r0
    1b10:	96 95       	lsr	r25
    1b12:	87 95       	ror	r24
    1b14:	07 94       	ror	r0
    1b16:	96 95       	lsr	r25
    1b18:	87 95       	ror	r24
    1b1a:	07 94       	ror	r0
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	80 2d       	mov	r24, r0
    1b20:	28 2f       	mov	r18, r24
    1b22:	e9 81       	ldd	r30, Y+1	; 0x01
    1b24:	fa 81       	ldd	r31, Y+2	; 0x02
    1b26:	87 81       	ldd	r24, Z+7	; 0x07
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	82 95       	swap	r24
    1b2e:	92 95       	swap	r25
    1b30:	90 7f       	andi	r25, 0xF0	; 240
    1b32:	98 27       	eor	r25, r24
    1b34:	80 7f       	andi	r24, 0xF0	; 240
    1b36:	98 27       	eor	r25, r24
    1b38:	92 2f       	mov	r25, r18
    1b3a:	98 2b       	or	r25, r24
    1b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b40:	85 81       	ldd	r24, Z+5	; 0x05
    1b42:	83 70       	andi	r24, 0x03	; 3
    1b44:	89 2b       	or	r24, r25
    1b46:	8c 93       	st	X, r24

    if ((cfg_ptr->mode == 0) || (cfg_ptr->mode == 4) || (cfg_ptr->mode == 12))
    1b48:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4c:	85 81       	ldd	r24, Z+5	; 0x05
    1b4e:	88 23       	and	r24, r24
    1b50:	51 f0       	breq	.+20     	; 0x1b66 <Timer_1_init+0x74>
    1b52:	e9 81       	ldd	r30, Y+1	; 0x01
    1b54:	fa 81       	ldd	r31, Y+2	; 0x02
    1b56:	85 81       	ldd	r24, Z+5	; 0x05
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	29 f0       	breq	.+10     	; 0x1b66 <Timer_1_init+0x74>
    1b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b60:	85 81       	ldd	r24, Z+5	; 0x05
    1b62:	8c 30       	cpi	r24, 0x0C	; 12
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <Timer_1_init+0x82>
    {
        /*SET FOC  bits on non-PWM modes*/
        TCCR1A |= (0b11 << 2);
    1b66:	af e4       	ldi	r26, 0x4F	; 79
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	ef e4       	ldi	r30, 0x4F	; 79
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	8c 60       	ori	r24, 0x0C	; 12
    1b72:	8c 93       	st	X, r24
    }
    /*insert all configuration settings in the control register B*/
    TCCR1B = ((cfg_ptr->mode & 0xC0) << 1) | (cfg_ptr->clock);
    1b74:	ae e4       	ldi	r26, 0x4E	; 78
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7c:	85 81       	ldd	r24, Z+5	; 0x05
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	80 7c       	andi	r24, 0xC0	; 192
    1b84:	90 70       	andi	r25, 0x00	; 0
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b90:	80 81       	ld	r24, Z
    1b92:	89 2b       	or	r24, r25
    1b94:	8c 93       	st	X, r24
    /*insert compare value to its compare register*/
    OCR1A = cfg_ptr->compare_valueA;
    1b96:	aa e4       	ldi	r26, 0x4A	; 74
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	92 81       	ldd	r25, Z+2	; 0x02
    1ba2:	11 96       	adiw	r26, 0x01	; 1
    1ba4:	9c 93       	st	X, r25
    1ba6:	8e 93       	st	-X, r24
    OCR1B = cfg_ptr->compare_valueB;
    1ba8:	a8 e4       	ldi	r26, 0x48	; 72
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e9 81       	ldd	r30, Y+1	; 0x01
    1bae:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb0:	83 81       	ldd	r24, Z+3	; 0x03
    1bb2:	94 81       	ldd	r25, Z+4	; 0x04
    1bb4:	11 96       	adiw	r26, 0x01	; 1
    1bb6:	9c 93       	st	X, r25
    1bb8:	8e 93       	st	-X, r24

    /*Initialize current counter value to 0*/
    TCNT1 = 0;
    1bba:	ec e4       	ldi	r30, 0x4C	; 76
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	11 82       	std	Z+1, r1	; 0x01
    1bc0:	10 82       	st	Z, r1
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <Timer_1_deInit>:
void Timer_1_deInit(void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    /*reset all registers and disable all interrupts*/
    TCCR1A = 0;
    1bd4:	ef e4       	ldi	r30, 0x4F	; 79
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	10 82       	st	Z, r1
    TCCR1B = 0;
    1bda:	ee e4       	ldi	r30, 0x4E	; 78
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	10 82       	st	Z, r1
    OCR1A = 0;
    1be0:	ea e4       	ldi	r30, 0x4A	; 74
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	11 82       	std	Z+1, r1	; 0x01
    1be6:	10 82       	st	Z, r1
    OCR1B = 0;
    1be8:	e8 e4       	ldi	r30, 0x48	; 72
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	11 82       	std	Z+1, r1	; 0x01
    1bee:	10 82       	st	Z, r1
    TCNT1 = 0;
    1bf0:	ec e4       	ldi	r30, 0x4C	; 76
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	11 82       	std	Z+1, r1	; 0x01
    1bf6:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, OCIE1A);
    1bf8:	a9 e5       	ldi	r26, 0x59	; 89
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e9 e5       	ldi	r30, 0x59	; 89
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8f 7e       	andi	r24, 0xEF	; 239
    1c04:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, OCIE1B);
    1c06:	a9 e5       	ldi	r26, 0x59	; 89
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 e5       	ldi	r30, 0x59	; 89
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	87 7f       	andi	r24, 0xF7	; 247
    1c12:	8c 93       	st	X, r24
    CLEAR_BIT(TIMSK, TOIE1);
    1c14:	a9 e5       	ldi	r26, 0x59	; 89
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e9 e5       	ldi	r30, 0x59	; 89
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8b 7f       	andi	r24, 0xFB	; 251
    1c20:	8c 93       	st	X, r24
}
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <Timer_1_setCompareValueA>:
void Timer_1_setCompareValueA(const uint16 compare_val)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <Timer_1_setCompareValueA+0x6>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR1A = compare_val;
    1c36:	ea e4       	ldi	r30, 0x4A	; 74
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
}
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <Timer_1_setCompareValueB>:
void Timer_1_setCompareValueB(const uint16 compare_val)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <Timer_1_setCompareValueB+0x6>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
    /*insertcompare value to compare register*/
    OCR1B = compare_val;
    1c5a:	e8 e4       	ldi	r30, 0x48	; 72
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <Timer_1_setCounterValue>:
/*Set current counter value for timer0*/
void Timer_1_setCounterValue(const uint16 counter_val)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <Timer_1_setCounterValue+0x6>
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    /*insert current counter value*/
    TCNT1 = counter_val;
    1c7e:	ec e4       	ldi	r30, 0x4C	; 76
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <Timer_1_setCompareACallBack>:

/*Set compare mode isr callback*/
void Timer_1_setCompareACallBack(void (*f_ptr)(void))
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <Timer_1_setCompareACallBack+0x6>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_1_CompareA_callBackPtr = f_ptr;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	90 93 85 00 	sts	0x0085, r25
    1caa:	80 93 84 00 	sts	0x0084, r24
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <Timer_1_setCompareBCallBack>:
/*Set compare mode isr callback*/
void Timer_1_setCompareBCallBack(void (*f_ptr)(void))
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <Timer_1_setCompareBCallBack+0x6>
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01

    g_Timer_1_CompareB_callBackPtr = f_ptr;
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	90 93 87 00 	sts	0x0087, r25
    1cce:	80 93 86 00 	sts	0x0086, r24
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <Timer_1_setOverflowCallBack>:

/*Set overflow mode isr callback*/
void Timer_1_setOverflowCallBack(void (*f_ptr)(void))
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <Timer_1_setOverflowCallBack+0x6>
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    g_Timer_1_Overflow_callBackPtr = f_ptr;
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	90 93 83 00 	sts	0x0083, r25
    1cf2:	80 93 82 00 	sts	0x0082, r24
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <Timer_1_EnableCompareAInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_1_EnableCompareAInterrupt(void)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
    1d08:	a9 e5       	ldi	r26, 0x59	; 89
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e9 e5       	ldi	r30, 0x59	; 89
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	80 61       	ori	r24, 0x10	; 16
    1d14:	8c 93       	st	X, r24
}
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <Timer_1_EnableCompareBInterrupt>:
/*Enable compare mode Interrupt*/
void Timer_1_EnableCompareBInterrupt(void)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
    1d24:	a9 e5       	ldi	r26, 0x59	; 89
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e9 e5       	ldi	r30, 0x59	; 89
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	88 60       	ori	r24, 0x08	; 8
    1d30:	8c 93       	st	X, r24
}
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <Timer_1_EnableOverflowInterrupt>:

/*Enable compare mode Interrupt*/
void Timer_1_EnableOverflowInterrupt(void)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
    1d40:	a9 e5       	ldi	r26, 0x59	; 89
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e9 e5       	ldi	r30, 0x59	; 89
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	84 60       	ori	r24, 0x04	; 4
    1d4c:	8c 93       	st	X, r24
}
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <Timer_1_DisableCompareAInterrupt>:

/*Disable compare mode Interrupt*/
void Timer_1_DisableCompareAInterrupt(void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE1A);
    1d5c:	a9 e5       	ldi	r26, 0x59	; 89
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e9 e5       	ldi	r30, 0x59	; 89
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	8f 7e       	andi	r24, 0xEF	; 239
    1d68:	8c 93       	st	X, r24
}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <Timer_1_DisableCompareBInterrupt>:

/*Disable compare mode Interrupt*/
void Timer_1_DisableCompareBInterrupt(void)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, OCIE1A);
    1d78:	a9 e5       	ldi	r26, 0x59	; 89
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e9 e5       	ldi	r30, 0x59	; 89
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	8f 7e       	andi	r24, 0xEF	; 239
    1d84:	8c 93       	st	X, r24
}
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <Timer_1_DisableOverflowInterrupt>:

/*Disable overflow mode Interrupt*/
void Timer_1_DisableOverflowInterrupt(void)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TIMSK, TOIE1);
    1d94:	a9 e5       	ldi	r26, 0x59	; 89
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e9 e5       	ldi	r30, 0x59	; 89
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8b 7f       	andi	r24, 0xFB	; 251
    1da0:	8c 93       	st	X, r24
}
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <Timer_1_setPrescalar>:

void Timer_1_setPrescalar(const Timer_ClockType clock)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	0f 92       	push	r0
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	89 83       	std	Y+1, r24	; 0x01
    /*insert clock prescalar*/
    TCCR1B = (TCCR1B & (~0X07)) | clock;
    1db4:	ae e4       	ldi	r26, 0x4E	; 78
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	ee e4       	ldi	r30, 0x4E	; 78
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	98 2f       	mov	r25, r24
    1dc0:	98 7f       	andi	r25, 0xF8	; 248
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	89 2b       	or	r24, r25
    1dc6:	8c 93       	st	X, r24
}
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <__vector_11>:
/*******************************************************************************
 *                              ISRs                                                    *
 *******************************************************************************/

ISR(USART_RXC_vect)
{
    1dd0:	1f 92       	push	r1
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	2f 93       	push	r18
    1ddc:	3f 93       	push	r19
    1dde:	4f 93       	push	r20
    1de0:	5f 93       	push	r21
    1de2:	6f 93       	push	r22
    1de4:	7f 93       	push	r23
    1de6:	8f 93       	push	r24
    1de8:	9f 93       	push	r25
    1dea:	af 93       	push	r26
    1dec:	bf 93       	push	r27
    1dee:	ef 93       	push	r30
    1df0:	ff 93       	push	r31
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_Recieve_Complete_callBackPtr != NULL_PTR)
    1dfa:	80 91 88 00 	lds	r24, 0x0088
    1dfe:	90 91 89 00 	lds	r25, 0x0089
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	29 f0       	breq	.+10     	; 0x1e10 <__vector_11+0x40>
    {
        (*g_UART_Recieve_Complete_callBackPtr)();
    1e06:	e0 91 88 00 	lds	r30, 0x0088
    1e0a:	f0 91 89 00 	lds	r31, 0x0089
    1e0e:	09 95       	icall
    }
}
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	ff 91       	pop	r31
    1e16:	ef 91       	pop	r30
    1e18:	bf 91       	pop	r27
    1e1a:	af 91       	pop	r26
    1e1c:	9f 91       	pop	r25
    1e1e:	8f 91       	pop	r24
    1e20:	7f 91       	pop	r23
    1e22:	6f 91       	pop	r22
    1e24:	5f 91       	pop	r21
    1e26:	4f 91       	pop	r20
    1e28:	3f 91       	pop	r19
    1e2a:	2f 91       	pop	r18
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	0f 90       	pop	r0
    1e32:	1f 90       	pop	r1
    1e34:	18 95       	reti

00001e36 <__vector_13>:
ISR(USART_TXC_vect)
{
    1e36:	1f 92       	push	r1
    1e38:	0f 92       	push	r0
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	0f 92       	push	r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	2f 93       	push	r18
    1e42:	3f 93       	push	r19
    1e44:	4f 93       	push	r20
    1e46:	5f 93       	push	r21
    1e48:	6f 93       	push	r22
    1e4a:	7f 93       	push	r23
    1e4c:	8f 93       	push	r24
    1e4e:	9f 93       	push	r25
    1e50:	af 93       	push	r26
    1e52:	bf 93       	push	r27
    1e54:	ef 93       	push	r30
    1e56:	ff 93       	push	r31
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_Transmit_Complete_callBackPtr != NULL_PTR)
    1e60:	80 91 8a 00 	lds	r24, 0x008A
    1e64:	90 91 8b 00 	lds	r25, 0x008B
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	29 f0       	breq	.+10     	; 0x1e76 <__vector_13+0x40>
    {
        (*g_UART_Transmit_Complete_callBackPtr)();
    1e6c:	e0 91 8a 00 	lds	r30, 0x008A
    1e70:	f0 91 8b 00 	lds	r31, 0x008B
    1e74:	09 95       	icall
    }
}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	ff 91       	pop	r31
    1e7c:	ef 91       	pop	r30
    1e7e:	bf 91       	pop	r27
    1e80:	af 91       	pop	r26
    1e82:	9f 91       	pop	r25
    1e84:	8f 91       	pop	r24
    1e86:	7f 91       	pop	r23
    1e88:	6f 91       	pop	r22
    1e8a:	5f 91       	pop	r21
    1e8c:	4f 91       	pop	r20
    1e8e:	3f 91       	pop	r19
    1e90:	2f 91       	pop	r18
    1e92:	0f 90       	pop	r0
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	0f 90       	pop	r0
    1e98:	1f 90       	pop	r1
    1e9a:	18 95       	reti

00001e9c <__vector_12>:
ISR(USART_UDRE_vect)
{
    1e9c:	1f 92       	push	r1
    1e9e:	0f 92       	push	r0
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	0f 92       	push	r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	2f 93       	push	r18
    1ea8:	3f 93       	push	r19
    1eaa:	4f 93       	push	r20
    1eac:	5f 93       	push	r21
    1eae:	6f 93       	push	r22
    1eb0:	7f 93       	push	r23
    1eb2:	8f 93       	push	r24
    1eb4:	9f 93       	push	r25
    1eb6:	af 93       	push	r26
    1eb8:	bf 93       	push	r27
    1eba:	ef 93       	push	r30
    1ebc:	ff 93       	push	r31
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    if (g_UART_DataReg_Empty_callBackPtr != NULL_PTR)
    1ec6:	80 91 8c 00 	lds	r24, 0x008C
    1eca:	90 91 8d 00 	lds	r25, 0x008D
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	29 f0       	breq	.+10     	; 0x1edc <__vector_12+0x40>
    {
        (*g_UART_DataReg_Empty_callBackPtr)();
    1ed2:	e0 91 8c 00 	lds	r30, 0x008C
    1ed6:	f0 91 8d 00 	lds	r31, 0x008D
    1eda:	09 95       	icall
    }
}
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	ff 91       	pop	r31
    1ee2:	ef 91       	pop	r30
    1ee4:	bf 91       	pop	r27
    1ee6:	af 91       	pop	r26
    1ee8:	9f 91       	pop	r25
    1eea:	8f 91       	pop	r24
    1eec:	7f 91       	pop	r23
    1eee:	6f 91       	pop	r22
    1ef0:	5f 91       	pop	r21
    1ef2:	4f 91       	pop	r20
    1ef4:	3f 91       	pop	r19
    1ef6:	2f 91       	pop	r18
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <UART_init>:
/*******************************************************************************
 *                      Function Definitions                                    *
 *******************************************************************************/

void UART_init(UART_ConfigType *cfg_ptr)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <UART_init+0x6>
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <UART_init+0x8>
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
    uint16 baud = (((F_CPU) / (8UL * cfg_ptr->baud_rate)) - 1);
    1f12:	eb 81       	ldd	r30, Y+3	; 0x03
    1f14:	fc 81       	ldd	r31, Y+4	; 0x04
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	cc 01       	movw	r24, r24
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	aa 1f       	adc	r26, r26
    1f26:	bb 1f       	adc	r27, r27
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	aa 1f       	adc	r26, r26
    1f2e:	bb 1f       	adc	r27, r27
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	aa 1f       	adc	r26, r26
    1f36:	bb 1f       	adc	r27, r27
    1f38:	9c 01       	movw	r18, r24
    1f3a:	ad 01       	movw	r20, r26
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	92 e1       	ldi	r25, 0x12	; 18
    1f40:	aa e7       	ldi	r26, 0x7A	; 122
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__udivmodsi4>
    1f4c:	da 01       	movw	r26, r20
    1f4e:	c9 01       	movw	r24, r18
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
    /*Description: UCSRA (uart control & status reg.)
        U2x =  1 for double transmission speed (8 Divisor instead of 16)
*/
    UCSRA = (1 << U2X);
    1f56:	eb e2       	ldi	r30, 0x2B	; 43
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	82 e0       	ldi	r24, 0x02	; 2
    1f5c:	80 83       	st	Z, r24
UDRIE   = 0 DATA REG. EMPTY INTERRUPT ENABLE BIT (DISABLE)
RXEN    = second bit of conn_direction to turn on transmitter
TXEN    = first bit of conn_direction to turn on reciever
UCSZ2   = c_size bit-3 
*/
    UCSRB = (cfg_ptr->conn_direction << 3) | (cfg_ptr->c_size & (0x04));
    1f5e:	aa e2       	ldi	r26, 0x2A	; 42
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	eb 81       	ldd	r30, Y+3	; 0x03
    1f64:	fc 81       	ldd	r31, Y+4	; 0x04
    1f66:	86 81       	ldd	r24, Z+6	; 0x06
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	98 2f       	mov	r25, r24
    1f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f7e:	84 81       	ldd	r24, Z+4	; 0x04
    1f80:	84 70       	andi	r24, 0x04	; 4
    1f82:	89 2b       	or	r24, r25
    1f84:	8c 93       	st	X, r24
UPM1:0  = 00 DISABLE PARITY CHECKS
USBS    = 0 1-STOP-BIT SELECT
UPCOL   = CLOCK polarity MODE
UCSZ1:0 = first 2-bitts in character size;
*/
    UCSRC = (1 << URSEL) | (cfg_ptr->mode << 6) | ((cfg_ptr->c_size & 0x03) << 1) | cfg_ptr->clock_polarity;
    1f86:	a0 e4       	ldi	r26, 0x40	; 64
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8e:	80 81       	ld	r24, Z
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	00 24       	eor	r0, r0
    1f96:	96 95       	lsr	r25
    1f98:	87 95       	ror	r24
    1f9a:	07 94       	ror	r0
    1f9c:	96 95       	lsr	r25
    1f9e:	87 95       	ror	r24
    1fa0:	07 94       	ror	r0
    1fa2:	98 2f       	mov	r25, r24
    1fa4:	80 2d       	mov	r24, r0
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	20 68       	ori	r18, 0x80	; 128
    1faa:	eb 81       	ldd	r30, Y+3	; 0x03
    1fac:	fc 81       	ldd	r31, Y+4	; 0x04
    1fae:	84 81       	ldd	r24, Z+4	; 0x04
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	83 70       	andi	r24, 0x03	; 3
    1fb6:	90 70       	andi	r25, 0x00	; 0
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	92 2f       	mov	r25, r18
    1fbe:	98 2b       	or	r25, r24
    1fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc4:	87 81       	ldd	r24, Z+7	; 0x07
    1fc6:	89 2b       	or	r24, r25
    1fc8:	8c 93       	st	X, r24

    /*Description: UBBR
URSEL   = 0 TO WRITE TO UBBR
UBBR = BAUD RATE
*/
    UBRRH = (baud >> 8);
    1fca:	e0 e4       	ldi	r30, 0x40	; 64
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	89 2f       	mov	r24, r25
    1fd4:	99 27       	eor	r25, r25
    1fd6:	80 83       	st	Z, r24
    UBRRL = (baud);
    1fd8:	e9 e2       	ldi	r30, 0x29	; 41
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	80 83       	st	Z, r24
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <UART_sendData>:

/*data is uint16 in case of 9-bit mode*/
void UART_sendData(uint16 data)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <UART_sendData+0x6>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    /*Wait untill data transmit buffer is empty */
    while (BIT_IS_CLEAR(UCSRA, UDRE))
    1ffc:	eb e2       	ldi	r30, 0x2B	; 43
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	88 2f       	mov	r24, r24
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	80 72       	andi	r24, 0x20	; 32
    2008:	90 70       	andi	r25, 0x00	; 0
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	b9 f3       	breq	.-18     	; 0x1ffc <UART_sendData+0xe>
        ;
    /*in case of 9-bit uart insert 9nth bit into ucsrb*/
    if (BIT_IS_SET(UCSRB, UCSZ2))
    200e:	ea e2       	ldi	r30, 0x2A	; 42
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	84 70       	andi	r24, 0x04	; 4
    201a:	90 70       	andi	r25, 0x00	; 0
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	39 f0       	breq	.+14     	; 0x202e <UART_sendData+0x40>
    {
        UCSRB = (UCSRB & (~0X01)) | (data & 0x100);
    2020:	aa e2       	ldi	r26, 0x2A	; 42
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	ea e2       	ldi	r30, 0x2A	; 42
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8e 7f       	andi	r24, 0xFE	; 254
    202c:	8c 93       	st	X, r24
    }
    /*insert REST of data into UDR buffer to transmit*/
    UDR = data;
    202e:	ec e2       	ldi	r30, 0x2C	; 44
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	80 83       	st	Z, r24
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <UART_recieveData>:

uint16 UART_recieveData(void)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <UART_recieveData+0x6>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    /*Wait untill recieve is complete*/
    while (BIT_IS_CLEAR(UCSRA, RXC))
    204a:	eb e2       	ldi	r30, 0x2B	; 43
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	88 23       	and	r24, r24
    2052:	dc f7       	brge	.-10     	; 0x204a <UART_recieveData+0xa>
        ;
    /*in case of 9-bit uart */
    if (BIT_IS_SET(UCSRB, UCSZ2))
    2054:	ea e2       	ldi	r30, 0x2A	; 42
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	84 70       	andi	r24, 0x04	; 4
    2060:	90 70       	andi	r25, 0x00	; 0
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	b1 f0       	breq	.+44     	; 0x2092 <UART_recieveData+0x52>
    {
        /*return recieved data in data register plus 9nth bit*/
        return (UDR | ((UCSRB & 0X02) << 7));
    2066:	ec e2       	ldi	r30, 0x2C	; 44
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	ea e2       	ldi	r30, 0x2A	; 42
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	82 70       	andi	r24, 0x02	; 2
    207c:	90 70       	andi	r25, 0x00	; 0
    207e:	96 95       	lsr	r25
    2080:	98 2f       	mov	r25, r24
    2082:	88 27       	eor	r24, r24
    2084:	97 95       	ror	r25
    2086:	87 95       	ror	r24
    2088:	82 2b       	or	r24, r18
    208a:	93 2b       	or	r25, r19
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	07 c0       	rjmp	.+14     	; 0x20a0 <UART_recieveData+0x60>
    }
    else
    {
        /*return recieved data in data register*/
        return UDR;
    2092:	ec e2       	ldi	r30, 0x2C	; 44
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	3a 83       	std	Y+2, r19	; 0x02
    209e:	29 83       	std	Y+1, r18	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    }
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <UART_sendString>:

void UART_sendString(const uint8 *string)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <UART_sendString+0x6>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	0c c0       	rjmp	.+24     	; 0x20d6 <UART_sendString+0x28>
    /*send each character of our string until we reach the null terminator*/
    while (*string != '\0')
    {
        UART_sendData(*string);
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	80 81       	ld	r24, Z
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <UART_sendData>
        string++;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *string)
{
    /*send each character of our string until we reach the null terminator*/
    while (*string != '\0')
    20d6:	e9 81       	ldd	r30, Y+1	; 0x01
    20d8:	fa 81       	ldd	r31, Y+2	; 0x02
    20da:	80 81       	ld	r24, Z
    20dc:	88 23       	and	r24, r24
    20de:	79 f7       	brne	.-34     	; 0x20be <UART_sendString+0x10>
    {
        UART_sendData(*string);
        string++;
    }
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <UART_recieveString>:
void UART_recieveString(uint8 *string)
{
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <UART_recieveString+0xa>
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <UART_recieveString+0xc>
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	9c 83       	std	Y+4, r25	; 0x04
    20fc:	8b 83       	std	Y+3, r24	; 0x03
    /*recieve each character string until we find a '#' 
    then replace it with null terminator*/

    uint16 i = 0;
    20fe:	1a 82       	std	Y+2, r1	; 0x02
    2100:	19 82       	std	Y+1, r1	; 0x01
    string[i] = UART_recieveData();
    2102:	2b 81       	ldd	r18, Y+3	; 0x03
    2104:	3c 81       	ldd	r19, Y+4	; 0x04
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	89 01       	movw	r16, r18
    210c:	08 0f       	add	r16, r24
    210e:	19 1f       	adc	r17, r25
    2110:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_recieveData>
    2114:	f8 01       	movw	r30, r16
    2116:	80 83       	st	Z, r24
    2118:	10 c0       	rjmp	.+32     	; 0x213a <UART_recieveString+0x50>
    while (string[i] != '#')
    {
        i++;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
        string[i] = UART_recieveData();
    2124:	2b 81       	ldd	r18, Y+3	; 0x03
    2126:	3c 81       	ldd	r19, Y+4	; 0x04
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	89 01       	movw	r16, r18
    212e:	08 0f       	add	r16, r24
    2130:	19 1f       	adc	r17, r25
    2132:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_recieveData>
    2136:	f8 01       	movw	r30, r16
    2138:	80 83       	st	Z, r24
    /*recieve each character string until we find a '#' 
    then replace it with null terminator*/

    uint16 i = 0;
    string[i] = UART_recieveData();
    while (string[i] != '#')
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	f9 01       	movw	r30, r18
    2144:	e8 0f       	add	r30, r24
    2146:	f9 1f       	adc	r31, r25
    2148:	80 81       	ld	r24, Z
    214a:	83 32       	cpi	r24, 0x23	; 35
    214c:	31 f7       	brne	.-52     	; 0x211a <UART_recieveString+0x30>
    {
        i++;
        string[i] = UART_recieveData();
    }
    string[i] = '\0';
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	29 81       	ldd	r18, Y+1	; 0x01
    2154:	3a 81       	ldd	r19, Y+2	; 0x02
    2156:	fc 01       	movw	r30, r24
    2158:	e2 0f       	add	r30, r18
    215a:	f3 1f       	adc	r31, r19
    215c:	10 82       	st	Z, r1
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	08 95       	ret

00002170 <UART_setRecieveCompleteCallback>:

void UART_setRecieveCompleteCallback(void (*f_ptr)(void))
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <UART_setRecieveCompleteCallback+0x6>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
    /*set global pointer of the recieve interrupt functin in isr*/
    g_UART_Recieve_Complete_callBackPtr = f_ptr;
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	90 93 89 00 	sts	0x0089, r25
    2186:	80 93 88 00 	sts	0x0088, r24
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <UART_setTransmitCompleteCallback>:
void UART_setTransmitCompleteCallback(void (*f_ptr)(void))
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <UART_setTransmitCompleteCallback+0x6>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
    /*set global pointer of the transmit interrupt functin in isr*/

    g_UART_Transmit_Complete_callBackPtr = f_ptr;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	90 93 8b 00 	sts	0x008B, r25
    21aa:	80 93 8a 00 	sts	0x008A, r24
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <UART_setDataEmptyCallback>:
void UART_setDataEmptyCallback(void (*f_ptr)(void))
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	00 d0       	rcall	.+0      	; 0x21be <UART_setDataEmptyCallback+0x6>
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01

    /*set global pointer of the data empty interrupt functin in isr*/
    g_UART_DataReg_Empty_callBackPtr = f_ptr;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	90 93 8d 00 	sts	0x008D, r25
    21ce:	80 93 8c 00 	sts	0x008C, r24
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <UART_enableRecieveCompleteInterrupt>:
void UART_enableRecieveCompleteInterrupt(void)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    /*set interrupt enable bit for recieve complete*/
    SET_BIT(UCSRB, RXCIE);
    21e4:	aa e2       	ldi	r26, 0x2A	; 42
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ea e2       	ldi	r30, 0x2A	; 42
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 68       	ori	r24, 0x80	; 128
    21f0:	8c 93       	st	X, r24
}
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <UART_enableTransmitCompleteInterrupt>:
void UART_enableTransmitCompleteInterrupt(void)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62

    /*set interrupt enable bit for transfer complete*/
    SET_BIT(UCSRB, TXCIE);
    2200:	aa e2       	ldi	r26, 0x2A	; 42
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	ea e2       	ldi	r30, 0x2A	; 42
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	80 64       	ori	r24, 0x40	; 64
    220c:	8c 93       	st	X, r24
}
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <UART_enableDataEmptyInterrupt>:
void UART_enableDataEmptyInterrupt(void)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62

    /*set interrupt enable bit for data empty*/
    SET_BIT(UCSRB, UDRIE);
    221c:	aa e2       	ldi	r26, 0x2A	; 42
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ea e2       	ldi	r30, 0x2A	; 42
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	80 62       	ori	r24, 0x20	; 32
    2228:	8c 93       	st	X, r24
}
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <UART_disableRecieveCompleteInterrupt>:
void UART_disableRecieveCompleteInterrupt(void)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    /*clear interrupt enable bit for recieve complete*/
    CLEAR_BIT(UCSRB, RXCIE);
    2238:	aa e2       	ldi	r26, 0x2A	; 42
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ea e2       	ldi	r30, 0x2A	; 42
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 77       	andi	r24, 0x7F	; 127
    2244:	8c 93       	st	X, r24
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <UART_disableTransmitCompleteInterrupt>:
void UART_disableTransmitCompleteInterrupt(void)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62

    /*clear interrupt enable bit for transfer complete*/
    CLEAR_BIT(UCSRB, TXCIE);
    2254:	aa e2       	ldi	r26, 0x2A	; 42
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	ea e2       	ldi	r30, 0x2A	; 42
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	8f 7b       	andi	r24, 0xBF	; 191
    2260:	8c 93       	st	X, r24
}
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <UART_disableDataEmptyInterrupt>:
void UART_disableDataEmptyInterrupt(void)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62

    /*clear interrupt enable bit for data empty*/
    CLEAR_BIT(UCSRB, UDRIE);
    2270:	aa e2       	ldi	r26, 0x2A	; 42
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	ea e2       	ldi	r30, 0x2A	; 42
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	8f 7d       	andi	r24, 0xDF	; 223
    227c:	8c 93       	st	X, r24
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <main>:
void init_APP_MC2();                       /*initialize MC2 app*/
void activate_alarm();                     /*activate alarm for Specified time in MC2projectConfig ALARM_ON_PERIOD*/
void openDoor();                           /*OPEN door by rotating motor for Specified time in MC2projectConfig OPEN_DOOR_PERIOD*/

void main()
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	e7 97       	sbiw	r28, 0x37	; 55
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    uint8 wrong_pass_count = 0;
    2298:	1e 8e       	std	Y+30, r1	; 0x1e
    uint8 first_time_check = 0;
    229a:	1f 8e       	std	Y+31, r1	; 0x1f
    uint8 recieveBuffer[12];
    uint8 passwordBuffer[12];
    uint8 key = 0;
    229c:	1d 8e       	std	Y+29, r1	; 0x1d
    init_APP_MC2(); /*INITIALIZE MCU2*/
    229e:	0e 94 03 13 	call	0x2606	; 0x2606 <init_APP_MC2>
    while (1)
    {
        UART_recieveData();  
    22a2:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_recieveData>
            
                                                                 /*recieve dummy data so this mcu starts when the other mcu is ready*/
        EEPROM_readByte(EEPROM_PASSWORD_CHECK_FIRST_TIME_ADDRESS, &first_time_check); /*read address of first time check to compare it with original code*/
    22a6:	9e 01       	movw	r18, r28
    22a8:	21 5e       	subi	r18, 0xE1	; 225
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	92 e0       	ldi	r25, 0x02	; 2
    22b0:	b9 01       	movw	r22, r18
    22b2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EEPROM_readByte>
        if (first_time_check != EEPROM_PASSWORD_CHECK_FIRST_TIME_CODE)                /*if code is not equal to the first time check code, then set password*/
    22b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b8:	81 38       	cpi	r24, 0x81	; 129
    22ba:	09 f4       	brne	.+2      	; 0x22be <main+0x3a>
    22bc:	88 c0       	rjmp	.+272    	; 0x23ce <main+0x14a>
        {
            UART_sendData(FIRST_TIME_TRUE);    /*indicate first time to other mcu*/
    22be:	86 e5       	ldi	r24, 0x56	; 86
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <UART_sendData>
            UART_recieveString(recieveBuffer); /*recieve password to save*/
    22c6:	ce 01       	movw	r24, r28
    22c8:	80 96       	adiw	r24, 0x20	; 32
    22ca:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_recieveString>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 e2       	ldi	r26, 0x20	; 32
    22d4:	b1 e4       	ldi	r27, 0x41	; 65
    22d6:	89 8f       	std	Y+25, r24	; 0x19
    22d8:	9a 8f       	std	Y+26, r25	; 0x1a
    22da:	ab 8f       	std	Y+27, r26	; 0x1b
    22dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22de:	69 8d       	ldd	r22, Y+25	; 0x19
    22e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a ef       	ldi	r20, 0xFA	; 250
    22ec:	54 e4       	ldi	r21, 0x44	; 68
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8d 8b       	std	Y+21, r24	; 0x15
    22f8:	9e 8b       	std	Y+22, r25	; 0x16
    22fa:	af 8b       	std	Y+23, r26	; 0x17
    22fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2300:	7e 89       	ldd	r23, Y+22	; 0x16
    2302:	8f 89       	ldd	r24, Y+23	; 0x17
    2304:	98 8d       	ldd	r25, Y+24	; 0x18
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	2c f4       	brge	.+10     	; 0x2320 <main+0x9c>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 8b       	std	Y+20, r25	; 0x14
    231c:	8b 8b       	std	Y+19, r24	; 0x13
    231e:	3f c0       	rjmp	.+126    	; 0x239e <main+0x11a>
	else if (__tmp > 65535)
    2320:	6d 89       	ldd	r22, Y+21	; 0x15
    2322:	7e 89       	ldd	r23, Y+22	; 0x16
    2324:	8f 89       	ldd	r24, Y+23	; 0x17
    2326:	98 8d       	ldd	r25, Y+24	; 0x18
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	4c f5       	brge	.+82     	; 0x238a <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2338:	69 8d       	ldd	r22, Y+25	; 0x19
    233a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    233c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    233e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	51 e4       	ldi	r21, 0x41	; 65
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9c 8b       	std	Y+20, r25	; 0x14
    235e:	8b 8b       	std	Y+19, r24	; 0x13
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <main+0xfc>
    2362:	88 ec       	ldi	r24, 0xC8	; 200
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9a 8b       	std	Y+18, r25	; 0x12
    2368:	89 8b       	std	Y+17, r24	; 0x11
    236a:	89 89       	ldd	r24, Y+17	; 0x11
    236c:	9a 89       	ldd	r25, Y+18	; 0x12
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <main+0xea>
    2372:	9a 8b       	std	Y+18, r25	; 0x12
    2374:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2380:	8b 89       	ldd	r24, Y+19	; 0x13
    2382:	9c 89       	ldd	r25, Y+20	; 0x14
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	69 f7       	brne	.-38     	; 0x2362 <main+0xde>
    2388:	14 c0       	rjmp	.+40     	; 0x23b2 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9c 8b       	std	Y+20, r25	; 0x14
    239c:	8b 8b       	std	Y+19, r24	; 0x13
    239e:	8b 89       	ldd	r24, Y+19	; 0x13
    23a0:	9c 89       	ldd	r25, Y+20	; 0x14
    23a2:	98 8b       	std	Y+16, r25	; 0x10
    23a4:	8f 87       	std	Y+15, r24	; 0x0f
    23a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a8:	98 89       	ldd	r25, Y+16	; 0x10
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <main+0x126>
    23ae:	98 8b       	std	Y+16, r25	; 0x10
    23b0:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(10);/*delay for processing eeprom*/
            EEPROM_writeByte(EEPROM_PASSWORD_CHECK_FIRST_TIME_ADDRESS, EEPROM_PASSWORD_CHECK_FIRST_TIME_CODE); /*write first time code indicating the next time that its not the first anymore*/
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	92 e0       	ldi	r25, 0x02	; 2
    23b6:	61 e8       	ldi	r22, 0x81	; 129
    23b8:	0e 94 ba 05 	call	0xb74	; 0xb74 <EEPROM_writeByte>
            EEPROM_writeString(EEPROM_PASSWORD_START_ADDRESS, recieveBuffer);                                  /*save password in its base address Specified in MC2projectConfig EEPROM_PASSWORD_START_ADDRESS*/
    23bc:	9e 01       	movw	r18, r28
    23be:	20 5e       	subi	r18, 0xE0	; 224
    23c0:	3f 4f       	sbci	r19, 0xFF	; 255
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	93 e0       	ldi	r25, 0x03	; 3
    23c6:	b9 01       	movw	r22, r18
    23c8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <EEPROM_writeString>
    23cc:	6a cf       	rjmp	.-300    	; 0x22a2 <main+0x1e>
           //UART_sendData(AUTHORIZED);/*send to othe mcu that it's authorized*/
        continue;
        }
        else
        {
            UART_sendData(FIRST_TIME_FALSE);
    23ce:	8a e1       	ldi	r24, 0x1A	; 26
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <UART_sendData>
            UART_recieveString(recieveBuffer);
    23d6:	ce 01       	movw	r24, r28
    23d8:	80 96       	adiw	r24, 0x20	; 32
    23da:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_recieveString>
            EEPROM_readString(EEPROM_PASSWORD_START_ADDRESS, passwordBuffer);
    23de:	9e 01       	movw	r18, r28
    23e0:	24 5d       	subi	r18, 0xD4	; 212
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	93 e0       	ldi	r25, 0x03	; 3
    23e8:	b9 01       	movw	r22, r18
    23ea:	0e 94 8b 07 	call	0xf16	; 0xf16 <EEPROM_readString>
            if (strcmp(passwordBuffer, recieveBuffer) == 0)
    23ee:	ce 01       	movw	r24, r28
    23f0:	8c 96       	adiw	r24, 0x2c	; 44
    23f2:	9e 01       	movw	r18, r28
    23f4:	20 5e       	subi	r18, 0xE0	; 224
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	b9 01       	movw	r22, r18
    23fa:	0e 94 cc 13 	call	0x2798	; 0x2798 <strcmp>
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	41 f4       	brne	.+16     	; 0x2412 <main+0x18e>
            {
                UART_sendData(AUTHORIZED);
    2402:	8a ee       	ldi	r24, 0xEA	; 234
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <UART_sendData>
                }
                UART_sendData(UNAUTHORIZED);
                continue;
            }
        }
        key = UART_recieveData();
    240a:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_recieveData>
    240e:	8d 8f       	std	Y+29, r24	; 0x1d
    2410:	16 c0       	rjmp	.+44     	; 0x243e <main+0x1ba>
            {
                UART_sendData(AUTHORIZED);
            }
            else
            {
                wrong_pass_count++;
    2412:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	8e 8f       	std	Y+30, r24	; 0x1e
                if (wrong_pass_count > 4)
    2418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    241a:	85 30       	cpi	r24, 0x05	; 5
    241c:	40 f0       	brcs	.+16     	; 0x242e <main+0x1aa>
                {
                    wrong_pass_count = 0;
    241e:	1e 8e       	std	Y+30, r1	; 0x1e
                    UART_sendData(ALARM_ON);
    2420:	8a e2       	ldi	r24, 0x2A	; 42
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <UART_sendData>
                    activate_alarm();
    2428:	0e 94 45 13 	call	0x268a	; 0x268a <activate_alarm>
    242c:	3a cf       	rjmp	.-396    	; 0x22a2 <main+0x1e>
                    continue;
                }
                UART_sendData(UNAUTHORIZED);
    242e:	82 e2       	ldi	r24, 0x22	; 34
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <UART_sendData>
    2436:	35 cf       	rjmp	.-406    	; 0x22a2 <main+0x1e>
            }
        }
        key = UART_recieveData();
        while ((key != '+') && (key != '-'))
        {
            key = UART_recieveData();
    2438:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_recieveData>
    243c:	8d 8f       	std	Y+29, r24	; 0x1d
                UART_sendData(UNAUTHORIZED);
                continue;
            }
        }
        key = UART_recieveData();
        while ((key != '+') && (key != '-'))
    243e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2440:	8b 32       	cpi	r24, 0x2B	; 43
    2442:	19 f0       	breq	.+6      	; 0x244a <main+0x1c6>
    2444:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2446:	8d 32       	cpi	r24, 0x2D	; 45
    2448:	b9 f7       	brne	.-18     	; 0x2438 <main+0x1b4>
        {
            key = UART_recieveData();
        }
        if (key == '+')
    244a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    244c:	8b 32       	cpi	r24, 0x2B	; 43
    244e:	19 f4       	brne	.+6      	; 0x2456 <main+0x1d2>
        {
            openDoor();
    2450:	0e 94 5e 13 	call	0x26bc	; 0x26bc <openDoor>
    2454:	26 cf       	rjmp	.-436    	; 0x22a2 <main+0x1e>
        }
        else if (key == '-')
    2456:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2458:	8d 32       	cpi	r24, 0x2D	; 45
    245a:	09 f0       	breq	.+2      	; 0x245e <main+0x1da>
    245c:	22 cf       	rjmp	.-444    	; 0x22a2 <main+0x1e>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a0 e2       	ldi	r26, 0x20	; 32
    2464:	b1 e4       	ldi	r27, 0x41	; 65
    2466:	8b 87       	std	Y+11, r24	; 0x0b
    2468:	9c 87       	std	Y+12, r25	; 0x0c
    246a:	ad 87       	std	Y+13, r26	; 0x0d
    246c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2470:	7c 85       	ldd	r23, Y+12	; 0x0c
    2472:	8d 85       	ldd	r24, Y+13	; 0x0d
    2474:	9e 85       	ldd	r25, Y+14	; 0x0e
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	4a ef       	ldi	r20, 0xFA	; 250
    247c:	54 e4       	ldi	r21, 0x44	; 68
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8f 83       	std	Y+7, r24	; 0x07
    2488:	98 87       	std	Y+8, r25	; 0x08
    248a:	a9 87       	std	Y+9, r26	; 0x09
    248c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248e:	6f 81       	ldd	r22, Y+7	; 0x07
    2490:	78 85       	ldd	r23, Y+8	; 0x08
    2492:	89 85       	ldd	r24, Y+9	; 0x09
    2494:	9a 85       	ldd	r25, Y+10	; 0x0a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <main+0x22c>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <main+0x2aa>
	else if (__tmp > 65535)
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    24cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <main+0x28c>
    24f2:	88 ec       	ldi	r24, 0xC8	; 200
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <main+0x27a>
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <main+0x26e>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <main+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <main+0x2b6>
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
        {
            /*to change password, pretend it's first time by altering first time check value*/
            _delay_ms(10);
            EEPROM_writeByte(EEPROM_PASSWORD_CHECK_FIRST_TIME_ADDRESS, 0x3);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	92 e0       	ldi	r25, 0x02	; 2
    2546:	63 e0       	ldi	r22, 0x03	; 3
    2548:	0e 94 ba 05 	call	0xb74	; 0xb74 <EEPROM_writeByte>
    254c:	aa ce       	rjmp	.-684    	; 0x22a2 <main+0x1e>

0000254e <Timer_1_delaySeconds>:
        }
    }
}

void Timer_1_delaySeconds(uint16 seconds)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	60 97       	sbiw	r28, 0x10	; 16
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	9b 87       	std	Y+11, r25	; 0x0b
    2564:	8a 87       	std	Y+10, r24	; 0x0a
    Timer_1_ConfigType cfg = {F_CPU_1024, 7812, 0, CTC_OCR1A, NORMAL_OCn_DISCONNECTED, NORMAL_OCn_DISCONNECTED};
    2566:	ce 01       	movw	r24, r28
    2568:	02 96       	adiw	r24, 0x02	; 2
    256a:	9d 87       	std	Y+13, r25	; 0x0d
    256c:	8c 87       	std	Y+12, r24	; 0x0c
    256e:	e8 e6       	ldi	r30, 0x68	; 104
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	ff 87       	std	Y+15, r31	; 0x0f
    2574:	ee 87       	std	Y+14, r30	; 0x0e
    2576:	f8 e0       	ldi	r31, 0x08	; 8
    2578:	f8 8b       	std	Y+16, r31	; 0x10
    257a:	ee 85       	ldd	r30, Y+14	; 0x0e
    257c:	ff 85       	ldd	r31, Y+15	; 0x0f
    257e:	00 80       	ld	r0, Z
    2580:	8e 85       	ldd	r24, Y+14	; 0x0e
    2582:	9f 85       	ldd	r25, Y+15	; 0x0f
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	9f 87       	std	Y+15, r25	; 0x0f
    2588:	8e 87       	std	Y+14, r24	; 0x0e
    258a:	ec 85       	ldd	r30, Y+12	; 0x0c
    258c:	fd 85       	ldd	r31, Y+13	; 0x0d
    258e:	00 82       	st	Z, r0
    2590:	8c 85       	ldd	r24, Y+12	; 0x0c
    2592:	9d 85       	ldd	r25, Y+13	; 0x0d
    2594:	01 96       	adiw	r24, 0x01	; 1
    2596:	9d 87       	std	Y+13, r25	; 0x0d
    2598:	8c 87       	std	Y+12, r24	; 0x0c
    259a:	98 89       	ldd	r25, Y+16	; 0x10
    259c:	91 50       	subi	r25, 0x01	; 1
    259e:	98 8b       	std	Y+16, r25	; 0x10
    25a0:	e8 89       	ldd	r30, Y+16	; 0x10
    25a2:	ee 23       	and	r30, r30
    25a4:	51 f7       	brne	.-44     	; 0x257a <Timer_1_delaySeconds+0x2c>
    Timer_1_init(&cfg);
    25a6:	ce 01       	movw	r24, r28
    25a8:	02 96       	adiw	r24, 0x02	; 2
    25aa:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Timer_1_init>
    for (uint8 i = 0; i < seconds; i++)
    25ae:	19 82       	std	Y+1, r1	; 0x01
    25b0:	17 c0       	rjmp	.+46     	; 0x25e0 <Timer_1_delaySeconds+0x92>
    {
        while (BIT_IS_CLEAR(TIFR, OCF1A))
    25b2:	e8 e5       	ldi	r30, 0x58	; 88
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	80 71       	andi	r24, 0x10	; 16
    25be:	90 70       	andi	r25, 0x00	; 0
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	b9 f3       	breq	.-18     	; 0x25b2 <Timer_1_delaySeconds+0x64>
            ;
        SET_BIT(TIFR, OCF1A);
    25c4:	a8 e5       	ldi	r26, 0x58	; 88
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e8 e5       	ldi	r30, 0x58	; 88
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	80 61       	ori	r24, 0x10	; 16
    25d0:	8c 93       	st	X, r24
        Timer_1_setCounterValue(0);
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <Timer_1_setCounterValue>

void Timer_1_delaySeconds(uint16 seconds)
{
    Timer_1_ConfigType cfg = {F_CPU_1024, 7812, 0, CTC_OCR1A, NORMAL_OCn_DISCONNECTED, NORMAL_OCn_DISCONNECTED};
    Timer_1_init(&cfg);
    for (uint8 i = 0; i < seconds; i++)
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	8f 5f       	subi	r24, 0xFF	; 255
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ea:	28 17       	cp	r18, r24
    25ec:	39 07       	cpc	r19, r25
    25ee:	08 f3       	brcs	.-62     	; 0x25b2 <Timer_1_delaySeconds+0x64>
            ;
        SET_BIT(TIFR, OCF1A);
        Timer_1_setCounterValue(0);
    }

    Timer_1_deInit();
    25f0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <Timer_1_deInit>
}
    25f4:	60 96       	adiw	r28, 0x10	; 16
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <init_APP_MC2>:

void init_APP_MC2()
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	2d 97       	sbiw	r28, 0x0d	; 13
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    UART_ConfigType cfg = {ASYNCHRONOUS, DISABLE_PARITY, 9600, UART_8_BIT, UART_1_STOP_BIT, TRANSMITTER_RECIEVER, RISING_T_FALLING_R};
    261a:	ce 01       	movw	r24, r28
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	9a 87       	std	Y+10, r25	; 0x0a
    2620:	89 87       	std	Y+9, r24	; 0x09
    2622:	e0 e7       	ldi	r30, 0x70	; 112
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	fc 87       	std	Y+12, r31	; 0x0c
    2628:	eb 87       	std	Y+11, r30	; 0x0b
    262a:	f8 e0       	ldi	r31, 0x08	; 8
    262c:	fd 87       	std	Y+13, r31	; 0x0d
    262e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2630:	fc 85       	ldd	r31, Y+12	; 0x0c
    2632:	00 80       	ld	r0, Z
    2634:	8b 85       	ldd	r24, Y+11	; 0x0b
    2636:	9c 85       	ldd	r25, Y+12	; 0x0c
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	9c 87       	std	Y+12, r25	; 0x0c
    263c:	8b 87       	std	Y+11, r24	; 0x0b
    263e:	e9 85       	ldd	r30, Y+9	; 0x09
    2640:	fa 85       	ldd	r31, Y+10	; 0x0a
    2642:	00 82       	st	Z, r0
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	9a 87       	std	Y+10, r25	; 0x0a
    264c:	89 87       	std	Y+9, r24	; 0x09
    264e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2650:	91 50       	subi	r25, 0x01	; 1
    2652:	9d 87       	std	Y+13, r25	; 0x0d
    2654:	ed 85       	ldd	r30, Y+13	; 0x0d
    2656:	ee 23       	and	r30, r30
    2658:	51 f7       	brne	.-44     	; 0x262e <init_APP_MC2+0x28>
    UART_init(&cfg);
    265a:	ce 01       	movw	r24, r28
    265c:	01 96       	adiw	r24, 0x01	; 1
    265e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <UART_init>
    EEPROM_init();
    2662:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_init>
    MOTOR_init();
    2666:	0e 94 b2 09 	call	0x1364	; 0x1364 <MOTOR_init>
    SET_BIT(BUZZER_PORT_DIRECTION, BUZZER_PIN);
    266a:	a4 e3       	ldi	r26, 0x34	; 52
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e4 e3       	ldi	r30, 0x34	; 52
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	80 61       	ori	r24, 0x10	; 16
    2676:	8c 93       	st	X, r24
}
    2678:	2d 96       	adiw	r28, 0x0d	; 13
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <activate_alarm>:

void activate_alarm()
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(BUZZER_PORT, BUZZER_PIN);
    2692:	a5 e3       	ldi	r26, 0x35	; 53
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e5 e3       	ldi	r30, 0x35	; 53
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	80 61       	ori	r24, 0x10	; 16
    269e:	8c 93       	st	X, r24
    Timer_1_delaySeconds(ALARM_ON_PERIOD);
    26a0:	8a e0       	ldi	r24, 0x0A	; 10
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 a7 12 	call	0x254e	; 0x254e <Timer_1_delaySeconds>
    CLEAR_BIT(BUZZER_PORT, BUZZER_PIN);
    26a8:	a5 e3       	ldi	r26, 0x35	; 53
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e5 e3       	ldi	r30, 0x35	; 53
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	8f 7e       	andi	r24, 0xEF	; 239
    26b4:	8c 93       	st	X, r24
}
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <openDoor>:
void openDoor()
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    MOTOR_rotateClockwise();
    26c4:	0e 94 c7 09 	call	0x138e	; 0x138e <MOTOR_rotateClockwise>
    Timer_1_delaySeconds(OPEN_DOOR_PERIOD / 2);
    26c8:	85 e0       	ldi	r24, 0x05	; 5
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 a7 12 	call	0x254e	; 0x254e <Timer_1_delaySeconds>
    MOTOR_rotateAntiClockwise();
    26d0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <MOTOR_rotateAntiClockwise>
    Timer_1_delaySeconds(OPEN_DOOR_PERIOD / 2);
    26d4:	85 e0       	ldi	r24, 0x05	; 5
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 a7 12 	call	0x254e	; 0x254e <Timer_1_delaySeconds>
    MOTOR_stop();
    26dc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MOTOR_stop>
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <__udivmodsi4>:
    26e6:	a1 e2       	ldi	r26, 0x21	; 33
    26e8:	1a 2e       	mov	r1, r26
    26ea:	aa 1b       	sub	r26, r26
    26ec:	bb 1b       	sub	r27, r27
    26ee:	fd 01       	movw	r30, r26
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <__udivmodsi4_ep>

000026f2 <__udivmodsi4_loop>:
    26f2:	aa 1f       	adc	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	ee 1f       	adc	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	a2 17       	cp	r26, r18
    26fc:	b3 07       	cpc	r27, r19
    26fe:	e4 07       	cpc	r30, r20
    2700:	f5 07       	cpc	r31, r21
    2702:	20 f0       	brcs	.+8      	; 0x270c <__udivmodsi4_ep>
    2704:	a2 1b       	sub	r26, r18
    2706:	b3 0b       	sbc	r27, r19
    2708:	e4 0b       	sbc	r30, r20
    270a:	f5 0b       	sbc	r31, r21

0000270c <__udivmodsi4_ep>:
    270c:	66 1f       	adc	r22, r22
    270e:	77 1f       	adc	r23, r23
    2710:	88 1f       	adc	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	1a 94       	dec	r1
    2716:	69 f7       	brne	.-38     	; 0x26f2 <__udivmodsi4_loop>
    2718:	60 95       	com	r22
    271a:	70 95       	com	r23
    271c:	80 95       	com	r24
    271e:	90 95       	com	r25
    2720:	9b 01       	movw	r18, r22
    2722:	ac 01       	movw	r20, r24
    2724:	bd 01       	movw	r22, r26
    2726:	cf 01       	movw	r24, r30
    2728:	08 95       	ret

0000272a <__prologue_saves__>:
    272a:	2f 92       	push	r2
    272c:	3f 92       	push	r3
    272e:	4f 92       	push	r4
    2730:	5f 92       	push	r5
    2732:	6f 92       	push	r6
    2734:	7f 92       	push	r7
    2736:	8f 92       	push	r8
    2738:	9f 92       	push	r9
    273a:	af 92       	push	r10
    273c:	bf 92       	push	r11
    273e:	cf 92       	push	r12
    2740:	df 92       	push	r13
    2742:	ef 92       	push	r14
    2744:	ff 92       	push	r15
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	ca 1b       	sub	r28, r26
    2754:	db 0b       	sbc	r29, r27
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	09 94       	ijmp

00002762 <__epilogue_restores__>:
    2762:	2a 88       	ldd	r2, Y+18	; 0x12
    2764:	39 88       	ldd	r3, Y+17	; 0x11
    2766:	48 88       	ldd	r4, Y+16	; 0x10
    2768:	5f 84       	ldd	r5, Y+15	; 0x0f
    276a:	6e 84       	ldd	r6, Y+14	; 0x0e
    276c:	7d 84       	ldd	r7, Y+13	; 0x0d
    276e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2770:	9b 84       	ldd	r9, Y+11	; 0x0b
    2772:	aa 84       	ldd	r10, Y+10	; 0x0a
    2774:	b9 84       	ldd	r11, Y+9	; 0x09
    2776:	c8 84       	ldd	r12, Y+8	; 0x08
    2778:	df 80       	ldd	r13, Y+7	; 0x07
    277a:	ee 80       	ldd	r14, Y+6	; 0x06
    277c:	fd 80       	ldd	r15, Y+5	; 0x05
    277e:	0c 81       	ldd	r16, Y+4	; 0x04
    2780:	1b 81       	ldd	r17, Y+3	; 0x03
    2782:	aa 81       	ldd	r26, Y+2	; 0x02
    2784:	b9 81       	ldd	r27, Y+1	; 0x01
    2786:	ce 0f       	add	r28, r30
    2788:	d1 1d       	adc	r29, r1
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	ed 01       	movw	r28, r26
    2796:	08 95       	ret

00002798 <strcmp>:
    2798:	fb 01       	movw	r30, r22
    279a:	dc 01       	movw	r26, r24
    279c:	8d 91       	ld	r24, X+
    279e:	01 90       	ld	r0, Z+
    27a0:	80 19       	sub	r24, r0
    27a2:	01 10       	cpse	r0, r1
    27a4:	d9 f3       	breq	.-10     	; 0x279c <strcmp+0x4>
    27a6:	99 0b       	sbc	r25, r25
    27a8:	08 95       	ret

000027aa <_exit>:
    27aa:	f8 94       	cli

000027ac <__stop_program>:
    27ac:	ff cf       	rjmp	.-2      	; 0x27ac <__stop_program>
